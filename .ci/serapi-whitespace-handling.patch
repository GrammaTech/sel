From 4334098268e3a33b40932e208f7fd0fd8ec60b35 Mon Sep 17 00:00:00 2001
From: Rebecca Swords <rswords@grammatech.com>
Date: Mon, 20 Nov 2017 10:24:03 -0600
Subject: [PATCH] Escape '\' and '"', remove escaped whitespace

Ensure that '\'s and '"'s are escaped, and remove '\n', '\t', '\r',
and '\b' because Lisp stubbornly refuses to read in these characters
correctly otherwise. Note: this should just be removing whitespace
characters added by Coq formatting, but not uses of such characters that
are necessary to Coq definitions (e.g., SPV uses newline and tab
characters in definitions of some production rules, and we don't remove
those).
---
 sertop/sertop_util.ml | 27 +++++++++++++--------------
 1 file changed, 13 insertions(+), 14 deletions(-)

diff --git a/sertop/sertop_util.ml b/sertop/sertop_util.ml
index 08db164..fcc258a 100644
--- a/sertop/sertop_util.ml
+++ b/sertop/sertop_util.ml
@@ -31,7 +31,8 @@ let must_escape str =
   len = 0 ||
     let rec loop ix =
       match str.[ix] with
-      | '"' | '(' | ')' | '[' | ']' | ';' | '\\' | '\''-> true
+      | '"' | '(' | ')' | '[' | ']' | ';' | ':' | '\\' | '\'' | '.' -> true
+      | '\n' | '\t' | '\r' | '\b' -> true
       (* Avoid unquoted comma at the beggining of the string *)
       | ',' -> ix = 0 || loop (ix - 1)
       | '|' -> ix > 0 && let next = ix - 1 in str.[next] = '#' || loop next
@@ -47,31 +48,29 @@ let st_escaped (s : string) =
   let sget = String.unsafe_get in
   let open Bytes in
   let n = ref 0 in
+  let must_set = ref false in
   for i = 0 to String.length s - 1 do
     n := !n +
       (match sget s i with
-       | '\"' | '\\' | '\n' | '\t' | '\r' | '\b' -> 2
+       | '\"' | '\\'  -> must_set := true; 4
+       | '\n' | '\t' | '\r' | '\b' -> must_set := true; 0
        | ' ' .. '~' -> 1
        (* UTF-8 are valid between \033 -- \247 *)
-       | '\000' .. '\032' -> 4
-       | '\248' .. '\255' -> 4
+       | '\000' .. '\032' -> must_set := true; 4
+       | '\248' .. '\255' -> must_set := true; 4
        | _                -> 1)
   done;
-  if !n = String.length s then Bytes.of_string s else begin
+  if !must_set = false then Bytes.of_string s else begin
     let s' = create !n in
     n := 0;
     for i = 0 to String.length s - 1 do
       begin match sget s i with
       | ('\"' | '\\') as c ->
-          unsafe_set s' !n '\\'; incr n; unsafe_set s' !n c
-      | '\n' ->
-          unsafe_set s' !n '\\'; incr n; unsafe_set s' !n 'n'
-      | '\t' ->
-          unsafe_set s' !n '\\'; incr n; unsafe_set s' !n 't'
-      | '\r' ->
-          unsafe_set s' !n '\\'; incr n; unsafe_set s' !n 'r'
-      | '\b' ->
-          unsafe_set s' !n '\\'; incr n; unsafe_set s' !n 'b'
+          unsafe_set s' !n '\\'; incr n; unsafe_set s' !n '\\'; incr n; unsafe_set s' !n '\\'; incr n; unsafe_set s' !n c
+      | '\n' -> decr n
+      | '\t' -> decr n
+      | '\r' -> decr n
+      | '\b' -> decr n
       | (' ' .. '~') as c -> unsafe_set s' !n c
       (* Valid UTF-8 are valid between \033 -- \247 *)
       | '\000' .. '\032'
-- 
2.7.4

