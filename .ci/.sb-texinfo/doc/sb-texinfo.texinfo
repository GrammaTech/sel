\input texinfo   @c -*-texinfo-*-
@c %**start of header
@setfilename sb-texinfo.info
@settitle SB-TEXINFO
@c %**end of header

@c for install-info
@dircategory Software development
@direntry
* sb-texinfo:           Documentation String to Texinfo Converter
@end direntry

@finalout

@macro project
@sc{sb-texinfo }
@end macro

@titlepage
@title @project
@subtitle Documentation String to Texinfo Converter
@end titlepage

@include include/sb-texinfo.texinfo

@node Top
@top Introduction

@project converts Common Lisp documentation strings for inclusion in
a Texinfo manual---which can then be converted into eg. HTML and PDF.

While current implementation is SBCL-only, there is no fundamental
reason why support for other Common Lisps could not be added.

@project was originally written for processing the SBCL docstrings
by Rudi Sclatte in 2004, and has been maintained as part of SBCL since
then. This version was split from the SBCL sources in 2011 in order to
generalize it for documenting other software. Like SBCL, this manual
is in the Public Domain.

@c Version control
@project is maintained in Git:
@example
git clone git://github.com/nikodemus/sb-texinfo.git
@end example
will get you a local copy.
@example
@url{http://github.com/nikodemus/sb-texinfo/}
@end example
is the GitHub project page, where the issue tracker is located.

@contents

@menu
* Overview::                    
* Examples::                    
* Dictionary::                  
* Function Index::
@end menu

@node Overview
@comment  node-name,  next,  previous,  up
@chapter Overview

There are two main ways of using @project

@itemize

@item @strong{The Right Way:}
The recommended way is to write a manual in Texinfo, and use the
@@include directive to include processed docstrings generated using
@reffun{generate-includes} and to export block comments in source
using @reffun{generate-comment-includes}.

@item @strong{Quick and Dirty:} 
Call @reffun{document-package} with the name of the package or
packages to document. This will produce a Texinfo file containing
extracted documentation for the project.

This can be a convenient way to produce a template for further
development using the first method, and perhaps more importantly
quickly allows you to generate reference documentation for packages
with docstrings but no manual.

@end itemize

@node Examples
@comment  node-name,  next,  previous,  up
@chapter Examples

@section Using @code{generate-includes}

This manual is produced using the @reffun{generate-includes} method.
@file{sb-texinfo.texinfo} is the main Texinfo source file, where
docstrings are included.

@example
@url{https://raw.github.com/nikodemus/sb-texinfo/master/doc/sb-texinfo.texinfo}
@end example

A @file{Makefile} is responsible for running SBCL and the Texinfo toolchain.

@example
@url{https://raw.github.com/nikodemus/sb-texinfo/master/doc/Makefile}
@end example

Finally, @file{style.css} is used to prettify the HTML version.

@example
@url{https://raw.github.com/nikodemus/sb-texinfo/master/doc/style.css}
@end example

This produces the following HTML and PDF files:

@example
@url{http://nikodemus.github.com/sb-texinfo/sb-texinfo.html}
@url{http://nikodemus.github.com/sb-texinfo/sb-texinfo.pdf}
@end example

and a GNU info file as well.

@section Using @code{generate-comment-includes}

In some cases it may be desirable to include non-docstring
documentation in source code.  The newly added
@reffun{generate-comment-includes} may be used to export special
marked comments into individual texinfo files which may themselves be
included.

@lisp
^L
;;;; Example Top-level Comment.
;;;; 
;;;; Describes some property of the nearby code.
;;;; 
;;;; @@texi@{foo@}
@end lisp

Comments like the above example which are (1) either preceded by a
page break, @code{^L} in an Emacs buffer, or are at the top of the
file (2) top level comments starting at the beginning of a line, and
(3) include the special substring @code{@@texi@{foo@}}, will be
exported to a texinfo file named @code{foo.texi} in the current
include directory.

There are a couple of important special cases of lines in comment
blocks which are not exported.

@table @dfn

@item Copyright lines at top of file
These typically should not be exported and will not be.

@item Lines that look like Emacs directives
Lines at the top of a file with @code{-*-} will be inhibited.

@item File name and brief description at top of file
These typically should not be exported and will not be.  E.g., the
first line in the following would not be exported.

@lisp
;;;; foo.lisp --- This file does foo for you
;;;
;;; Some description of FOO which will be exported.
;;;
;;; @@texi@{foo@}
@end lisp

@item Comment Headers
We typically don't want the header in the exported output because
we'll prefer to write something like @@subsection@{blah@} in the
texinfo directly.  So first lines with four ``;''s will be elided.
E.g., the first line of the following.

@lisp
^L
;;;; Foo
;;;
;;; Some description of FOO which will be exported.
;;;
;;; @@texi@{foo@}
@end lisp

@end table



@section Using @code{document-package}

An alternate version of this manual, produced using

@lisp
(sb-texinfo:document-package
 :sb-texinfo
 :output-file "document-package-sample.texinfo")
@end lisp

and further processed using the @file{Makefile} linked above:
@example
@url{http://nikodemus.github.com/sb-texinfo/document-package-sample.html}
@url{http://nikodemus.github.com/sb-texinfo/document-package-sample.pdf}
@end example

@node Dictionary
@comment  node-name,  next,  previous,  up
@chapter Dictionary

@include include/fun-sb-texinfo-document-package.texinfo
@include include/fun-sb-texinfo-document-package-pathname.texinfo
@include include/fun-sb-texinfo-generate-includes.texinfo
@include include/fun-sb-texinfo-generate-comment-includes.texinfo

@include include/short-backmatter.texinfo

@bye
