variables:
  DOCKER_REGISTRY: "docker.grammatech.com:14850"
  LOCAL_IMAGE_NAME: '$CI_BUILD_REF_NAME-$CI_PIPELINE_ID'

before_script:
  - docker info

stages:
  - build-ubuntu
  - build-arch
  - test-and-tag-ubuntu
  - test-and-tag-arch
  - dependents
  - deploy-and-cleanup

.build-template: &build
  script:
    - docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_REGISTRY
    - if [ "$OS" = "ubuntu" ];
      then
          if [ -z "${CI_BUILD_REF_NAME##*-release}" ];
          then
              docker pull $DOCKER_REGISTRY/synthesis/cl:$CI_BUILD_REF_NAME;
          else
              docker pull $DOCKER_REGISTRY/synthesis/cl:latest;
          fi
      else
          if [ -z "${CI_BUILD_REF_NAME##*-release}" ];
          then
              docker pull $DOCKER_REGISTRY/synthesis/cl:$CI_BUILD_REF_NAME-$OS;
          else
              docker pull $DOCKER_REGISTRY/synthesis/cl:$OS;
          fi
      fi

    - cp .ci/Dockerfile.$OS Dockerfile
    - docker build --build-arg=GT=yes -f Dockerfile -t ${LOCAL_IMAGE_NAME}-${OS} .

build-ubuntu:
  stage: build-ubuntu
  variables:
    OS: 'ubuntu'
  <<: *build

build-arch:
  stage: build-arch
  variables:
    OS: 'arch'
  <<: *build

.run-template: &run
  script:
    # If on release branch, tag the image with its branch name and push.
    - if [ -z "${CI_BUILD_REF_NAME##*-release}" ];
      then
          if [ "$OS" = "ubuntu" ];
          then
              docker run -e LOCAL_USER=root -e GT=yes ${LOCAL_IMAGE_NAME}-${OS} /bin/bash -c "cd /gt/sel && make check-testbot";
              docker tag ${LOCAL_IMAGE_NAME}-${OS} $DOCKER_REGISTRY/$CI_PROJECT_PATH:$CI_BUILD_REF_NAME;
              docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_REGISTRY;
              docker push $DOCKER_REGISTRY/$CI_PROJECT_PATH:$CI_BUILD_REF_NAME;
          elif [ "$OS" = "arch" ];
          then
              docker run -e LOCAL_USER=root -e GT=yes ${LOCAL_IMAGE_NAME}-${OS} /bin/bash -c "cd /gt/sel && make check-testbot";
              docker tag ${LOCAL_IMAGE_NAME}-${OS} $DOCKER_REGISTRY/$CI_PROJECT_PATH:$CI_BUILD_REF_NAME-arch;
              docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_REGISTRY;
              docker push $DOCKER_REGISTRY/$CI_PROJECT_PATH:$CI_BUILD_REF_NAME-arch;
          fi
      fi

    # If on master branch, push test results to DataManager and push
    # up a new "latest" image, otherwise, run locally.
    - if [ "$CI_BUILD_REF_NAME" = "master" ];
      then
          if [ "$OS" = "ubuntu" ];
          then
              docker run -e LOCAL_USER=root -e GT=yes ${LOCAL_IMAGE_NAME}-${OS} /bin/bash -c "cd /gt/sel && make check-testbot";
              docker tag ${LOCAL_IMAGE_NAME}-${OS} $DOCKER_REGISTRY/$CI_PROJECT_PATH:latest;
              docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_REGISTRY;
              docker push $DOCKER_REGISTRY/$CI_PROJECT_PATH:latest;
          elif [ "$OS" = "arch" ];
          then
              docker run -e LOCAL_USER=root -e GT=yes ${LOCAL_IMAGE_NAME}-${OS} /bin/bash -c "cd /gt/sel && make check-testbot";
              docker tag ${LOCAL_IMAGE_NAME}-${OS} $DOCKER_REGISTRY/$CI_PROJECT_PATH:arch;
              docker login -u gitlab-ci-token -p $CI_BUILD_TOKEN $DOCKER_REGISTRY;
              docker push $DOCKER_REGISTRY/$CI_PROJECT_PATH:arch;
          else
              docker run -e LOCAL_USER=root -e GT=yes ${LOCAL_IMAGE_NAME}-${OS} /bin/bash -c "cd /gt/sel && make check";
          fi
      else
          docker run -e LOCAL_USER=root -e GT=yes ${LOCAL_IMAGE_NAME}-${OS} /bin/bash -c "cd /gt/sel && make check";
      fi

run-ubuntu:
  stage: test-and-tag-ubuntu
  variables:
    OS: 'ubuntu'
  <<: *run

run-arch:
  stage: test-and-tag-arch
  variables:
    OS: 'arch'
  <<: *run

trigger_bed:
  stage: dependents
  script:
    - "curl -X POST -F token=53072adf26824b62fe4bd75f81a816 -F ref=$CI_BUILD_REF_NAME https://git.grammatech.com/api/v4/projects/209/trigger/pipeline"
  only:
    - master

trigger_bug-injector:
  stage: dependents
  script:
    - "curl -X POST -F token=eb76bc2f8009af7005b43bf8f63bb0 -F ref=$CI_BUILD_REF_NAME https://git.grammatech.com/api/v4/projects/347/trigger/pipeline"
  only:
    - master

trigger_evo-rings:
  stage: dependents
  script:
    - "curl -X POST -F token=3927540b9948e9eb8d3b1774dd9627 -F ref=$CI_BUILD_REF_NAME https://git.grammatech.com/api/v4/projects/80/trigger/pipeline"
  only:
    - master

pages:
  stage: deploy-and-cleanup
  script:
    - docker run -e LOCAL_USER=root -e GT=yes ${LOCAL_IMAGE_NAME}-arch /bin/bash -c "mkdir -p /public && cd /gt/sel && make doc && cp -R doc/software-evolution-library/* /public/"
    - docker cp $(docker ps -alq):/public ./
    - docker rmi -f ${LOCAL_IMAGE_NAME}-arch
    - docker rmi -f ${LOCAL_IMAGE_NAME}-ubuntu
  artifacts:
    paths:
      - public
  only:
    - master

cleanup:
  stage: deploy-and-cleanup
  script:
    - docker rmi -f ${LOCAL_IMAGE_NAME}-arch
    - docker rmi -f ${LOCAL_IMAGE_NAME}-ubuntu
  except:
    - master
