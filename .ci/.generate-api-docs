#!/usr/bin/sbcl --script
;; -*- lisp -*-
;;
;; Build the texinfo API documentation for the software evolution library.
;;
;; This uses the included (slightly tweaked) version of sb-texinfo.
;; Call this script to build/update the texi documentation files for
;; every exported symbol.
;;
;; Call this script with the argument "packages" to rebuild the
;; doc/sel{,-utility,-view}-api.texi files to include newly documented
;; exported symbols.  (By default sb-texinfo doesn't create any output
;; for symbols without documentation in the source.)  Note that some
;; manual "fixing up" is often required after re-running with the
;; package argument and the results should be committed.
;;
(load "~/.sbclrc" :if-does-not-exist nil)
(require :uiop)
(setf uiop/lisp-build:*uninteresting-conditions*
      uiop/lisp-build:*usual-uninteresting-conditions*)
(require :sb-introspect)
(require :alexandria)
(require :split-sequence)
(require :cl-ppcre)
(load ".ci/.sb-texinfo/docstrings.lisp")
(in-package :sb-texinfo)

(pop sb-ext:*posix-argv*)

(defun usage ()
  (write-line
   "USAGE: generate-api-docs [includes|packages] package1 package2...")
  (sb-ext:exit :code 1))

(unless (> (length sb-ext:*posix-argv*) 1)
  (usage))

(defparameter packages
  (mapcar #'alexandria:make-keyword
          (mapcar #'string-upcase (cdr sb-ext:*posix-argv*))))

(mapc #'require packages)

(defun doc-name (package)
  (let ((package (find-package package)))
    (or (car (package-nicknames package))
        (package-name package))))

(defun doc-file (package)
  (concatenate 'string
    (cl-ppcre:regex-replace-all "/" (string-downcase (doc-name package)) "-")
    "-api.texi"))

(defun doc-title (package)
  (concatenate 'string (string-upcase (doc-name package)) " API"))

(let ((action (alexandria:make-keyword
               (string-upcase (car sb-ext:*posix-argv*)))))
  (case action
    (:includes
     (generate-includes "./doc/include/" packages :base-package (car packages))
     (generate-comment-includes "./doc/include/" packages :base-package (car packages))
     (format t "~&Generated includes for ~{~a~^, ~}.~%" packages))
    (:packages
     ;; Re-run to update the doc/foo-api.texi files with new links to
     ;; newly documented classes, functions, methods, types, structures,
     ;; and macros.
     (uiop:chdir "doc/")
     (mapc (lambda (package path title)
             (document-package package
                               :output-file path
                               :standalone nil
                               :title title))
           packages
           (mapcar #'doc-file packages)
           (mapcar #'doc-title packages))
     (format t "~&Generated full package docs for ~{~a~^, ~}.~%" packages))
    (otherwise
     (format t "~&Unknown action \"~S\"~%" action)
     (usage))))
