#!/usr/bin/env python3
import ast
import argparse
import collections
import functools
import json
import math
import numbers
import sys


def convert(node):
    assert isinstance(node, ast.AST)

    result = dict()
    result['class'] = node.__class__.__name__

    if (getattr(node, 'lineno', None) is not None and
        getattr(node, 'col_offset', None) is not None):
        result['lineno'] = getattr(node, 'lineno')
        result['col-offset'] = getattr(node, 'col_offset')
        result['end-lineno'] = getattr(node, 'end_lineno')
        result['end-col-offset'] = getattr(node, 'end_col_offset')

    for field in ast.iter_fields(node):
        key, value = field
        key = key.replace('_', '-')
        if isinstance(value, ast.AST):
            result[key] = convert(value)
        elif isinstance(value, list) and \
             all(isinstance(item, ast.AST)
                 for item in value if item is not None):
            result[key] = [convert(item) for item in value
                           if item is not None]
        elif isinstance(value, bytes):
            result[key] = value.decode(encoding='utf-8',
                                       errors='backslashreplace')
        elif isinstance(value, type(Ellipsis)):
            result[key] = '__ellipsis__'
        elif isinstance(value, complex):
            result['real'] = value.real
            result['imag'] = value.imag
        elif isinstance(value, numbers.Number) and math.isinf(value):
            result[key] = 'infinity'
        elif isinstance(value, numbers.Number) and math.isnan(value):
            result[key] = 'NaN'
        else:
            result[key] = value

    return result


if __name__ == '__main__':
    assert (sys.version_info[0] >= 3 and sys.version_info[1] >= 8), \
           "python-astdump requires Python 3.8.0 or higher"

    parser = argparse.ArgumentParser(
        description='Parse and output formatted python ASTs')
    parser.add_argument('input',
                        nargs='?',
                        type=argparse.FileType('r'),
                        default=sys.stdin)
    parser.add_argument('--json',
                        action='store_true',
                        default=True,
                        help='dump ASTs in JSON format')
    parser.add_argument('-pp',
                        '--pretty-print',
                        action='store_true',
                        help='pretty-print output')

    args = parser.parse_args()
    dump = functools.partial(json.dump, sort_keys=True, indent=4) \
           if args.pretty_print \
           else json.dump
    text = args.input.read()
    root = ast.parse(text, type_comments=True)
    dump(convert(root), sys.stdout)
