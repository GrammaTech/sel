
#===================================
.text
#===================================


# BEGIN - Function Header
#-----------------------------------
.align 8
.globl _start_400500
.type _start_400500, @function
_start_400500:
#-----------------------------------
# END   - Function Header

.L_400500:
            xorl %ebp,%ebp
            movq %rdx,%r9
            popq %rsi
            movq %rsp,%rdx
            andq $-16,%rsp
            pushq %rax
            pushq %rsp
            movq $4196128,%r8
            movq $4196016,%rcx
            movq $.L_400626,%rdi
            callq __libc_start_main@PLT
.L_400529:
            hlt 

# BEGIN - Function Header
#-----------------------------------
.align 2
.globl is_even
.type is_even, @function
is_even:
#-----------------------------------
# END   - Function Header

is_even:

            pushq %rbp
            movq %rsp,%rbp
            movl %edi,-4(%rbp)
            cmpl $0,-4(%rbp)
            jns .L_400619
.L_400603:
            negl -4(%rbp)
            jmp .L_400619
.L_400608:

            cmpl $1,-4(%rbp)
            jne .L_400615
.L_40060e:
            movl $0,%eax
            jmp .L_400624
.L_400615:

            subl $2,-4(%rbp)
.L_400619:

            cmpl $0,-4(%rbp)
            jg .L_400608
.L_40061f:
            movl $1,%eax
.L_400624:

            popq %rbp
            retq 

# BEGIN - Function Header
#-----------------------------------
.align 2
.globl main_400626
.type main_400626, @function
main_400626:
#-----------------------------------
# END   - Function Header

.L_400626:
            pushq %rbp
            movq %rsp,%rbp
            subq $32,%rsp
            movl %edi,-20(%rbp)
            movq %rsi,-32(%rbp)
            cmpl $2,-20(%rbp)
            je .L_400660
.L_40063b:
            movq stderr(%rip),%rax
            movq %rax,%rcx
            movl $22,%edx
            movl $1,%esi
            movl $.L_400734,%edi
            callq fwrite@PLT
.L_400659:
            movl $1,%eax
            jmp .L_40069f
.L_400660:

            movq -32(%rbp),%rax
            addq $8,%rax
            movq (%rax),%rax
            movq %rax,%rdi
            callq atoi@PLT
.L_400673:
            movl %eax,-4(%rbp)
            movl -4(%rbp),%eax
            movl %eax,%edi
            callq is_even
.L_400680:
            testl %eax,%eax
            je .L_400690
.L_400684:
            movl $.L_40074b,%edi
            callq puts@PLT
.L_40068e:
            jmp .L_40069a
.L_400690:

            movl $.L_400750,%edi
            callq puts@PLT
.L_40069a:

            movl $0,%eax
.L_40069f:

            leave 
            retq 

#===================================
.section .rodata
.align 16
#===================================

_IO_stdin_used:
          .byte 0x1
.L_400731:          .byte 0x0
.L_400732:          .byte 0x2
.L_400733:          .byte 0x0
.L_400734:
          .string "Usage: asm-test [int]\n"
.L_40074b:
          .string "even"
.L_400750:
          .string "odd"
.L_400754:

#===================================
.section .init_array
.align 8
#===================================


#===================================
.section .fini_array
.align 8
#===================================

.L_600e20:


#===================================
.section .data
.align 16
#===================================

.L_601038:          .byte 0x0
.L_601039:          .byte 0x0
.L_60103a:          .byte 0x0
.L_60103b:          .byte 0x0
.L_60103c:          .byte 0x0
.L_60103d:          .byte 0x0
.L_60103e:          .byte 0x0
.L_60103f:          .byte 0x0
.L_601040:          .byte 0x0
.L_601041:          .byte 0x0
.L_601042:          .byte 0x0
.L_601043:          .byte 0x0
.L_601044:          .byte 0x0
.L_601045:          .byte 0x0
.L_601046:          .byte 0x0
.L_601047:          .byte 0x0
.L_601048:


#===================================
.bss
.align 16
#===================================


.L_601060: .zero 8
completed.7594:
 .zero 1
.L_601069: .zero 7
.L_601070:
.L_601070:
