[
{"full_stmt": false, "binary_contents": null, "hash": 3734419822329173948, "ast_class": "ImplicitCastExpr", "random": 6.60511039984879e-06, "src_text": "-689", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 2661062529949776188, "ast_class": "ParenExpr", "random": 9.003810465868511e-06, "src_text": "((|i|) % 100 <= 19)", "unbound_vals": [["(|i|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -4924781732877804153, "ast_class": "Var", "random": 5.2313717633034607e-05, "src_text": " w", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [3456822550903822590], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": 2609431205516379570, "ast_class": "CallExpr", "random": 5.3897148516890425e-05, "src_text": "(|abs|)((|x|) - (|floor|)((|x|)))", "unbound_vals": [["(|x|)", 0]], "includes": null, "unbound_funs": [["(|abs|)", null, null, 1], ["(|floor|)", null, null, 1]], "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 3841562661737334713, "ast_class": "BinaryOperator", "random": 7.708349756163635e-05, "src_text": "(|i|) % 10000", "unbound_vals": [["(|i|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -8170195518897664075, "ast_class": "BinaryOperator", "random": 7.728457461808613e-05, "src_text": "(|i|) <= 500000", "unbound_vals": [["(|i|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -8552023859645928346, "ast_class": "ImplicitCastExpr", "random": 9.088204923990428e-05, "src_text": "381", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -3036154512742712935, "ast_class": "ImplicitCastExpr", "random": 0.00011009799243666407, "src_text": "(|a57|)", "unbound_vals": [["(|a57|)", 95]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": "8b 45 dc 3b 45 f4 0f 84 5c 03 00 00 8b 45 dc 3b 45 f0 0f 84 50 03 00 00 8b 45 dc 3b 45 ec 0f 84 44 03 00 00 8b 45 dc 3b 45 e8 0f 84 38 03 00 00 8b 45 dc 3b 45 e4 0f 84 2c 03 00 00 8b 45 dc 3b 45 e0 0f 84 20 03 00 00 c7 45 d8 00 00 00 00 83 7d d8 0a 0f 8d 0a 03 00 00 8b 45 d8 3b 45 f4 0f 84 eb 02 00 00 8b 45 d8 3b 45 f0 0f 84 df 02 00 00 8b 45 d8 3b 45 ec 0f 84 d3 02 00 00 8b 45 d8 3b 45 e8 0f 84 c7 02 00 00 8b 45 d8 3b 45 e4 0f 84 bb 02 00 00 8b 45 d8 3b 45 e0 0f 84 af 02 00 00 8b 45 d8 3b 45 dc 0f 84 a3 02 00 00 c7 45 d4 00 00 00 00 83 7d d4 0a 0f 8d 8d 02 00 00 8b 45 d4 3b 45 f4 0f 84 6e 02 00 00 8b 45 d4 3b 45 f0 0f 84 62 02 00 00 8b 45 d4 3b 45 ec 0f 84 56 02 00 00 8b 45 d4 3b 45 e8 0f 84 4a 02 00 00 8b 45 d4 3b 45 e4 0f 84 3e 02 00 00 8b 45 d4 3b 45 e0 0f 84 32 02 00 00 8b 45 d4 3b 45 dc 0f 84 26 02 00 00 8b 45 d4 3b 45 d8 0f 84 1a 02 00 00 c7 45 d0 00 00 00 00 83 7d d0 0a 0f 8d 04 02 00 00 8b 45 d0 3b 45 f4 0f 84 e5 01 00 00 8b 45 d0 3b 45 f0 0f 84 d9 01 00 00 8b 45 d0 3b 45 ec 0f 84 cd 01 00 00 8b 45 d0 3b 45 e8 0f 84 c1 01 00 00 8b 45 d0 3b 45 e4 0f 84 b5 01 00 00 8b 45 d0 3b 45 e0 0f 84 a9 01 00 00 8b 45 d0 3b 45 dc 0f 84 9d 01 00 00 8b 45 d0 3b 45 d8 0f 84 91 01 00 00 8b 45 d0 3b 45 d4 0f 84 85 01 00 00 b8 02 00 00 00 6b 4d f0 64 6b 55 ec 0a 01 d1 03 4d e8 89 45 c4 89 c8 99 8b 4d c4 f7 f9 83 fa 00 0f 85 5a 01 00 00 b8 03 00 00 00 6b 4d ec 64 6b 55 e8 0a 01 d1 03 4d e4 89 45 c0 89 c8 99 8b 4d c0 f7 f9 83 fa 00 0f 85 34 01 00 00 b8 05 00 00 00 6b 4d e8 64 6b 55 e4 0a 01 d1 03 4d e0 89 45 bc 89 c8 99 8b 4d bc f7 f9 83 fa 00 0f 85 0e 01 00 00 b8 07 00 00 00 6b 4d e4 64 6b 55 e0 0a 01 d1 03 4d dc 89 45 b8 89 c8 99 8b 4d b8 f7 f9 83 fa 00 0f 85 e8 00 00 00 b8 0b 00 00 00 6b 4d e0 64 6b 55 dc 0a 01 d1 03 4d d8 89 45 b4 89 c8 99 8b 4d b4 f7 f9 83 fa 00 0f 85 c2 00 00 00 b8 0d 00 00 00 6b 4d dc 64 6b 55 d8 0a 01 d1 03 4d d4 89 45 b0 89 c8 99 8b 4d b0 f7 f9 83 fa 00 0f 85 9c 00 00 00 b8 11 00 00 00 6b 4d d8 64 6b 55 d4 0a 01 d1 03 4d d0 89 45 ac 89 c8 99 8b 4d ac f7 f9 83 fa 00 0f 85 76 00 00 00 8b 45 f4 69 c0 00 ca 9a 3b 8b 4d f0 69 c9 00 e1 f5 05 01 c8 8b 4d ec 69 c9 80 96 98 00 01 c8 8b 4d e8 69 c9 40 42 0f 00 01 c8 8b 4d e4 69 c9 a0 86 01 00 01 c8 8b 4d e0 69 c9 10 27 00 00 01 c8 8b 4d dc 69 c9 e8 03 00 00 01 c8 8b 4d d8 6b c9 64 01 c8 8b 4d d4 8d 0c 89 8d 04 48 8b 4d d0 01 c8 89 c1 c1 f9 1f 8b 55 c8 8b 75 cc 01 c2 11 ce 89 55 c8 89 75 cc e9 00 00 00 00 e9 00 00 00 00 8b 45 d0 83 c0 01 89 45 d0 e9 f2 fd ff ff e9 00 00 00 00 e9 00 00 00 00 8b 45 d4 83 c0 01 89 45 d4 e9 69 fd ff ff e9 00 00 00 00 e9 00 00 00 00 8b 45 d8 83 c0 01 89 45 d8 e9 ec fc ff ff e9 00 00 00 00 e9 00 00 00 00 8b 45 dc 83 c0 01 89 45 dc e9 7b fc ff ff e9 00 00 00 00 e9 00 00 00 00 8b 45 e0 83 c0 01 89 45 e0 e9 16 fc ff ff e9 00 00 00 00 e9 00 00 00 00 8b 45 e4 83 c0 01 89 45 e4 e9 bd fb ff ff e9 00 00 00 00 e9 00 00 00 00 8b 45 e8 83 c0 01 89 45 e8 e9 70 fb ff ff e9 00 00 00 00 e9 00 00 00 00 8b 45 ec 83 c0 01 89 45 ec e9 2f fb ff ff e9 00 00 00 00 e9 00 00 00 00 8b 45 f0 83 c0 01 89 45 f0 e9 fa fa ff ff e9 00 00 00 00", "hash": -1529200677154919666, "ast_class": "IfStmt", "random": 0.00011631479342122386, "src_text": "if ((|a7|) != (|a1|) && (|a7|) != (|a2|) && (|a7|) != (|a3|) && (|a7|) != (|a4|) &&\n                              (|a7|) != (|a5|) && (|a7|) != (|a6|))\n                            for ((|a8|) = 0; (|a8|) < 10; (|a8|)++)\n\n                              if ((|a8|) != (|a1|) && (|a8|) != (|a2|) && (|a8|) != (|a3|) &&\n                                  (|a8|) != (|a4|) && (|a8|) != (|a5|) && (|a8|) != (|a6|) && (|a8|) != (|a7|))\n                                for ((|a9|) = 0; (|a9|) < 10; (|a9|)++)\n\n                                  if ((|a9|) != (|a1|) && (|a9|) != (|a2|) && (|a9|) != (|a3|) &&\n                                      (|a9|) != (|a4|) && (|a9|) != (|a5|) && (|a9|) != (|a6|) &&\n                                      (|a9|) != (|a7|) && (|a9|) != (|a8|))\n                                    for ((|a10|) = 0; (|a10|) < 10; (|a10|)++)\n\n                                      if ((|a10|) != (|a1|) && (|a10|) != (|a2|) && (|a10|) != (|a3|) &&\n                                          (|a10|) != (|a4|) && (|a10|) != (|a5|) && (|a10|) != (|a6|) &&\n                                          (|a10|) != (|a7|) && (|a10|) != (|a8|) && (|a10|) != (|a9|))\n\n                                        if (((|a2|) * 100 + (|a3|) * 10 + (|a4|)) % 2 ==\n                                                0 &&\n                                            ((|a3|) * 100 + (|a4|) * 10 + (|a5|)) % 3 ==\n                                                0 &&\n                                            ((|a4|) * 100 + (|a5|) * 10 + (|a6|)) % 5 ==\n                                                0 &&\n                                            ((|a5|) * 100 + (|a6|) * 10 + (|a7|)) % 7 ==\n                                                0 &&\n                                            ((|a6|) * 100 + (|a7|) * 10 + (|a8|)) % 11 ==\n                                                0 &&\n                                            ((|a7|) * 100 + (|a8|) * 10 + (|a9|)) % 13 ==\n                                                0 &&\n                                            ((|a8|) * 100 + (|a9|) * 10 + (|a10|)) % 17 ==\n                                                0)\n                                          (|s|) += (|a1|) * 1000000000 +\n                                               (|a2|) * 100000000 + (|a3|) * 10000000 +\n                                               (|a4|) * 1000000 + (|a5|) * 100000 +\n                                               (|a6|) * 10000 + (|a7|) * 1000 +\n                                               (|a8|) * 100 + (|a9|) * 10 + (|a10|)", "unbound_vals": [["(|s|)", 0], ["(|a1|)", 0], ["(|a2|)", 0], ["(|a3|)", 0], ["(|a4|)", 0], ["(|a5|)", 0], ["(|a6|)", 0], ["(|a7|)", 0], ["(|a8|)", 0], ["(|a9|)", 0], ["(|a10|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 36) :EAX) (:CMP (- (:EBP) 12) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 36) :EAX) (:CMP (- (:EBP) 16) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 36) :EAX) (:CMP (- (:EBP) 20) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 36) :EAX) (:CMP (- (:EBP) 24) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 36) :EAX) (:CMP (- (:EBP) 28) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 36) :EAX) (:CMP (- (:EBP) 32) :EAX) (:JE :ADDR) (:MOVL 0 (- (:EBP) 40)) (:CMPL 10 (- (:EBP) 40)) (:JGE :ADDR) (:MOV (- (:EBP) 40) :EAX) (:CMP (- (:EBP) 12) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 40) :EAX) (:CMP (- (:EBP) 16) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 40) :EAX) (:CMP (- (:EBP) 20) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 40) :EAX) (:CMP (- (:EBP) 24) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 40) :EAX) (:CMP (- (:EBP) 28) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 40) :EAX) (:CMP (- (:EBP) 32) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 40) :EAX) (:CMP (- (:EBP) 36) :EAX) (:JE :ADDR) (:MOVL 0 (- (:EBP) 44)) (:CMPL 10 (- (:EBP) 44)) (:JGE :ADDR) (:MOV (- (:EBP) 44) :EAX) (:CMP (- (:EBP) 12) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 44) :EAX) (:CMP (- (:EBP) 16) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 44) :EAX) (:CMP (- (:EBP) 20) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 44) :EAX) (:CMP (- (:EBP) 24) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 44) :EAX) (:CMP (- (:EBP) 28) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 44) :EAX) (:CMP (- (:EBP) 32) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 44) :EAX) (:CMP (- (:EBP) 36) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 44) :EAX) (:CMP (- (:EBP) 40) :EAX) (:JE :ADDR) (:MOVL 0 (- (:EBP) 48)) (:CMPL 10 (- (:EBP) 48)) (:JGE :ADDR) (:MOV (- (:EBP) 48) :EAX) (:CMP (- (:EBP) 12) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 48) :EAX) (:CMP (- (:EBP) 16) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 48) :EAX) (:CMP (- (:EBP) 20) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 48) :EAX) (:CMP (- (:EBP) 24) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 48) :EAX) (:CMP (- (:EBP) 28) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 48) :EAX) (:CMP (- (:EBP) 32) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 48) :EAX) (:CMP (- (:EBP) 36) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 48) :EAX) (:CMP (- (:EBP) 40) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 48) :EAX) (:CMP (- (:EBP) 44) :EAX) (:JE :ADDR) (:MOV 2 :EAX) (:IMUL 100 (- (:EBP) 16) :ECX) (:IMUL 10 (- (:EBP) 20) :EDX) (:ADD :EDX :ECX) (:ADD (- (:EBP) 24) :ECX) (:MOV 2 (- (:EBP) 60)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 60) :ECX) (:IDIV :ECX) (:CMP 0 :EDX) (:JNE :ADDR) (:MOV 3 :EAX) (:IMUL 100 (- (:EBP) 20) :ECX) (:IMUL 10 (- (:EBP) 24) :EDX) (:ADD :EDX :ECX) (:ADD (- (:EBP) 28) :ECX) (:MOV 3 (- (:EBP) 64)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 64) :ECX) (:IDIV :ECX) (:CMP 0 :EDX) (:JNE :ADDR) (:MOV 5 :EAX) (:IMUL 100 (- (:EBP) 24) :ECX) (:IMUL 10 (- (:EBP) 28) :EDX) (:ADD :EDX :ECX) (:ADD (- (:EBP) 32) :ECX) (:MOV 5 (- (:EBP) 68)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 68) :ECX) (:IDIV :ECX) (:CMP 0 :EDX) (:JNE :ADDR) (:MOV 7 :EAX) (:IMUL 100 (- (:EBP) 28) :ECX) (:IMUL 10 (- (:EBP) 32) :EDX) (:ADD :EDX :ECX) (:ADD (- (:EBP) 36) :ECX) (:MOV 7 (- (:EBP) 72)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 72) :ECX) (:IDIV :ECX) (:CMP 0 :EDX) (:JNE :ADDR) (:MOV 11 :EAX) (:IMUL 100 (- (:EBP) 32) :ECX) (:IMUL 10 (- (:EBP) 36) :EDX) (:ADD :EDX :ECX) (:ADD (- (:EBP) 40) :ECX) (:MOV 11 (- (:EBP) 76)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 76) :ECX) (:IDIV :ECX) (:CMP 0 :EDX) (:JNE :ADDR) (:MOV 13 :EAX) (:IMUL 100 (- (:EBP) 36) :ECX) (:IMUL 10 (- (:EBP) 40) :EDX) (:ADD :EDX :ECX) (:ADD (- (:EBP) 44) :ECX) (:MOV 13 (- (:EBP) 80)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 80) :ECX) (:IDIV :ECX) (:CMP 0 :EDX) (:JNE :ADDR) (:MOV 17 :EAX) (:IMUL 100 (- (:EBP) 40) :ECX) (:IMUL 10 (- (:EBP) 44) :EDX) (:ADD :EDX :ECX) (:ADD (- (:EBP) 48) :ECX) (:MOV 17 (- (:EBP) 84)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 84) :ECX) (:IDIV :ECX) (:CMP 0 :EDX) (:JNE :ADDR) (:MOV (- (:EBP) 12) :EAX) (:IMUL 1000000000 :EAX :EAX) (:MOV (- (:EBP) 16) :ECX) (:IMUL 100000000 :ECX :ECX) (:ADD :ECX :EAX) (:MOV (- (:EBP) 20) :ECX) (:IMUL 10000000 :ECX :ECX) (:ADD :ECX :EAX) (:MOV (- (:EBP) 24) :ECX) (:IMUL 1000000 :ECX :ECX) (:ADD :ECX :EAX) (:MOV (- (:EBP) 28) :ECX) (:IMUL 100000 :ECX :ECX) (:ADD :ECX :EAX) (:MOV (- (:EBP) 32) :ECX) (:IMUL 10000 :ECX :ECX) (:ADD :ECX :EAX) (:MOV (- (:EBP) 36) :ECX) (:IMUL 1000 :ECX :ECX) (:ADD :ECX :EAX) (:MOV (- (:EBP) 40) :ECX) (:IMUL 100 :ECX :ECX) (:ADD :ECX :EAX) (:MOV (- (:EBP) 44) :ECX) (:LEA (:ECX) :ECX) (:LEA (:EAX) :EAX) (:MOV (- (:EBP) 48) :ECX) (:ADD :ECX :EAX) (:MOV :EAX :ECX) (:SAR 31 :ECX) (:MOV (- (:EBP) 56) :EDX) (:MOV (- (:EBP) 52) :ESI) (:ADD :EAX :EDX) (:ADC :ECX :ESI) (:MOV :EDX (- (:EBP) 56)) (:MOV :ESI (- (:EBP) 52)) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 48) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 48)) (:JMP :ADDR) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 44) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 44)) (:JMP :ADDR) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 40) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 40)) (:JMP :ADDR) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 36) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 36)) (:JMP :ADDR) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 32) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 32)) (:JMP :ADDR) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 28) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 28)) (:JMP :ADDR) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 24) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 24)) (:JMP :ADDR) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 20) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 20)) (:JMP :ADDR) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 16) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 16)) (:JMP :ADDR) (:JMP :ADDR))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -7074786232147302466, "ast_class": "DeclRefExpr", "random": 0.00011645743077515203, "src_text": "(|a60|)", "unbound_vals": [["(|a60|)", 78]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 4006890356961543636, "ast_class": "ParenExpr", "random": 0.00011969014567381198, "src_text": "((|sqrt|)(32000000 / (|m|) / ((|m|) + 1)) - 1)", "unbound_vals": [["(|m|)", 1]], "includes": null, "unbound_funs": [["(|sqrt|)", null, null, 1]], "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 8301044182350167649, "ast_class": "ImplicitCastExpr", "random": 0.00012828763363803564, "src_text": "(|nLetters|)", "unbound_vals": [["(|nLetters|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": null, "hash": -9116580480692843314, "ast_class": "ForStmt", "random": 0.00013003585433479792, "src_text": "for ((|j|) = 0; (|j|) < 50; ++(|j|)) {\n      Invert(&inv;, num);\n      mpz_add(num, num, inv);\n      Invert(&inv;, num);\n      if (mpz_cmp(inv, num) == 0) {\n        ok = 1;\n        break;\n      }\n    }", "unbound_vals": [["(|j|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -6687135799723410124, "ast_class": "BinaryOperator", "random": 0.00013622353239950424, "src_text": "(|n|) % (|k|) == 0", "unbound_vals": [["(|k|)", 1], ["(|n|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 7394226617823083419, "ast_class": "Var", "random": 0.0001436179434007867, "src_text": "int sum = (|sumx|) * (|sumy|)", "unbound_vals": [["(|sumx|)", 0], ["(|sumy|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [-5849325953548989793], "is_decl": true},
{"full_stmt": false, "binary_contents": "83 7d f0 00 0f 84 86 00 00 00 31 c0 2b 45 f8 99 f7 7d f0 f2 0f 2a c0 89 e0 f2 0f 11 00 e8 8a fd ff ff dd 5d c0 f2 0f 10 45 c0 f2 0f 5a c0 f3 0f 11 45 d8 f3 0f 10 4d dc 0f 2e c8 0f 86 0a 00 00 00 f3 0f 10 45 d8 f3 0f 11 45 dc b8 32 00 00 00 2b 45 f8 99 f7 7d f0 f2 0f 2a c0 89 e0 f2 0f 11 00 e8 16 fd ff ff dd 5d b8 f2 0f 10 45 b8 f2 0f 5a c0 f3 0f 11 45 d8 0f 2e 45 e0 0f 86 0a 00 00 00 f3 0f 10 45 d8 f3 0f 11 45 e0 e9 00 00 00 00", "hash": 617929681474337217, "ast_class": "CompoundStmt", "random": 0.000159436705218563, "src_text": "{\n        if (((|t|) = (|ceil|)(-(|p1|) / (|v1|))) < (|u|))\n          (|u|) = (|t|);\n        if (((|t|) = (|floor|)((N - (|p1|)) / (|v1|))) > (|l|))\n          (|l|) = (|t|);\n      }", "unbound_vals": [["(|l|)", 3], ["(|u|)", 3], ["(|p1|)", 3], ["(|v1|)", 3], ["(|t|)", 3]], "includes": null, "unbound_funs": [["(|ceil|)", null, null, 1], ["(|floor|)", null, null, 1]], "macros": [["N", "N 50"]], "disasm": "((:CMPL 0 (- (:EBP) 16)) (:JE :ADDR) (:XOR :EAX :EAX) (:SUB (- (:EBP) 8) :EAX) (:CLTD) (:IDIVL (- (:EBP) 16)) (:CVTSI2SD :EAX :XMM0) (:MOV :ESP :EAX) (:MOVSD :XMM0 (:EAX)) (:CALL :__LIBC_START_MAIN) (:FSTPL (- (:EBP) 64)) (:MOVSD (- (:EBP) 64) :XMM0) (:CVTSD2SS :XMM0 :XMM0) (:MOVSS :XMM0 (- (:EBP) 40)) (:MOVSS (- (:EBP) 36) :XMM1) (:UCOMISS :XMM0 :XMM1) (:JBE :ADDR) (:MOVSS (- (:EBP) 40) :XMM0) (:MOVSS :XMM0 (- (:EBP) 36)) (:MOV 50 :EAX) (:SUB (- (:EBP) 8) :EAX) (:CLTD) (:IDIVL (- (:EBP) 16)) (:CVTSI2SD :EAX :XMM0) (:MOV :ESP :EAX) (:MOVSD :XMM0 (:EAX)) (:CALL :PRINTF) (:FSTPL (- (:EBP) 72)) (:MOVSD (- (:EBP) 72) :XMM0) (:CVTSD2SS :XMM0 :XMM0) (:MOVSS :XMM0 (- (:EBP) 40)) (:UCOMISS (- (:EBP) 32) :XMM0) (:JBE :ADDR) (:MOVSS (- (:EBP) 40) :XMM0) (:MOVSS :XMM0 (- (:EBP) 32)) (:JMP :ADDR))", "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "8b 45 f0 83 c4 38 5d c3 0f 1f 80 00 00 00 00", "hash": -5792434554127717467, "ast_class": "ReturnStmt", "random": 0.00016117225841372207, "src_text": "return (|res|)", "unbound_vals": [["(|res|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 16) :EAX) (:ADD 56 :ESP) (:POP :EBP) (:RET) (:NOPL (+ (:EAX) 0)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 3620353940360555849, "ast_class": "BinaryOperator", "random": 0.00017053435920055815, "src_text": "(|a0|) +\n                                                                                                                              (|a1|) +\n                                                                                                                              (|a2|) +\n                                                                                                                              (|a3|) +\n                                                                                                                              (|a4|) +\n                                                                                                                              (|a5|) +\n                                                                                                                              (|a6|) +\n                                                                                                                              (|a7|) +\n                                                                                                                              (|a8|) +\n                                                                                                                              (|a9|) + (|a10|)", "unbound_vals": [["(|a0|)", 57], ["(|a1|)", 57], ["(|a2|)", 57], ["(|a3|)", 57], ["(|a4|)", 57], ["(|a5|)", 57], ["(|a6|)", 57], ["(|a7|)", 57], ["(|a8|)", 57], ["(|a9|)", 57], ["(|a10|)", 57]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -3730167887904227192, "ast_class": "BinaryOperator", "random": 0.00018120422545919723, "src_text": "(|bitMap|) == (|digitsToBitmap|)(3 * (|answer|)) &&\n        (|bitMap|) == (|digitsToBitmap|)(4 * (|answer|)) &&\n        (|bitMap|) == (|digitsToBitmap|)(5 * (|answer|))", "unbound_vals": [["(|answer|)", 1], ["(|bitMap|)", 1]], "includes": [], "unbound_funs": [["(|digitsToBitmap|)", false, false, 1]], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -6950552769731997526, "ast_class": "ImplicitCastExpr", "random": 0.00018867633895125469, "src_text": "(|area_a|)", "unbound_vals": [["(|area_a|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -4807993413401556812, "ast_class": "ImplicitCastExpr", "random": 0.0001900131803620475, "src_text": "(|limit|) + 1", "unbound_vals": [["(|limit|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 5238192493657806294, "ast_class": "ArraySubscriptExpr", "random": 0.00019435020469171782, "src_text": "(|numbers|)[(|i|)]", "unbound_vals": [["(|numbers|)", 3], ["(|i|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 3065995196976008041, "ast_class": "BinaryOperator", "random": 0.00021800710255404088, "src_text": "(|a87|) < (|a88|) &&\n                                                                                                                                                                                            (|a87|)", "unbound_vals": [["(|a87|)", 89], ["(|a88|)", 89]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -271845306554318687, "ast_class": "ImplicitCastExpr", "random": 0.0002341340425204841, "src_text": "(|fl|)", "unbound_vals": [["(|fl|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -1016782824524373204, "ast_class": "ImplicitCastExpr", "random": 0.00024672219549481955, "src_text": "(|rs|)", "unbound_vals": [["(|rs|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": null, "hash": -8079206082117220797, "ast_class": "BinaryOperator", "random": 0.00028409175899324346, "src_text": "(|m|) = (|m|) / 2", "unbound_vals": [["(|m|)", 3]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 615350264123789973, "ast_class": "CallExpr", "random": 0.0003443095422961395, "src_text": "(|find|)()", "unbound_vals": null, "includes": null, "unbound_funs": [["(|find|)", null, null, 0]], "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 3887301590369961591, "ast_class": "BinaryOperator", "random": 0.0003460390079235154, "src_text": "(|a0|) +\n                                                                                                                                                                                    (|a1|) +\n                                                                                                                                                                                    (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) +\n                                                                                                                                                                                    (|a17|) +\n                                                                                                                                                                                    (|a18|) +\n                                                                                                                                                                                    (|a19|) +\n                                                                                                                                                                                    (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|)", "unbound_vals": [["(|a0|)", 82], ["(|a1|)", 82], ["(|a2|)", 82], ["(|a3|)", 82], ["(|a4|)", 82], ["(|a5|)", 82], ["(|a6|)", 82], ["(|a7|)", 82], ["(|a8|)", 82], ["(|a9|)", 82], ["(|a10|)", 82], ["(|a11|)", 82], ["(|a12|)", 82], ["(|a13|)", 82], ["(|a14|)", 82], ["(|a15|)", 82], ["(|a16|)", 82], ["(|a17|)", 82], ["(|a18|)", 82], ["(|a19|)", 82], ["(|a20|)", 82], ["(|a21|)", 82], ["(|a22|)", 82], ["(|a23|)", 82], ["(|a24|)", 82], ["(|a25|)", 82]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 1324411829904997847, "ast_class": "BinaryOperator", "random": 0.00036373111541254666, "src_text": "((|rem|) *= 10) < (|i|)", "unbound_vals": [["(|i|)", 2], ["(|rem|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "81 7d f8 40 42 0f 00 0f 8d 0d 00 00 00 8b 45 f4 8b 4d f8 89 04 8d 24 a0 04 08", "hash": 7057494587086379148, "ast_class": "IfStmt", "random": 0.00037886495178762747, "src_text": "if ((|n|) < CACHE_SIZE)\n    (|chainlength|)[(|n|)] = (|l|)", "unbound_vals": [["(|chainlength|)", 2], ["(|n|)", 1], ["(|l|)", 0]], "includes": null, "unbound_funs": null, "macros": [["CACHE_SIZE", "CACHE_SIZE 1000000"]], "disasm": "((:CMPL 1000000 (- (:EBP) 8)) (:JGE :ADDR) (:MOV (- (:EBP) 12) :EAX) (:MOV (- (:EBP) 8) :ECX) (:MOV :EAX (+ (:ECX) 134520868)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -6419953450634271824, "ast_class": "BinaryOperator", "random": 0.00037971056199603836, "src_text": "(|s|) + (|i|)", "unbound_vals": [["(|s|)", 2], ["(|i|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": null, "hash": 3264859512725189546, "ast_class": "IfStmt", "random": 0.00037972961418186735, "src_text": "if ((|i|) % 2 != 0)\n      if ((|i|) % 5 != 0)\n        if ((|cycle|)((|i|)) > 1000000) {\n          (|flagg|) = 1;\n       printf(\\\"%ld\\\\n\\\",i);\n        }\n    i++;\n    if (i % 100000 == 0)\n     printf(\\\"%ld\\\\n\\\",i);\n  }\n  end = clock();\n  (|elapsed|) = ((double)(|end|) - (|start|)) / CLOCKS_PER_SEC;\n  printf(\\\"%lf\\\\n\\\",elapsed);          \n  system(\\\"PAUSE\\\");\n}", "unbound_vals": [["(|flagg|)", 3], ["(|i|)", 3], ["(|elapsed|)", 3], ["(|start|)", 3], ["(|end|)", 3]], "includes": ["<time.h>"], "unbound_funs": [["(|cycle|)", false, false, 1]], "macros": [], "disasm": null, "types": [-4605258830889951363], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -1757690214408080864, "ast_class": "CallExpr", "random": 0.00037988688865242537, "src_text": "fgetc((|numfiler|))", "unbound_vals": [["(|numfiler|)", 0]], "includes": ["<stdio.h>"], "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -1697768438652076235, "ast_class": "UnaryOperator", "random": 0.0004666250543825523, "src_text": "-(|b|)", "unbound_vals": [["(|b|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -1102865146701968778, "ast_class": "ImplicitCastExpr", "random": 0.0004757669758365113, "src_text": "521481", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 107596157282166804, "ast_class": "ImplicitCastExpr", "random": 0.0004826372759159092, "src_text": "(|a20|)", "unbound_vals": [["(|a20|)", 80]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 5007136967289037496, "ast_class": "Var", "random": 0.0005114119739695333, "src_text": "long long unsigned n[] = {0, 0, 0, 0, 0, 0, 0, 0, 0, 0}", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [735379148409540298], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": 1466625845902952475, "ast_class": "UnaryExprOrTypeTraitExpr", "random": 0.0005274196514464258, "src_text": "sizeof(\"sixty\")", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 8481525371918769875, "ast_class": "ImplicitCastExpr", "random": 0.000536438748521828, "src_text": "(|a26|)", "unbound_vals": [["(|a26|)", 73]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "8b 45 fc 3b 45 f8 0f 8e 10 00 00 00 8b 45 f8 8b 4d fc 29 c1 89 4d fc e9 0b 00 00 00 8b 45 fc 8b 4d f8 29 c1 89 4d f8", "hash": -2603212361325286091, "ast_class": "IfStmt", "random": 0.0005485263861677581, "src_text": "if ((|a|) > (|b|))\n      (|a|) -= (|b|);\n    else\n      (|b|) -= (|a|)", "unbound_vals": [["(|a|)", 2], ["(|b|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 4) :EAX) (:CMP (- (:EBP) 8) :EAX) (:JLE :ADDR) (:MOV (- (:EBP) 8) :EAX) (:MOV (- (:EBP) 4) :ECX) (:SUB :EAX :ECX) (:MOV :ECX (- (:EBP) 4)) (:JMP :ADDR) (:MOV (- (:EBP) 4) :EAX) (:MOV (- (:EBP) 8) :ECX) (:SUB :EAX :ECX) (:MOV :ECX (- (:EBP) 8)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -2345169487600169173, "ast_class": "BinaryOperator", "random": 0.0005571288210732828, "src_text": "(|a|) = -((|b|) / 2) * 2 + 1", "unbound_vals": [["(|a|)", 1], ["(|b|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "8b 85 c4 fc ff ff 8d 04 c5 01 00 00 00 89 e1 89 41 08 8d 85 60 fe ff ff 89 01 c7 41 04 00 00 00 00 e8 72 fc ff ff", "hash": 3679717648103093126, "ast_class": "CallExpr", "random": 0.0005607706100847487, "src_text": "memset((|row|), 0, sizeof(unsigned long long) * (|i|) + 1)", "unbound_vals": [["(|i|)", 1], ["(|row|)", 1]], "includes": ["<string.h>"], "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 828) :EAX) (:LEA (+ (:EAX) 1) :EAX) (:MOV :ESP :ECX) (:MOV :EAX (+ (:ECX) 8)) (:LEA (- (:EBP) 416) :EAX) (:MOV :EAX (:ECX)) (:MOVL 0 (+ (:ECX) 4)) (:CALL :__LIBC_START_MAIN))", "types": [3456822550903822590], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -7121405637074554928, "ast_class": "IntegerLiteral", "random": 0.0005715692683052609, "src_text": "445", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": "c7 45 f8 00 00 00 00 81 7d f8 e8 03 00 00 0f 8d 2c 00 00 00 8b 45 f8 0f be 84 05 04 fc ff ff 89 45 f0 8b 45 f0 83 e8 30 8b 4d f8 89 84 8d 64 ec ff ff 8b 45 f8 83 c0 01 89 45 f8 e9 c7 ff ff ff", "hash": -8890296221586554785, "ast_class": "CompoundStmt", "random": 0.0005786388659353436, "src_text": "{\n    (|temp|) = (|c|)[(|i|)];\n    (|num|)[(|i|)] = ((|temp|) - '0');\n  }", "unbound_vals": [["(|i|)", 1], ["(|temp|)", 1], ["(|c|)", 1], ["(|num|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOVL 0 (- (:EBP) 8)) (:CMPL 1000 (- (:EBP) 8)) (:JGE :ADDR) (:MOV (- (:EBP) 8) :EAX) (:MOVSBL (- (:EBP) 1020) :EAX) (:MOV :EAX (- (:EBP) 16)) (:MOV (- (:EBP) 16) :EAX) (:SUB 48 :EAX) (:MOV (- (:EBP) 8) :ECX) (:MOV :EAX (- (:EBP) 5020)) (:MOV (- (:EBP) 8) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 8)) (:JMP :ADDR))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -9024242209850872151, "ast_class": "Var", "random": 0.0005897761544222391, "src_text": "long n = 0", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [-6857659793473511817], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": -4433314051155221088, "ast_class": "ArraySubscriptExpr", "random": 0.0005995891730214975, "src_text": "(|coins|)[6]", "unbound_vals": [["(|coins|)", 3]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": "8b 4d f0 8b 55 f4 8b 75 f8 8b 14 96 89 14 24 c7 44 24 04 05 00 00 00 89 45 e8 89 4d e4 e8 2b 00 00 00 8b 4d e4 01 c1 89 4d f0", "hash": 4047846400837364589, "ast_class": "BinaryOperator", "random": 0.0006159240054679493, "src_text": "(|sum|) = (|sum|) + (|power|)((|array|)[(|i|)], 5)", "unbound_vals": [["(|array|)", 1], ["(|i|)", 0], ["(|sum|)", 0]], "includes": null, "unbound_funs": [["(|power|)", null, null, 2]], "macros": null, "disasm": "((:MOV (- (:EBP) 16) :ECX) (:MOV (- (:EBP) 12) :EDX) (:MOV (- (:EBP) 8) :ESI) (:MOV (:ESI) :EDX) (:MOV :EDX (:ESP)) (:MOVL 5 (+ (:ESP) 4)) (:MOV 5 (- (:EBP) 24)) (:MOV :ECX (- (:EBP) 28)) (:CALL :POWER) (:MOV (- (:EBP) 28) :ECX) (:ADD 5 :ECX) (:MOV :ECX (- (:EBP) 16)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -2524465532467197132, "ast_class": "BinaryOperator", "random": 0.0006166913082348291, "src_text": "50 * 50 * 3", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 7858935161625203550, "ast_class": "ImplicitCastExpr", "random": 0.0006318594893115481, "src_text": "-411", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "c7 45 ec 00 00 00 00 c7 45 e8 00 00 00 00", "hash": -2865064837983905514, "ast_class": "DeclStmt", "random": 0.0006342520508839655, "src_text": "unsigned long long y = 0", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOVL 0 (- (:EBP) 20)) (:MOVL 0 (- (:EBP) 24)))", "types": [3456822550903822590], "is_decl": null},
{"full_stmt": true, "binary_contents": null, "hash": -6697842332476938997, "ast_class": "DeclStmt", "random": 0.0006491937672413739, "src_text": "int r", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [-5849325953548989793], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 7592573212291841757, "ast_class": "ImplicitCastExpr", "random": 0.0006655341708260432, "src_text": "(|hm|)", "unbound_vals": [["(|hm|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "c7 45 d0 00 00 00 00", "hash": 2524874165065369385, "ast_class": "DeclStmt", "random": 0.0006663234246060412, "src_text": "int result = 0", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOVL 0 (- (:EBP) 48)))", "types": [-5849325953548989793], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 8915889641013525133, "ast_class": "ImplicitCastExpr", "random": 0.0006715468854892048, "src_text": "(|matches|)", "unbound_vals": [["(|matches|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 4099365769475401328, "ast_class": "BinaryOperator", "random": 0.0006727291364235777, "src_text": "12 * (|a|)", "unbound_vals": [["(|a|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 7723985252203584629, "ast_class": "BinaryOperator", "random": 0.0007168651566119566, "src_text": "(|a0|) +\n                                                                                                                                                                                    (|a1|) +\n                                                                                                                                                                                    (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) +\n                                                                                                                                                                                    (|a17|) +\n                                                                                                                                                                                    (|a18|) +\n                                                                                                                                                                                    (|a19|) +\n                                                                                                                                                                                    (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|) + (|a61|) + (|a62|) + (|a63|) + (|a64|)", "unbound_vals": [["(|a0|)", 83], ["(|a1|)", 83], ["(|a2|)", 83], ["(|a3|)", 83], ["(|a4|)", 83], ["(|a5|)", 83], ["(|a6|)", 83], ["(|a7|)", 83], ["(|a8|)", 83], ["(|a9|)", 83], ["(|a10|)", 83], ["(|a11|)", 83], ["(|a12|)", 83], ["(|a13|)", 83], ["(|a14|)", 83], ["(|a15|)", 83], ["(|a16|)", 83], ["(|a17|)", 83], ["(|a18|)", 83], ["(|a19|)", 83], ["(|a20|)", 83], ["(|a21|)", 83], ["(|a22|)", 83], ["(|a23|)", 83], ["(|a24|)", 83], ["(|a25|)", 83], ["(|a26|)", 83], ["(|a27|)", 83], ["(|a28|)", 83], ["(|a29|)", 83], ["(|a30|)", 83], ["(|a31|)", 83], ["(|a32|)", 83], ["(|a33|)", 83], ["(|a34|)", 83], ["(|a35|)", 83], ["(|a36|)", 83], ["(|a37|)", 83], ["(|a38|)", 83], ["(|a39|)", 83], ["(|a40|)", 83], ["(|a41|)", 83], ["(|a42|)", 83], ["(|a43|)", 83], ["(|a44|)", 83], ["(|a45|)", 83], ["(|a46|)", 83], ["(|a47|)", 83], ["(|a48|)", 83], ["(|a49|)", 83], ["(|a50|)", 83], ["(|a51|)", 83], ["(|a52|)", 83], ["(|a53|)", 83], ["(|a54|)", 83], ["(|a55|)", 83], ["(|a56|)", 83], ["(|a57|)", 83], ["(|a58|)", 83], ["(|a59|)", 83], ["(|a60|)", 83], ["(|a61|)", 83], ["(|a62|)", 83], ["(|a63|)", 83], ["(|a64|)", 83]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 8302430442741578558, "ast_class": "ImplicitCastExpr", "random": 0.0007279019041649404, "src_text": "529193", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -5796581857200527679, "ast_class": "UnaryOperator", "random": 0.0007549732959801769, "src_text": "-371", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -2624443085162463302, "ast_class": "DeclRefExpr", "random": 0.0007800859689006678, "src_text": "(|a3|)", "unbound_vals": [["(|a3|)", 68]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "8b 45 e0 89 45 f8", "hash": 6511196912477176814, "ast_class": "BinaryOperator", "random": 0.0007821952919776498, "src_text": "(|best|) = (|toTry|)", "unbound_vals": [["(|best|)", 3], ["(|toTry|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 32) :EAX) (:MOV :EAX (- (:EBP) 8)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 5857959935444050539, "ast_class": "DeclRefExpr", "random": 0.0008172756759465827, "src_text": "(|a76|)", "unbound_vals": [["(|a76|)", 94]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 5427602310377849232, "ast_class": "IntegerLiteral", "random": 0.0008183255104308174, "src_text": "3083", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 1578322055700430976, "ast_class": "ImplicitCastExpr", "random": 0.0008200519741028423, "src_text": "510730", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 2086182503628410606, "ast_class": "InitListExpr", "random": 0.000822798392921098, "src_text": "{-660, -650, 340, 188, 569, 526}", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -2655993833276780125, "ast_class": "DeclRefExpr", "random": 0.0008234921764788128, "src_text": "(|a38|)", "unbound_vals": [["(|a38|)", 84]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -6413711752063840483, "ast_class": "BinaryOperator", "random": 0.0008427761398756006, "src_text": "(|i2|) != (|j2|)", "unbound_vals": [["(|i2|)", 0], ["(|j2|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 4745777980857697127, "ast_class": "ImplicitCastExpr", "random": 0.0008496163015097036, "src_text": "(|set|)", "unbound_vals": [["(|set|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -6528533104809763863, "ast_class": "DeclRefExpr", "random": 0.0008654256948493755, "src_text": "(|run|)", "unbound_vals": null, "includes": null, "unbound_funs": [["(|run|)", null, null, 1]], "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "c7 45 e8 00 00 00 00 83 7d e8 04 0f 8d 2a 00 00 00 8d 05 a0 88 04 08 8b 4d e8 8b 4c 8d ec 89 04 24 89 4c 24 04 e8 d6 fd ff ff 89 45 e0 8b 45 e8 83 c0 01 89 45 e8 e9 cc ff ff ff", "hash": 8468539268080237117, "ast_class": "ForStmt", "random": 0.0008986428523609646, "src_text": "for ((|i|) = 0; (|i|) < 4; (|i|)++)\n    printf(\"%d \", (|num|)[(|i|)])", "unbound_vals": [["(|num|)", 0], ["(|i|)", 0]], "includes": ["<stdio.h>"], "unbound_funs": null, "macros": null, "disasm": "((:MOVL 0 (- (:EBP) 24)) (:CMPL 4 (- (:EBP) 24)) (:JGE :ADDR) (:LEA \"%d \" :EAX) (:MOV (- (:EBP) 24) :ECX) (:MOV (- (:EBP) 20) :ECX) (:MOV \"%d \" (:ESP)) (:MOV :ECX (+ (:ESP) 4)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:MOV \"%d \" (- (:EBP) 32)) (:MOV (- (:EBP) 24) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 24)) (:JMP :ADDR))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -379630920891128427, "ast_class": "DeclRefExpr", "random": 0.0009054660670732018, "src_text": "(|a0|)", "unbound_vals": [["(|a0|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "55 89 e5 81 ec 08 09 00 00 c7 45 fc 00 00 00 00 c7 85 18 f7 ff ff 03 00 00 00 c7 85 20 f7 ff ff 00 00 00 00 c7 85 24 f7 ff ff 01 00 00 00 c7 85 28 f7 ff ff 01 00 00 00 c7 85 2c f7 ff ff 01 00 00 00 c7 85 14 f7 ff ff 05 00 00 00 81 bd 14 f7 ff ff 38 02 00 00 0f 8d a2 00 00 00 8b 85 14 f7 ff ff 89 04 24 e8 16 ff ff ff 89 85 10 f7 ff ff 8b 85 10 f7 ff ff 3b 85 14 f7 ff ff 0f 8e 19 00 00 00 8b 85 10 f7 ff ff 89 04 24 e8 f0 fe ff ff 89 85 10 f7 ff ff e9 d5 ff ff ff 8b 85 10 f7 ff ff 83 bc 85 1c f7 ff ff 00 0f 84 25 00 00 00 8b 85 14 f7 ff ff c7 84 85 1c f7 ff ff 01 00 00 00 8b 85 18 f7 ff ff 83 c0 01 89 85 18 f7 ff ff e9 11 00 00 00 8b 85 14 f7 ff ff c7 84 85 1c f7 ff ff 00 00 00 00 e9 00 00 00 00 8b 85 14 f7 ff ff 83 c0 01 89 85 14 f7 ff ff e9 4e ff ff ff c7 85 14 f7 ff ff 38 02 00 00 81 bd 14 f7 ff ff 80 96 98 00 0f 8d 44 00 00 00 8b 85 14 f7 ff ff 89 04 24 e8 5a fe ff ff 83 bc 85 1c f7 ff ff 00 0f 84 0f 00 00 00 8b 85 18 f7 ff ff 83 c0 01 89 85 18 f7 ff ff e9 00 00 00 00 8b 85 14 f7 ff ff 83 c0 01 89 85 14 f7 ff ff e9 ac ff ff ff 8d 05 73 87 04 08 8b 8d 18 f7 ff ff 89 04 24 89 4c 24 04 e8 cc fc ff ff 31 c9 89 85 0c f7 ff ff 89 c8 81 c4 08 09 00 00 5d c3", "hash": 4957643342936936037, "ast_class": "CompoundStmt", "random": 0.0009087186032677996, "src_text": "{\n  // max sum is 7*81 = 567\n  int terminal[568];\n  int count = 3;\n  int i;\n  terminal[1] = 0;\n  terminal[2] = 1;\n  terminal[3] = 1;\n  terminal[4] = 1;\n  for (i = 5; i < 568; i++) {\n    int ss = (|squareSum|)(i);\n    while (ss > i)\n      ss = (|squareSum|)(ss);\n    if (terminal[ss]) {\n      terminal[i] = 1;\n      count++;\n    } else\n      terminal[i] = 0;\n  }\n  for (i = 568; i < 10000000; i++)\n    if (terminal[(|squareSum|)(i)])\n      count++;\n  printf(\"%d\\n\", count);\n  return 0;\n}", "unbound_vals": null, "includes": ["<stdio.h>"], "unbound_funs": [["(|squareSum|)", null, null, 1]], "macros": null, "disasm": "((:PUSH :EBP) (:MOV :ESP :EBP) (:SUB 2312 :ESP) (:MOVL 0 (- (:EBP) 4)) (:MOVL 3 (- (:EBP) 2280)) (:MOVL 0 (- (:EBP) 2272)) (:MOVL 1 (- (:EBP) 2268)) (:MOVL 1 (- (:EBP) 2264)) (:MOVL 1 (- (:EBP) 2260)) (:MOVL 5 (- (:EBP) 2284)) (:CMPL 568 (- (:EBP) 2284)) (:JGE :ADDR) (:MOV (- (:EBP) 2284) :EAX) (:MOV :EAX (:ESP)) (:CALL :SQUARESUM) (:MOV :EAX (- (:EBP) 2288)) (:MOV (- (:EBP) 2288) :EAX) (:CMP (- (:EBP) 2284) :EAX) (:JLE :ADDR) (:MOV (- (:EBP) 2288) :EAX) (:MOV :EAX (:ESP)) (:CALL :SQUARESUM) (:MOV :EAX (- (:EBP) 2288)) (:JMP :ADDR) (:MOV (- (:EBP) 2288) :EAX) (:CMPL 0 (- (:EBP) 2276)) (:JE :ADDR) (:MOV (- (:EBP) 2284) :EAX) (:MOVL 1 (- (:EBP) 2276)) (:MOV (- (:EBP) 2280) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 2280)) (:JMP :ADDR) (:MOV (- (:EBP) 2284) :EAX) (:MOVL 0 (- (:EBP) 2276)) (:JMP :ADDR) (:MOV (- (:EBP) 2284) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 2284)) (:JMP :ADDR) (:MOVL 568 (- (:EBP) 2284)) (:CMPL 10000000 (- (:EBP) 2284)) (:JGE :ADDR) (:MOV (- (:EBP) 2284) :EAX) (:MOV :EAX (:ESP)) (:CALL :SQUARESUM) (:CMPL 0 (- (:EBP) 2276)) (:JE :ADDR) (:MOV (- (:EBP) 2280) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 2280)) (:JMP :ADDR) (:MOV (- (:EBP) 2284) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 2284)) (:JMP :ADDR) (:LEA \"%d\n\" :EAX) (:MOV (- (:EBP) 2280) :ECX) (:MOV \"%d\n\" (:ESP)) (:MOV :ECX (+ (:ESP) 4)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:XOR :ECX :ECX) (:MOV \"%d\n\" (- (:EBP) 2292)) (:MOV :ECX :EAX) (:ADD 2312 :ESP) (:POP :EBP) (:RET))", "types": [7945934781761998363, -5849325953548989793], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -2727023918013948211, "ast_class": "BinaryOperator", "random": 0.0009096151267437014, "src_text": "(|b|) <= 'z'", "unbound_vals": [["(|b|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -8204463518110384717, "ast_class": "BinaryOperator", "random": 0.0009170127925097749, "src_text": "(|n|) < 0xffffffff", "unbound_vals": [["(|n|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 8143416885526337566, "ast_class": "StringLiteral", "random": 0.0009275236407116916, "src_text": "\"File has been found!\\n\"", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -6175586506804903944, "ast_class": "ImplicitCastExpr", "random": 0.0009365457775221131, "src_text": "401528", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -9097869097367529101, "ast_class": "UnaryOperator", "random": 0.0009461169947851955, "src_text": "-8", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 9098721769168872653, "ast_class": "BinaryOperator", "random": 0.0009921761128295348, "src_text": "(|a96|) < (|a97|) &&\n                                                                                                                                                                                                              (|a96|)", "unbound_vals": [["(|a96|)", 98], ["(|a97|)", 98]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 7335067617204689675, "ast_class": "ArraySubscriptExpr", "random": 0.0010245206063252965, "src_text": "(|arr|)[(|i|) + 1][(|j|)]", "unbound_vals": [["(|arr|)", 2], ["(|i|)", 2], ["(|j|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -7234137806381326579, "ast_class": "BinaryOperator", "random": 0.00103373045679378, "src_text": "(|a0|) +\n                                                                                                                                                                (|a1|) +\n                                                                                                                                                                (|a2|) +\n                                                                                                                                                                (|a3|) +\n                                                                                                                                                                (|a4|) +\n                                                                                                                                                                (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|)", "unbound_vals": [["(|a0|)", 72], ["(|a1|)", 72], ["(|a2|)", 72], ["(|a3|)", 72], ["(|a4|)", 72], ["(|a5|)", 72], ["(|a6|)", 72], ["(|a7|)", 72], ["(|a8|)", 72], ["(|a9|)", 72], ["(|a10|)", 72], ["(|a11|)", 72], ["(|a12|)", 72], ["(|a13|)", 72], ["(|a14|)", 72], ["(|a15|)", 72], ["(|a16|)", 72]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 5217435450398639726, "ast_class": "IntegerLiteral", "random": 0.0010352750978565028, "src_text": "limit", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": [["limit", "limit 10000000"]], "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 9052349447953654056, "ast_class": "DeclRefExpr", "random": 0.001046825317909783, "src_text": "(|q2|)", "unbound_vals": [["(|q2|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -2501803462631859581, "ast_class": "ImplicitCastExpr", "random": 0.0010515186342294758, "src_text": "(|a21|)", "unbound_vals": [["(|a21|)", 94]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -5968230423149499245, "ast_class": "ParmVar", "random": 0.0010515327114530848, "src_text": "__u32 c", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [5956231200228014569], "is_decl": true},
{"full_stmt": true, "binary_contents": "55 89 e5 56 83 ec 54 c7 45 f8 00 00 00 00 c7 45 f4 00 00 00 00 c7 45 e8 00 00 00 00 e8 3f ff ff ff c7 45 f0 03 00 00 00 81 7d f0 a0 86 01 00 0f 8f c5 01 00 00 8b 45 f0 83 3c 85 28 a0 04 08 00 0f 85 44 01 00 00 c7 45 e8 00 00 00 00 c7 45 ec 01 00 00 00 81 7d ec 00 ca 9a 3b 0f 8d 30 00 00 00 6b 45 e8 0a 83 c0 01 99 f7 7d f0 89 55 e8 83 7d e8 00 0f 85 05 00 00 00 e9 13 00 00 00 e9 00 00 00 00 8b 45 ec 83 c0 01 89 45 ec e9 c3 ff ff ff e9 00 00 00 00 31 c0 88 c1 b8 05 00 00 00 8b 55 ec 89 45 e4 89 d0 99 8b 75 e4 f7 fe 83 fa 00 88 4d e3 0f 85 0a 00 00 00 83 7d ec 00 0f 95 c0 88 45 e3 8a 45 e3 a8 01 0f 85 05 00 00 00 e9 1b 00 00 00 b8 05 00 00 00 8b 4d ec 89 45 dc 89 c8 99 8b 4d dc f7 f9 89 45 ec e9 a8 ff ff ff e9 00 00 00 00 31 c0 88 c1 b8 02 00 00 00 8b 55 ec 89 45 d8 89 d0 99 8b 75 d8 f7 fe 83 fa 00 88 4d d7 0f 85 0a 00 00 00 83 7d ec 00 0f 95 c0 88 45 d7 8a 45 d7 a8 01 0f 85 05 00 00 00 e9 1b 00 00 00 b8 02 00 00 00 8b 4d ec 89 45 d0 89 c8 99 8b 4d d0 f7 f9 89 45 ec e9 a8 ff ff ff 83 7d ec 01 0f 84 0a 00 00 00 83 7d ec 00 0f 85 26 00 00 00 8d 05 80 88 04 08 8b 4d f0 89 04 24 89 4c 24 04 e8 ac fc ff ff 8b 4d f0 c7 04 8d 28 a0 04 08 01 00 00 00 89 45 cc e9 00 00 00 00 b8 0a 00 00 00 8b 4d f0 89 45 c8 89 c8 99 8b 4d c8 f7 f9 83 fa 01 0f 84 38 00 00 00 b8 0a 00 00 00 8b 4d f0 89 45 c4 89 c8 99 8b 4d c4 f7 f9 83 fa 07 0f 84 1c 00 00 00 b8 0a 00 00 00 8b 4d f0 89 45 c0 89 c8 99 8b 4d c0 f7 f9 83 fa 09 0f 85 0e 00 00 00 8b 45 f0 83 c0 02 89 45 f0 e9 09 00 00 00 8b 45 f0 83 c0 04 89 45 f0 e9 2e fe ff ff c7 45 f0 02 00 00 00 81 7d f0 a0 86 01 00 0f 8d 2d 00 00 00 8b 45 f0 83 3c 85 28 a0 04 08 00 0f 85 09 00 00 00 8b 45 f0 03 45 f4 89 45 f4 e9 00 00 00 00 8b 45 f0 83 c0 01 89 45 f0 e9 c6 ff ff ff 8d 05 85 88 04 08 8b 4d f4 89 04 24 89 4c 24 04 e8 d0 fb ff ff 89 45 bc e8 d8 fb ff ff 31 c9 89 45 b8 89 c8 83 c4 54 5e 5d c3", "hash": 1545950084724820564, "ast_class": "CompoundStmt", "random": 0.0010647980807354518, "src_text": "{\n  long s = 0;\n  long n, k, r = 0;\n  (|prime|)();\n  for (n = 3; n <= M;) {\n    if ((|p|)[n] == 0) {\n      r = 0;\n      for (k = 1; k < N; k++) {\n        r = (r * 10 + 1) % n;\n        if (r == 0)\n          break;\n      }\n      for (; k % 5 == 0 && k != 0;)\n        k /= 5;\n\n      for (; k % 2 == 0 && k != 0;)\n        k /= 2;\n\n      if (k == 1 || k == 0) {\n        printf(\"\\n%ld\", n);\n        (|p|)[n] = 1;\n      }\n    }\n\n    if (n % 10 == 1 || n % 10 == 7 || n % 10 == 9)\n      n += 2;\n    else\n      n += 4;\n  }\n  for (n = 2; n < M; n++)\n    if ((|p|)[n] == 0)\n      s += n;\n\n  printf(\"Sum is : %ld\", s);\n  getchar();\n  return 0;\n}", "unbound_vals": [["(|p|)", 2]], "includes": ["<stdio.h>"], "unbound_funs": [["(|prime|)", true, null, 0]], "macros": [["M", "M 100000"], ["N", "N 1000000000"]], "disasm": "((:PUSH :EBP) (:MOV :ESP :EBP) (:PUSH :ESI) (:SUB 84 :ESP) (:MOVL 0 (- (:EBP) 8)) (:MOVL 0 (- (:EBP) 12)) (:MOVL 0 (- (:EBP) 24)) (:CALL :PRIME) (:MOVL 3 (- (:EBP) 16)) (:CMPL 100000 (- (:EBP) 16)) (:JG :ADDR) (:MOV (- (:EBP) 16) :EAX) (:CMPL 0 (+ (:EAX) 134520872)) (:JNE :ADDR) (:MOVL 0 (- (:EBP) 24)) (:MOVL 1 (- (:EBP) 20)) (:CMPL 1000000000 (- (:EBP) 20)) (:JGE :ADDR) (:IMUL 10 (- (:EBP) 24) :EAX) (:ADD 1 :EAX) (:CLTD) (:IDIVL (- (:EBP) 16)) (:MOV :EDX (- (:EBP) 24)) (:CMPL 0 (- (:EBP) 24)) (:JNE :ADDR) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 20) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 20)) (:JMP :ADDR) (:JMP :ADDR) (:XOR :EAX :EAX) (:MOV :AL :CL) (:MOV 5 :EAX) (:MOV (- (:EBP) 20) :EDX) (:MOV 5 (- (:EBP) 28)) (:MOV :EDX :EAX) (:CLTD) (:MOV (- (:EBP) 28) :ESI) (:IDIV :ESI) (:CMP 0 :EDX) (:MOV :CL (- (:EBP) 29)) (:JNE :ADDR) (:CMPL 0 (- (:EBP) 20)) (:SETNE :AL) (:MOV :AL (- (:EBP) 29)) (:MOV (- (:EBP) 29) :AL) (:TEST 1 :AL) (:JNE :ADDR) (:JMP :ADDR) (:MOV 5 :EAX) (:MOV (- (:EBP) 20) :ECX) (:MOV 5 (- (:EBP) 36)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 36) :ECX) (:IDIV :ECX) (:MOV :EAX (- (:EBP) 20)) (:JMP :ADDR) (:JMP :ADDR) (:XOR :EAX :EAX) (:MOV :AL :CL) (:MOV 2 :EAX) (:MOV (- (:EBP) 20) :EDX) (:MOV 2 (- (:EBP) 40)) (:MOV :EDX :EAX) (:CLTD) (:MOV (- (:EBP) 40) :ESI) (:IDIV :ESI) (:CMP 0 :EDX) (:MOV :CL (- (:EBP) 41)) (:JNE :ADDR) (:CMPL 0 (- (:EBP) 20)) (:SETNE :AL) (:MOV :AL (- (:EBP) 41)) (:MOV (- (:EBP) 41) :AL) (:TEST 1 :AL) (:JNE :ADDR) (:JMP :ADDR) (:MOV 2 :EAX) (:MOV (- (:EBP) 20) :ECX) (:MOV 2 (- (:EBP) 48)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 48) :ECX) (:IDIV :ECX) (:MOV :EAX (- (:EBP) 20)) (:JMP :ADDR) (:CMPL 1 (- (:EBP) 20)) (:JE :ADDR) (:CMPL 0 (- (:EBP) 20)) (:JNE :ADDR) (:LEA \"\n%ld\" :EAX) (:MOV (- (:EBP) 16) :ECX) (:MOV \"\n%ld\" (:ESP)) (:MOV :ECX (+ (:ESP) 4)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:MOV (- (:EBP) 16) :ECX) (:MOVL 1 (+ (:ECX) 134520872)) (:MOV \"\n%ld\" (- (:EBP) 52)) (:JMP :ADDR) (:MOV 10 :EAX) (:MOV (- (:EBP) 16) :ECX) (:MOV 10 (- (:EBP) 56)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 56) :ECX) (:IDIV :ECX) (:CMP 1 :EDX) (:JE :ADDR) (:MOV 10 :EAX) (:MOV (- (:EBP) 16) :ECX) (:MOV 10 (- (:EBP) 60)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 60) :ECX) (:IDIV :ECX) (:CMP 7 :EDX) (:JE :ADDR) (:MOV 10 :EAX) (:MOV (- (:EBP) 16) :ECX) (:MOV 10 (- (:EBP) 64)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 64) :ECX) (:IDIV :ECX) (:CMP 9 :EDX) (:JNE :ADDR) (:MOV (- (:EBP) 16) :EAX) (:ADD 2 :EAX) (:MOV :EAX (- (:EBP) 16)) (:JMP :ADDR) (:MOV (- (:EBP) 16) :EAX) (:ADD 4 :EAX) (:MOV :EAX (- (:EBP) 16)) (:JMP :ADDR) (:MOVL 2 (- (:EBP) 16)) (:CMPL 100000 (- (:EBP) 16)) (:JGE :ADDR) (:MOV (- (:EBP) 16) :EAX) (:CMPL 0 (+ (:EAX) 134520872)) (:JNE :ADDR) (:MOV (- (:EBP) 16) :EAX) (:ADD (- (:EBP) 12) :EAX) (:MOV :EAX (- (:EBP) 12)) (:JMP :ADDR) (:MOV (- (:EBP) 16) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 16)) (:JMP :ADDR) (:LEA \"Sum is : %ld\" :EAX) (:MOV (- (:EBP) 12) :ECX) (:MOV \"Sum is : %ld\" (:ESP)) (:MOV :ECX (+ (:ESP) 4)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:MOV \"Sum is : %ld\" (- (:EBP) 68)) (:CALL :PRINTF) (:XOR :ECX :ECX) (:MOV \"Sum is : %ld\" (- (:EBP) 72)) (:MOV :ECX :EAX) (:ADD 84 :ESP) (:POP :ESI) (:POP :EBP) (:RET))", "types": [-6857659793473511817], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -4076947572672263877, "ast_class": "BinaryOperator", "random": 0.0011170840908087953, "src_text": "(|times|) <= (|len|) / 9", "unbound_vals": [["(|len|)", 1], ["(|times|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 3474597187226773201, "ast_class": "BinaryOperator", "random": 0.0011172444072287124, "src_text": "(|a0|) +\n                                                                                                                                                      (|a1|) +\n                                                                                                                                                      (|a2|) +\n                                                                                                                                                      (|a3|) +\n                                                                                                                                                      (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) +\n                                                                                                                                                      (|a40|) +\n                                                                                                                                                      (|a41|) +\n                                                                                                                                                      (|a42|) +\n                                                                                                                                                      (|a43|) +\n                                                                                                                                                      (|a44|) +\n                                                                                                                                                      (|a45|) + (|a46|)", "unbound_vals": [["(|a0|)", 66], ["(|a1|)", 66], ["(|a2|)", 66], ["(|a3|)", 66], ["(|a4|)", 66], ["(|a5|)", 66], ["(|a6|)", 66], ["(|a7|)", 66], ["(|a8|)", 66], ["(|a9|)", 66], ["(|a10|)", 66], ["(|a11|)", 66], ["(|a12|)", 66], ["(|a13|)", 66], ["(|a14|)", 66], ["(|a15|)", 66], ["(|a16|)", 66], ["(|a17|)", 66], ["(|a18|)", 66], ["(|a19|)", 66], ["(|a20|)", 66], ["(|a21|)", 66], ["(|a22|)", 66], ["(|a23|)", 66], ["(|a24|)", 66], ["(|a25|)", 66], ["(|a26|)", 66], ["(|a27|)", 66], ["(|a28|)", 66], ["(|a29|)", 66], ["(|a30|)", 66], ["(|a31|)", 66], ["(|a32|)", 66], ["(|a33|)", 66], ["(|a34|)", 66], ["(|a35|)", 66], ["(|a36|)", 66], ["(|a37|)", 66], ["(|a38|)", 66], ["(|a39|)", 66], ["(|a40|)", 66], ["(|a41|)", 66], ["(|a42|)", 66], ["(|a43|)", 66], ["(|a44|)", 66], ["(|a45|)", 66], ["(|a46|)", 66]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -4967564154578268304, "ast_class": "BinaryOperator", "random": 0.0011684540933191156, "src_text": "(|l|) = 2", "unbound_vals": [["(|l|)", 6]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -3417004409038337413, "ast_class": "BinaryOperator", "random": 0.001168836538244955, "src_text": "(|d|) -\n                                                                                ((|a0|) +\n                                                                                 (|a1|) +\n                                                                                 (|a2|) +\n                                                                                 (|a3|) +\n                                                                                 (|a4|) +\n                                                                                 (|a5|) +\n                                                                                 (|a6|) +\n                                                                                 (|a7|) +\n                                                                                 (|a8|) +\n                                                                                 (|a9|) +\n                                                                                 (|a10|) +\n                                                                                 (|a11|) +\n                                                                                 (|a12|) +\n                                                                                 (|a13|) +\n                                                                                 (|a14|) +\n                                                                                 (|a15|) +\n                                                                                 (|a16|) +\n                                                                                 (|a17|) +\n                                                                                 (|a18|) +\n                                                                                 (|a19|) +\n                                                                                 (|a20|) +\n                                                                                 (|a21|) +\n                                                                                 (|a22|) +\n                                                                                 (|a23|) +\n                                                                                 (|a24|) +\n                                                                                 (|a25|) +\n                                                                                 (|a26|) +\n                                                                                 (|a27|) +\n                                                                                 (|a28|) +\n                                                                                 (|a29|) +\n                                                                                 (|a30|) +\n                                                                                 (|a31|) +\n                                                                                 (|a32|) +\n                                                                                 (|a33|) +\n                                                                                 (|a34|))", "unbound_vals": [["(|d|)", 35], ["(|a0|)", 35], ["(|a1|)", 35], ["(|a2|)", 35], ["(|a3|)", 35], ["(|a4|)", 35], ["(|a5|)", 35], ["(|a6|)", 35], ["(|a7|)", 35], ["(|a8|)", 35], ["(|a9|)", 35], ["(|a10|)", 35], ["(|a11|)", 35], ["(|a12|)", 35], ["(|a13|)", 35], ["(|a14|)", 35], ["(|a15|)", 35], ["(|a16|)", 35], ["(|a17|)", 35], ["(|a18|)", 35], ["(|a19|)", 35], ["(|a20|)", 35], ["(|a21|)", 35], ["(|a22|)", 35], ["(|a23|)", 35], ["(|a24|)", 35], ["(|a25|)", 35], ["(|a26|)", 35], ["(|a27|)", 35], ["(|a28|)", 35], ["(|a29|)", 35], ["(|a30|)", 35], ["(|a31|)", 35], ["(|a32|)", 35], ["(|a33|)", 35], ["(|a34|)", 35]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -4311226945554881990, "ast_class": "ImplicitCastExpr", "random": 0.001173563653166565, "src_text": "(|a58|)", "unbound_vals": [["(|a58|)", 93]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 2453111934362336046, "ast_class": "ImplicitCastExpr", "random": 0.001207393307285476, "src_text": "\"\\n%d\"", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "55 89 e5 83 ec 08 e8 e5 fe ff ff c7 45 f8 00 00 00 00 83 7d f8 1e 0f 8d 32 00 00 00 8b 45 f8 8b 04 85 28 a0 04 08 8b 4d f8 3b 04 8d a0 a0 04 08 0f 84 05 00 00 00 e9 13 00 00 00 e9 00 00 00 00 8b 45 f8 83 c0 01 89 45 f8 e9 c4 ff ff ff 83 7d f8 1e 0f 85 0c 00 00 00 c7 45 fc 01 00 00 00 e9 07 00 00 00 c7 45 fc 00 00 00 00 8b 45 fc 83 c4 08 5d c3 66 66 66 66 2e 0f 1f 84 00 00 00 00 00", "hash": 1429558217181895616, "ast_class": "Function", "random": 0.001218578556201333, "src_text": "int pal() {\n  int i;\n  (|rev|)();\n  for (i = 0; i < 30; i++)\n    if ((|a|)[i] != (|r|)[i])\n      break;\n\n  if (i == 30)\n    return 1;\n  else\n    return 0;\n}", "unbound_vals": [["(|a|)", 1], ["(|r|)", 1]], "includes": null, "unbound_funs": [["(|rev|)", true, null, 0]], "macros": null, "disasm": "((:PUSH :EBP) (:MOV :ESP :EBP) (:SUB 8 :ESP) (:CALL :REV) (:MOVL 0 (- (:EBP) 8)) (:CMPL 30 (- (:EBP) 8)) (:JGE :ADDR) (:MOV (- (:EBP) 8) :EAX) (:MOV (+ (:EAX) 134520872) :EAX) (:MOV (- (:EBP) 8) :ECX) (:CMP (+ (:ECX) 134520992) :EAX) (:JE :ADDR) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 8) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 8)) (:JMP :ADDR) (:CMPL 30 (- (:EBP) 8)) (:JNE :ADDR) (:MOVL 1 (- (:EBP) 4)) (:JMP :ADDR) (:MOVL 0 (- (:EBP) 4)) (:MOV (- (:EBP) 4) :EAX) (:ADD 8 :ESP) (:POP :EBP) (:RET) (:DATA32))", "types": [-5849325953548989793], "is_decl": true},
{"full_stmt": true, "binary_contents": null, "hash": -7483523925190330191, "ast_class": "Function", "random": 0.0012205736014643254, "src_text": "void fx() {\n  int a[(|N|)] = {1, 1, 2, 3};\n  int k = 3;\n  while (++k < (|N|)) {\n    int n = 0, ix = 0;\n    while (1) {\n      int t = (|penta|)(++ix);\n      if (t > k)\n        break;\n      n += a[k - t] % 1000000;\n      t = (|penta|)(-ix);\n      if (t > k)\n        break;\n      n += a[k - t] % 1000000;\n      t = (|penta|)(++ix);\n      if (t > k)\n        break;\n      n = (n + 1000000 - a[k - t]) % 1000000;\n      t = (|penta|)(-ix);\n      if (t > k)\n        break;\n      n = (n + 1000000 - a[k - t]) % 1000000;\n    }\n    a[k] = n;\n    if (!(a[k] % 1000000)) {\n      printf(\"n=%d\\n\", k);\n      break;\n    }\n  }\n}", "unbound_vals": [["(|N|)", 0]], "includes": ["<stdio.h>"], "unbound_funs": [["(|penta|)", false, false, 1]], "macros": [], "disasm": null, "types": [7945934781761998363, -5849325953548989793], "is_decl": true},
{"full_stmt": true, "binary_contents": "8b 8d a8 f9 ff ff 6b 95 ac f9 ff ff 50 89 c6 01 d6 8b 4c 8e 04 89 8d 98 f9 ff ff", "hash": -1233976970557402328, "ast_class": "BinaryOperator", "random": 0.0012388356317999394, "src_text": "(|temp_num_2|) = (|arr|)[(|i|)][(|j|) + 1]", "unbound_vals": [["(|arr|)", 2], ["(|i|)", 2], ["(|j|)", 2], ["(|temp_num_2|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 1624) :ECX) (:IMUL 80 (- (:EBP) 1620) :EDX) (:MOV :EAX :ESI) (:ADD :EDX :ESI) (:MOV (+ (:ESI) 4) :ECX) (:MOV :ECX (- (:EBP) 1640)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -3728480973454412906, "ast_class": "IntegerLiteral", "random": 0.0012575751363318455, "src_text": "891", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": "c7 45 f8 02 00 00 00 b8 02 00 00 00 8b 4d f8 8b 55 f4 89 85 08 91 fc ff 89 d0 99 8b b5 08 91 fc ff f7 fe 39 c1 0f 8f 3a 00 00 00 8b 45 f4 99 f7 7d f8 83 fa 00 0f 85 17 00 00 00 8b 45 f4 8b 84 85 7c 48 fe ff 03 45 f8 8b 4d f4 89 84 8d 7c 48 fe ff e9 00 00 00 00 8b 45 f8 83 c0 01 89 45 f8 e9 a2 ff ff ff", "hash": -5825480798050169866, "ast_class": "CompoundStmt", "random": 0.0012796684801119618, "src_text": "{\n      if ((|i|) % (|a|) == 0) {\n        (|num|)[(|i|)] = (|num|)[(|i|)] + (|a|);\n      }\n    }", "unbound_vals": [["(|a|)", 2], ["(|i|)", 2], ["(|num|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOVL 2 (- (:EBP) 8)) (:MOV 2 :EAX) (:MOV (- (:EBP) 8) :ECX) (:MOV (- (:EBP) 12) :EDX) (:MOV 2 (- (:EBP) 225016)) (:MOV :EDX :EAX) (:CLTD) (:MOV (- (:EBP) 225016) :ESI) (:IDIV :ESI) (:CMP :EAX :ECX) (:JG :ADDR) (:MOV (- (:EBP) 12) :EAX) (:CLTD) (:IDIVL (- (:EBP) 8)) (:CMP 0 :EDX) (:JNE :ADDR) (:MOV (- (:EBP) 12) :EAX) (:MOV (- (:EBP) 112516) :EAX) (:ADD (- (:EBP) 8) :EAX) (:MOV (- (:EBP) 12) :ECX) (:MOV :EAX (- (:EBP) 112516)) (:JMP :ADDR) (:MOV (- (:EBP) 8) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 8)) (:JMP :ADDR))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -4247534620314684616, "ast_class": "BinaryOperator", "random": 0.0012808810939558546, "src_text": "(|incCache|)[(|f|)][(|len|)] = (|num|)", "unbound_vals": [["(|incCache|)", 2], ["(|f|)", 1], ["(|len|)", 1], ["(|num|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 8513221624961514873, "ast_class": "UnaryOperator", "random": 0.001295910530838551, "src_text": "-564", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -4458129269627426771, "ast_class": "ArraySubscriptExpr", "random": 0.001310593412960137, "src_text": "(|cubeComponent|)[(|i|)]", "unbound_vals": [["(|cubeComponent|)", 3], ["(|i|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "55 89 e5 57 56 81 ec d0 17 00 00 31 c0 b9 d0 07 00 00 8d 95 84 e8 ff ff 8d b5 54 f0 ff ff 8d bd 24 f8 ff ff c7 45 f4 00 00 00 00 89 3c 24 c7 44 24 04 00 00 00 00 c7 44 24 08 d0 07 00 00 89 85 64 e8 ff ff 89 8d 60 e8 ff ff 89 95 5c e8 ff ff 89 b5 58 e8 ff ff e8 95 fe ff ff 8b 85 58 e8 ff ff 89 04 24 c7 44 24 04 00 00 00 00 c7 44 24 08 d0 07 00 00 e8 77 fe ff ff 8b 85 5c e8 ff ff 89 04 24 c7 44 24 04 00 00 00 00 c7 44 24 08 d0 07 00 00 e8 59 fe ff ff c7 85 70 e8 ff ff 00 00 00 00 c7 85 80 e8 ff ff 01 00 00 00 81 bd 80 e8 ff ff e8 03 00 00 0f 8f b4 03 00 00 c7 85 7c e8 ff ff 00 00 00 00 81 bd 7c e8 ff ff f4 01 00 00 0f 8d 47 00 00 00 8b 85 7c e8 ff ff c7 84 85 24 f8 ff ff 00 00 00 00 8b 85 7c e8 ff ff c7 84 85 54 f0 ff ff 00 00 00 00 8b 85 7c e8 ff ff c7 84 85 84 e8 ff ff 00 00 00 00 8b 85 7c e8 ff ff 83 c0 01 89 85 7c e8 ff ff e9 a9 ff ff ff c7 45 f0 01 00 00 00 c7 85 20 f8 ff ff 02 00 00 00 c7 85 7c e8 ff ff 01 00 00 00 8b 85 7c e8 ff ff 3b 85 80 e8 ff ff 0f 8d d9 01 00 00 c7 85 6c e8 ff ff 00 00 00 00 c7 85 78 e8 ff ff f3 01 00 00 83 bd 78 e8 ff ff 00 0f 8c 6a 00 00 00 b8 0a 00 00 00 8b 8d 78 e8 ff ff 8b 8c 8d 54 f0 ff ff c1 e1 01 03 8d 6c e8 ff ff 89 8d 68 e8 ff ff 8b 8d 68 e8 ff ff 89 85 54 e8 ff ff 89 c8 99 8b 8d 54 e8 ff ff f7 f9 8b b5 78 e8 ff ff 89 94 b5 84 e8 ff ff 8b 95 68 e8 ff ff 89 d0 99 f7 f9 89 85 6c e8 ff ff 8b 85 78 e8 ff ff 83 c0 ff 89 85 78 e8 ff ff e9 89 ff ff ff c7 85 6c e8 ff ff 00 00 00 00 c7 85 78 e8 ff ff f3 01 00 00 83 bd 78 e8 ff ff 00 0f 8c 74 00 00 00 b8 0a 00 00 00 8b 8d 78 e8 ff ff 8b 8c 8d 84 e8 ff ff 8b 95 78 e8 ff ff 03 8c 95 24 f8 ff ff 03 8d 6c e8 ff ff 89 8d 68 e8 ff ff 8b 8d 68 e8 ff ff 89 85 50 e8 ff ff 89 c8 99 8b 8d 50 e8 ff ff f7 f9 8b b5 78 e8 ff ff 89 94 b5 24 f8 ff ff 8b 95 68 e8 ff ff 89 d0 99 f7 f9 89 85 6c e8 ff ff 8b 85 78 e8 ff ff 83 c0 ff 89 85 78 e8 ff ff e9 7f ff ff ff c7 85 78 e8 ff ff f3 01 00 00 83 bd 78 e8 ff ff 00 0f 8c 89 00 00 00 8b 85 78 e8 ff ff 8b 84 85 54 f0 ff ff 8b 8d 78 e8 ff ff 03 84 8d 24 f8 ff ff 8b 8d 78 e8 ff ff 89 84 8d 54 f0 ff ff 8b 85 78 e8 ff ff 8b 84 85 54 f0 ff ff 8b 8d 78 e8 ff ff 2b 84 8d 24 f8 ff ff 8b 8d 78 e8 ff ff 89 84 8d 24 f8 ff ff 8b 85 78 e8 ff ff 8b 84 85 54 f0 ff ff 8b 8d 78 e8 ff ff 2b 84 8d 24 f8 ff ff 8b 8d 78 e8 ff ff 89 84 8d 54 f0 ff ff 8b 85 78 e8 ff ff 83 c0 ff 89 85 78 e8 ff ff e9 6a ff ff ff e9 00 00 00 00 8b 85 7c e8 ff ff 83 c0 01 89 85 7c e8 ff ff e9 15 fe ff ff c7 85 6c e8 ff ff 00 00 00 00 c7 85 78 e8 ff ff f3 01 00 00 83 bd 78 e8 ff ff 00 0f 8c 74 00 00 00 b8 0a 00 00 00 8b 8d 78 e8 ff ff 8b 8c 8d 24 f8 ff ff 8b 95 78 e8 ff ff 03 8c 95 54 f0 ff ff 03 8d 6c e8 ff ff 89 8d 68 e8 ff ff 8b 8d 68 e8 ff ff 89 85 4c e8 ff ff 89 c8 99 8b 8d 4c e8 ff ff f7 f9 8b b5 78 e8 ff ff 89 94 b5 24 f8 ff ff 8b 95 68 e8 ff ff 89 d0 99 f7 f9 89 85 6c e8 ff ff 8b 85 78 e8 ff ff 83 c0 ff 89 85 78 e8 ff ff e9 7f ff ff ff c7 85 78 e8 ff ff 00 00 00 00 81 bd 78 e8 ff ff f4 01 00 00 0f 8d 32 00 00 00 8b 85 78 e8 ff ff 83 bc 85 24 f8 ff ff 00 0f 84 05 00 00 00 e9 19 00 00 00 e9 00 00 00 00 8b 85 78 e8 ff ff 83 c0 01 89 85 78 e8 ff ff e9 be ff ff ff 8b 85 78 e8 ff ff 83 e8 01 83 bc 85 54 f0 ff ff 00 0f 85 23 00 00 00 8b 85 78 e8 ff ff 83 bc 85 54 f0 ff ff 00 0f 85 0f 00 00 00 8b 85 70 e8 ff ff 83 c0 01 89 85 70 e8 ff ff 8d 05 51 8a 04 08 8b 8d 80 e8 ff ff 89 04 24 89 4c 24 04 e8 5b fa ff ff 89 85 48 e8 ff ff 8b 85 80 e8 ff ff 83 c0 01 89 85 80 e8 ff ff e9 3c fc ff ff 8d 05 50 8a 04 08 8b 8d 70 e8 ff ff 89 04 24 89 4c 24 04 e8 29 fa ff ff 89 85 44 e8 ff ff e8 2e fa ff ff 31 c9 89 85 40 e8 ff ff 89 c8 81 c4 d0 17 00 00 5e 5f 5d c3", "hash": 4128475147671468329, "ast_class": "Function", "random": 0.0013501081827143047, "src_text": "int main() {\n  int n[M] = {0}, d[M] = {0}, t[M] = {0};\n  int i, j, k, ad, q = 0, r, m;\n  for (i = 1; i <= 1000; i++) {\n    for (j = 0; j < M; j++) {\n      n[j] = 0;\n      d[j] = 0;\n      t[j] = 0;\n    }\n\n    n[N] = 1;\n    d[N] = 2;\n\n    for (j = 1; j < i; j++) {\n      r = 0;\n      for (k = N; k >= 0; k--) {\n        m = d[k] * 2 + r;\n        t[k] = m % 10;\n        r = m / 10;\n      }\n      r = 0;\n      for (k = N; k >= 0; k--) {\n        m = t[k] + n[k] + r;\n        n[k] = m % 10;\n        r = m / 10;\n      }\n\n      for (k = N; k >= 0; k--) {\n        d[k] = d[k] + n[k];\n        n[k] = d[k] - n[k];\n        d[k] = d[k] - n[k];\n      }\n    }\n\n    r = 0;\n    for (k = N; k >= 0; k--) {\n      m = n[k] + d[k] + r;\n      n[k] = m % 10;\n      r = m / 10;\n    }\n    for (k = 0; k < M; k++)\n      if (n[k] != 0)\n        break;\n\n    if (d[k - 1] == 0 && d[k] == 0)\n      q++;\n    /*   printf(\"\\n\");\n       for(k=0;k<M;k++)\n       printf(\"%d\",n[k]);\n      */\n    printf(\"\\n%d\", i);\n  }\n  printf(\"\\n\\n%d\", q);\n  getchar();\n  return 0;\n}", "unbound_vals": null, "includes": ["<stdio.h>"], "unbound_funs": null, "macros": [["M", "M 500"], ["N", "N 499"]], "disasm": "((:PUSH :EBP) (:MOV :ESP :EBP) (:PUSH :EDI) (:PUSH :ESI) (:SUB 6096 :ESP) (:XOR :EAX :EAX) (:MOV 2000 :ECX) (:LEA (- (:EBP) 6012) :EDX) (:LEA (- (:EBP) 4012) :ESI) (:LEA (- (:EBP) 2012) :EDI) (:MOVL 0 (- (:EBP) 12)) (:MOV :EDI (:ESP)) (:MOVL 0 (+ (:ESP) 4)) (:MOVL 2000 (+ (:ESP) 8)) (:MOV :EAX (- (:EBP) 6044)) (:MOV 2000 (- (:EBP) 6048)) (:MOV :EDX (- (:EBP) 6052)) (:MOV :ESI (- (:EBP) 6056)) (:CALL :__LIBC_START_MAIN) (:MOV (- (:EBP) 6056) :EAX) (:MOV :EAX (:ESP)) (:MOVL 0 (+ (:ESP) 4)) (:MOVL 2000 (+ (:ESP) 8)) (:CALL :__LIBC_START_MAIN) (:MOV (- (:EBP) 6052) :EAX) (:MOV :EAX (:ESP)) (:MOVL 0 (+ (:ESP) 4)) (:MOVL 2000 (+ (:ESP) 8)) (:CALL :__LIBC_START_MAIN) (:MOVL 0 (- (:EBP) 6032)) (:MOVL 1 (- (:EBP) 6016)) (:CMPL 1000 (- (:EBP) 6016)) (:JG :ADDR) (:MOVL 0 (- (:EBP) 6020)) (:CMPL 500 (- (:EBP) 6020)) (:JGE :ADDR) (:MOV (- (:EBP) 6020) :EAX) (:MOVL 0 (- (:EBP) 2012)) (:MOV (- (:EBP) 6020) :EAX) (:MOVL 0 (- (:EBP) 4012)) (:MOV (- (:EBP) 6020) :EAX) (:MOVL 0 (- (:EBP) 6012)) (:MOV (- (:EBP) 6020) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 6020)) (:JMP :ADDR) (:MOVL 1 (- (:EBP) 16)) (:MOVL 2 (- (:EBP) 2016)) (:MOVL 1 (- (:EBP) 6020)) (:MOV (- (:EBP) 6020) :EAX) (:CMP (- (:EBP) 6016) :EAX) (:JGE :ADDR) (:MOVL 0 (- (:EBP) 6036)) (:MOVL 499 (- (:EBP) 6024)) (:CMPL 0 (- (:EBP) 6024)) (:JL :ADDR) (:MOV 10 :EAX) (:MOV (- (:EBP) 6024) :ECX) (:MOV (- (:EBP) 4012) :ECX) (:SHL 1 :ECX) (:ADD (- (:EBP) 6036) :ECX) (:MOV :ECX (- (:EBP) 6040)) (:MOV (- (:EBP) 6040) :ECX) (:MOV 10 (- (:EBP) 6060)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 6060) :ECX) (:IDIV :ECX) (:MOV (- (:EBP) 6024) :ESI) (:MOV :EDX (- (:EBP) 6012)) (:MOV (- (:EBP) 6040) :EDX) (:MOV :EDX :EAX) (:CLTD) (:IDIV :ECX) (:MOV :EAX (- (:EBP) 6036)) (:MOV (- (:EBP) 6024) :EAX) (:ADD 4294967295 :EAX) (:MOV :EAX (- (:EBP) 6024)) (:JMP :ADDR) (:MOVL 0 (- (:EBP) 6036)) (:MOVL 499 (- (:EBP) 6024)) (:CMPL 0 (- (:EBP) 6024)) (:JL :ADDR) (:MOV 10 :EAX) (:MOV (- (:EBP) 6024) :ECX) (:MOV (- (:EBP) 6012) :ECX) (:MOV (- (:EBP) 6024) :EDX) (:ADD (- (:EBP) 2012) :ECX) (:ADD (- (:EBP) 6036) :ECX) (:MOV :ECX (- (:EBP) 6040)) (:MOV (- (:EBP) 6040) :ECX) (:MOV 10 (- (:EBP) 6064)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 6064) :ECX) (:IDIV :ECX) (:MOV (- (:EBP) 6024) :ESI) (:MOV :EDX (- (:EBP) 2012)) (:MOV (- (:EBP) 6040) :EDX) (:MOV :EDX :EAX) (:CLTD) (:IDIV :ECX) (:MOV :EAX (- (:EBP) 6036)) (:MOV (- (:EBP) 6024) :EAX) (:ADD 4294967295 :EAX) (:MOV :EAX (- (:EBP) 6024)) (:JMP :ADDR) (:MOVL 499 (- (:EBP) 6024)) (:CMPL 0 (- (:EBP) 6024)) (:JL :ADDR) (:MOV (- (:EBP) 6024) :EAX) (:MOV (- (:EBP) 4012) :EAX) (:MOV (- (:EBP) 6024) :ECX) (:ADD (- (:EBP) 2012) :EAX) (:MOV (- (:EBP) 6024) :ECX) (:MOV :EAX (- (:EBP) 4012)) (:MOV (- (:EBP) 6024) :EAX) (:MOV (- (:EBP) 4012) :EAX) (:MOV (- (:EBP) 6024) :ECX) (:SUB (- (:EBP) 2012) :EAX) (:MOV (- (:EBP) 6024) :ECX) (:MOV :EAX (- (:EBP) 2012)) (:MOV (- (:EBP) 6024) :EAX) (:MOV (- (:EBP) 4012) :EAX) (:MOV (- (:EBP) 6024) :ECX) (:SUB (- (:EBP) 2012) :EAX) (:MOV (- (:EBP) 6024) :ECX) (:MOV :EAX (- (:EBP) 4012)) (:MOV (- (:EBP) 6024) :EAX) (:ADD 4294967295 :EAX) (:MOV :EAX (- (:EBP) 6024)) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 6020) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 6020)) (:JMP :ADDR) (:MOVL 0 (- (:EBP) 6036)) (:MOVL 499 (- (:EBP) 6024)) (:CMPL 0 (- (:EBP) 6024)) (:JL :ADDR) (:MOV 10 :EAX) (:MOV (- (:EBP) 6024) :ECX) (:MOV (- (:EBP) 2012) :ECX) (:MOV (- (:EBP) 6024) :EDX) (:ADD (- (:EBP) 4012) :ECX) (:ADD (- (:EBP) 6036) :ECX) (:MOV :ECX (- (:EBP) 6040)) (:MOV (- (:EBP) 6040) :ECX) (:MOV 10 (- (:EBP) 6068)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 6068) :ECX) (:IDIV :ECX) (:MOV (- (:EBP) 6024) :ESI) (:MOV :EDX (- (:EBP) 2012)) (:MOV (- (:EBP) 6040) :EDX) (:MOV :EDX :EAX) (:CLTD) (:IDIV :ECX) (:MOV :EAX (- (:EBP) 6036)) (:MOV (- (:EBP) 6024) :EAX) (:ADD 4294967295 :EAX) (:MOV :EAX (- (:EBP) 6024)) (:JMP :ADDR) (:MOVL 0 (- (:EBP) 6024)) (:CMPL 500 (- (:EBP) 6024)) (:JGE :ADDR) (:MOV (- (:EBP) 6024) :EAX) (:CMPL 0 (- (:EBP) 2012)) (:JE :ADDR) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 6024) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 6024)) (:JMP :ADDR) (:MOV (- (:EBP) 6024) :EAX) (:SUB 1 :EAX) (:CMPL 0 (- (:EBP) 4012)) (:JNE :ADDR) (:MOV (- (:EBP) 6024) :EAX) (:CMPL 0 (- (:EBP) 4012)) (:JNE :ADDR) (:MOV (- (:EBP) 6032) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 6032)) (:LEA \"\n%d\" :EAX) (:MOV (- (:EBP) 6016) :ECX) (:MOV \"\n%d\" (:ESP)) (:MOV :ECX (+ (:ESP) 4)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:MOV \"\n%d\" (- (:EBP) 6072)) (:MOV (- (:EBP) 6016) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 6016)) (:JMP :ADDR) (:LEA \"\n\n%d\" :EAX) (:MOV (- (:EBP) 6032) :ECX) (:MOV \"\n\n%d\" (:ESP)) (:MOV :ECX (+ (:ESP) 4)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:MOV \"\n\n%d\" (- (:EBP) 6076)) (:CALL :PRINTF) (:XOR :ECX :ECX) (:MOV \"\n\n%d\" (- (:EBP) 6080)) (:MOV :ECX :EAX) (:ADD 6096 :ESP) (:POP :ESI) (:POP :EDI) (:POP :EBP) (:RET))", "types": [7945934781761998363, -5849325953548989793], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": -2346893013931665567, "ast_class": "CStyleCastExpr", "random": 0.001351320138982648, "src_text": "(int)((|i|) / 2.0f)", "unbound_vals": [["(|i|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [-5849325953548989793], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -1414395504264393172, "ast_class": "BinaryOperator", "random": 0.0013944637646937652, "src_text": "(|c|) = 0", "unbound_vals": [["(|c|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "8b 45 f4 89 45 ec", "hash": 7627638912996651003, "ast_class": "BinaryOperator", "random": 0.0013967913503827312, "src_text": "(|limit|) = (|m|)", "unbound_vals": [["(|m|)", 4], ["(|limit|)", 3]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 12) :EAX) (:MOV :EAX (- (:EBP) 20)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 3727319699992728316, "ast_class": "ImplicitCastExpr", "random": 0.0014023822183242274, "src_text": "-601", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 4722626559357087693, "ast_class": "ImplicitCastExpr", "random": 0.0014164068110980033, "src_text": "(|a48|)", "unbound_vals": [["(|a48|)", 75]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": null, "hash": -5689472841806461930, "ast_class": "Function", "random": 0.0014216602047534277, "src_text": "int sum_of_pro_divs(int n) {\n  /*To hold prime-divisors*/\n  int prime[N] = {0};\n  /*To hold the exponents*/\n  int exponet[N] = {0};\n  int product = 1;\n\n  int i;\n  int j = 0;\n  int tmp = n;\n  for (i = 2; i <= tmp; ++i) {\n    while (tmp % i == 0) {\n      prime[j] = i;\n      exponet[j]++;\n      tmp /= i;\n    }\n    if (prime[j])\n      j++;\n  }\n\n  j = 0;\n  while (prime[j]) {\n    product *= ((|power|)(prime[j], exponet[j] + 1) - 1) / (prime[j] - 1);\n    j++;\n  }\n\n  return product - n;\n}", "unbound_vals": [], "includes": [], "unbound_funs": [["(|power|)", false, false, 2]], "macros": [["N", "N 10"]], "disasm": null, "types": [7945934781761998363, -5849325953548989793], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": -5919045644218613307, "ast_class": "ImplicitCastExpr", "random": 0.001425951317797769, "src_text": "(|down_permutate|)", "unbound_vals": [], "includes": [], "unbound_funs": [["(|down_permutate|)", false, false, 1]], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "c7 45 ec 00 00 00 00 c7 45 e8 02 00 00 00 8b 45 e8 8b 4d ec 2d 10 27 00 00 0f 97 c2 85 c9 0f 9f c6 88 75 cf 89 45 c8 88 55 c7 0f 84 06 00 00 00 8a 45 cf 88 45 c7 8a 45 c7 84 c0 0f 85 24 01 00 00 e9 00 00 00 00 8b 45 e8 83 3c 85 28 a0 04 08 00 0f 85 f2 00 00 00 c7 45 dc 00 00 00 00 c7 45 d8 00 00 00 00 f2 0f 10 45 e8 f2 0f 11 45 e0 8b 45 e0 83 3c 85 28 a0 04 08 00 0f 85 6f 00 00 00 8b 45 e8 8b 4d ec 8b 55 e0 8b 75 e4 89 c7 0f af fe 89 55 c0 f7 e2 01 fa 8b 75 c0 0f af ce 2d 01 e1 f5 05 0f 92 c3 01 ca 0f 98 c7 88 7d bf 89 55 b8 89 45 b4 88 5d b3 0f 84 06 00 00 00 8a 45 bf 88 45 b3 8a 45 b3 84 c0 0f 85 0a 00 00 00 e9 00 00 00 00 e9 33 00 00 00 8b 45 d8 8b 4d dc 83 c0 01 83 d1 00 89 45 d8 89 4d dc e9 00 00 00 00 e9 00 00 00 00 8b 45 e0 8b 4d e4 83 c0 01 83 d1 00 89 45 e0 89 4d e4 e9 64 ff ff ff 8b 45 e8 8b 4d ec 8b 55 d8 8b 75 dc 89 e7 89 77 10 89 57 0c 89 4f 08 89 47 04 c7 07 f0 87 04 08 e8 b1 fc ff ff 8b 4d d8 8b 55 dc 8b 75 d0 8b 7d d4 01 ce 11 d7 89 75 d0 89 7d d4 89 45 ac e9 00 00 00 00 8b 45 e8 8b 4d ec 83 c0 01 83 d1 00 89 45 e8 89 4d ec e9 a9 fe ff ff 8d 05 fc 87 04 08", "hash": 1151702701727027736, "ast_class": "ForStmt", "random": 0.0014394359102790633, "src_text": "for ((|i|) = 2; (|i|) <= N; (|i|)++)\n    if ((|p|)[(|i|)] == 0) {\n      (|n|) = 0;\n      for ((|j|) = (|i|);; (|j|)++) {\n        if ((|p|)[(|j|)] == 0)\n          if ((|i|) * (|j|) > M)\n            break;\n          else\n            (|n|)++;\n      }\n      printf(\"n%lld  %lld\", (|i|), (|n|));\n      (|no|) += (|n|);\n    }", "unbound_vals": [["(|p|)", 2], ["(|i|)", 0], ["(|j|)", 0], ["(|n|)", 0], ["(|no|)", 0]], "includes": ["<stdio.h>"], "unbound_funs": null, "macros": [["M", "M 100000000"], ["N", "N 10000"]], "disasm": "((:MOVL 0 (- (:EBP) 20)) (:MOVL 2 (- (:EBP) 24)) (:MOV (- (:EBP) 24) :EAX) (:MOV (- (:EBP) 20) :ECX) (:SUB 10000 :EAX) (:SETA :DL) (:TEST :ECX :ECX) (:SETG :D) (:MOV :D (- (:EBP) 49)) (:MOV :EAX (- (:EBP) 56)) (:MOV :DL (- (:EBP) 57)) (:JE :ADDR) (:MOV (- (:EBP) 49) :AL) (:MOV :AL (- (:EBP) 57)) (:MOV (- (:EBP) 57) :AL) (:TEST :AL :AL) (:JNE :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 24) :EAX) (:CMPL 0 (+ (:EAX) 134520872)) (:JNE :ADDR) (:MOVL 0 (- (:EBP) 36)) (:MOVL 0 (- (:EBP) 40)) (:MOVSD (- (:EBP) 24) :XMM0) (:MOVSD :XMM0 (- (:EBP) 32)) (:MOV (- (:EBP) 32) :EAX) (:CMPL 0 (+ (:EAX) 134520872)) (:JNE :ADDR) (:MOV (- (:EBP) 24) :EAX) (:MOV (- (:EBP) 20) :ECX) (:MOV (- (:EBP) 32) :EDX) (:MOV (- (:EBP) 28) :ESI) (:MOV :EAX :EDI) (:IMUL :ESI :EDI) (:MOV :EDX (- (:EBP) 64)) (:MUL :EDX) (:ADD :EDI :EDX) (:MOV (- (:EBP) 64) :ESI) (:IMUL :ESI :ECX) (:SUB 100000001 :EAX) (:SETB :BL) (:ADD :ECX :EDX) (:SETS :B) (:MOV :B (- (:EBP) 65)) (:MOV :EDX (- (:EBP) 72)) (:MOV :EAX (- (:EBP) 76)) (:MOV :BL (- (:EBP) 77)) (:JE :ADDR) (:MOV (- (:EBP) 65) :AL) (:MOV :AL (- (:EBP) 77)) (:MOV (- (:EBP) 77) :AL) (:TEST :AL :AL) (:JNE :ADDR) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 40) :EAX) (:MOV (- (:EBP) 36) :ECX) (:ADD 1 :EAX) (:ADC 0 :ECX) (:MOV :EAX (- (:EBP) 40)) (:MOV :ECX (- (:EBP) 36)) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 32) :EAX) (:MOV (- (:EBP) 28) :ECX) (:ADD 1 :EAX) (:ADC 0 :ECX) (:MOV :EAX (- (:EBP) 32)) (:MOV :ECX (- (:EBP) 28)) (:JMP :ADDR) (:MOV (- (:EBP) 24) :EAX) (:MOV (- (:EBP) 20) :ECX) (:MOV (- (:EBP) 40) :EDX) (:MOV (- (:EBP) 36) :ESI) (:MOV :ESP :EDI) (:MOV :ESI (+ (:EDI) 16)) (:MOV :EDX (+ (:EDI) 12)) (:MOV :ECX (+ (:EDI) 8)) (:MOV :EAX (+ (:EDI) 4)) (:MOVL \"n%lld  %lld\" (:EDI)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:MOV (- (:EBP) 40) :ECX) (:MOV (- (:EBP) 36) :EDX) (:MOV (- (:EBP) 48) :ESI) (:MOV (- (:EBP) 44) :EDI) (:ADD :ECX :ESI) (:ADC :EDX :EDI) (:MOV :ESI (- (:EBP) 48)) (:MOV :EDI (- (:EBP) 44)) (:MOV :EAX (- (:EBP) 84)) (:JMP :ADDR) (:MOV (- (:EBP) 24) :EAX) (:MOV (- (:EBP) 20) :ECX) (:ADD 1 :EAX) (:ADC 0 :ECX) (:MOV :EAX (- (:EBP) 24)) (:MOV :ECX (- (:EBP) 20)) (:JMP :ADDR) (:LEA \"   %lld\" :EAX))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 6262344271485142745, "ast_class": "DeclRefExpr", "random": 0.0014537391631586072, "src_text": "(|a11|)", "unbound_vals": [["(|a11|)", 49]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 4557418985232987712, "ast_class": "ParenExpr", "random": 0.0014695708949381547, "src_text": "((|a|) + (|b|))", "unbound_vals": [["(|a|)", 3], ["(|b|)", 3]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 5685056682670795628, "ast_class": "BinaryOperator", "random": 0.001472029980816525, "src_text": "(|a0|) + (|a1|) + (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) +\n                                                                                                                                                                                                              (|a49|) +\n                                                                                                                                                                                                              (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|)", "unbound_vals": [["(|a0|)", 94], ["(|a1|)", 94], ["(|a2|)", 94], ["(|a3|)", 94], ["(|a4|)", 94], ["(|a5|)", 94], ["(|a6|)", 94], ["(|a7|)", 94], ["(|a8|)", 94], ["(|a9|)", 94], ["(|a10|)", 94], ["(|a11|)", 94], ["(|a12|)", 94], ["(|a13|)", 94], ["(|a14|)", 94], ["(|a15|)", 94], ["(|a16|)", 94], ["(|a17|)", 94], ["(|a18|)", 94], ["(|a19|)", 94], ["(|a20|)", 94], ["(|a21|)", 94], ["(|a22|)", 94], ["(|a23|)", 94], ["(|a24|)", 94], ["(|a25|)", 94], ["(|a26|)", 94], ["(|a27|)", 94], ["(|a28|)", 94], ["(|a29|)", 94], ["(|a30|)", 94], ["(|a31|)", 94], ["(|a32|)", 94], ["(|a33|)", 94], ["(|a34|)", 94], ["(|a35|)", 94], ["(|a36|)", 94], ["(|a37|)", 94], ["(|a38|)", 94], ["(|a39|)", 94], ["(|a40|)", 94], ["(|a41|)", 94], ["(|a42|)", 94], ["(|a43|)", 94], ["(|a44|)", 94], ["(|a45|)", 94], ["(|a46|)", 94], ["(|a47|)", 94], ["(|a48|)", 94], ["(|a49|)", 94], ["(|a50|)", 94], ["(|a51|)", 94], ["(|a52|)", 94], ["(|a53|)", 94], ["(|a54|)", 94], ["(|a55|)", 94], ["(|a56|)", 94], ["(|a57|)", 94], ["(|a58|)", 94], ["(|a59|)", 94]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 8786536200233601550, "ast_class": "ImplicitCastExpr", "random": 0.0014808405864742413, "src_text": "(|text|)[(|i|) + 8]", "unbound_vals": [["(|text|)", 2], ["(|i|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 3699113880374090905, "ast_class": "DeclRefExpr", "random": 0.0014845222750792253, "src_text": "(|a9|)", "unbound_vals": [["(|a9|)", 93]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "c7 45 ec 00 00 00 00 c7 45 e8 00 00 00 00", "hash": 7565589479839975550, "ast_class": "ReturnStmt", "random": 0.0015161032133822472, "src_text": "return (NUMBER)0", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOVL 0 (- (:EBP) 20)) (:MOVL 0 (- (:EBP) 24)))", "types": [3456822550903822590], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 6850681124231636146, "ast_class": "ImplicitCastExpr", "random": 0.0015377553131159516, "src_text": "(|time2|)", "unbound_vals": [["(|time2|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 722744299826357402, "ast_class": "ImplicitCastExpr", "random": 0.0015520758241153176, "src_text": "(|a35|)", "unbound_vals": [["(|a35|)", 80]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 4744416024330958986, "ast_class": "BinaryOperator", "random": 0.0015528967202821375, "src_text": "(|l|) + 1", "unbound_vals": [["(|l|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 8174836376676045463, "ast_class": "BinaryOperator", "random": 0.0015842877637485264, "src_text": "(|n|) * (|n|) + (|a|) * (|n|)", "unbound_vals": [["(|a|)", 2], ["(|n|)", 2]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": null, "hash": -952957338586855347, "ast_class": "WhileStmt", "random": 0.001596309268453111, "src_text": "while (1) {\n    int d = (|hi|) - (|lo|);\n    if (d < 2)\n      break;\n    int next = (|lo|) + d / 2;\n    (|n|) = (|p|)[next - 1];\n    int64 nn = (int64)2 + (int64)2 * (|n|) * next;\n    if (nn > (|T|))\n      (|hi|) = next;\n    else\n      (|lo|) = next;\n  }", "unbound_vals": [["(|p|)", 0], ["(|T|)", 0], ["(|n|)", 0], ["(|lo|)", 0], ["(|hi|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [2141994997517735427, -5849325953548989793], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -2193240910402063542, "ast_class": "CompoundStmt", "random": 0.001609785554389176, "src_text": "{\n    bool isPrime = true;\n    while ((|maxSquare|) < (|odd|)) {\n      ++(|maxSquareBase|);\n      squareSet.insert(maxSquare = maxSquareBase * maxSquareBase);\n    }\n\n    it = primeArray.begin();\n    while (it != primeArray.end() && *it <= maxSquareBase) {\n      if (!(odd % *it)) {\n        isPrime = false;\n        break;\n      }\n      ++it;\n    }\n\n    if (isPrime) {\n      primeArray.push_back(odd);\n    } else {\n      // check with prime '2'\n      if ((!(odd & 1)) && squareSet.find((odd - *it) >> 1) != squareSet.end()) {\n        break;\n      }\n\n      // check with other prime\n      bool find = false;\n      it = primeArray.begin();\n      while (++it != primeArray.end()) {\n        if (squareSet.find((odd - *it) >> 1) != squareSet.end()) {\n          find = true;\n          break;\n        }\n      }\n\n      if (!find) {\n        break;\n      }\n    }\n  }", "unbound_vals": [["(|maxSquare|)", 1], ["(|maxSquareBase|)", 1], ["(|odd|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -3148795101909594836, "ast_class": "ImplicitCastExpr", "random": 0.0016450007522942345, "src_text": "560102", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 2289678313955488126, "ast_class": "DeclRefExpr", "random": 0.0016453875647867156, "src_text": "(|num_2|)", "unbound_vals": [["(|num_2|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 4914376177970057632, "ast_class": "ImplicitCastExpr", "random": 0.001682716407250373, "src_text": "(|a3|)", "unbound_vals": [["(|a3|)", 74]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": "c7 45 f4 00 00 00 00 8b 45 ec 89 45 fc c7 45 f0 00 00 00 00 c7 45 f8 00 00 00 00 31 c0 88 c1 83 7d f0 00 88 8d df fe ff ff 0f 85 0f 00 00 00 8b 45 f8 3b 45 e0 0f 9c c1 88 8d df fe ff ff 8a 85 df fe ff ff a8 01 0f 85 05 00 00 00 e9 2d 00 00 00 8b 45 f8 8b 84 85 f0 fe ff ff 3b 45 fc 0f 85 07 00 00 00 c7 45 f0 01 00 00 00 e9 00 00 00 00 8b 45 f8 83 c0 01 89 45 f8 e9 9d ff ff ff 83 7d f0 00 0f 84 05 00 00 00 e9 31 00 00 00 8b 45 fc 8b 4d e0 89 ca 83 c2 01 89 55 e0 89 84 8d f0 fe ff ff 8b 45 fc 89 04 24 e8 56 fe ff ff 89 45 fc 8b 45 f4 83 c0 01 89 45 f4 e9 56 ff ff ff", "hash": -4442292223038439544, "ast_class": "CompoundStmt", "random": 0.001709750692746148, "src_text": "{\n      for ((|i|) = 0; !(|flag|) && (|i|) < (|nbuf|); (|i|)++)\n        if ((|buf|)[(|i|)] == (|n|))\n          (|flag|) = true;\n\n      if ((|flag|))\n        break;\n\n      (|buf|)[(|nbuf|)++] = (|n|);\n      (|n|) = (|sfd|)((|n|));\n    }", "unbound_vals": [["(|n|)", 2], ["(|i|)", 2], ["(|flag|)", 2], ["(|nbuf|)", 2], ["(|buf|)", 2]], "includes": null, "unbound_funs": [["(|sfd|)", null, null, 1]], "macros": [["true", "true 1"]], "disasm": "((:MOVL 0 (- (:EBP) 12)) (:MOV (- (:EBP) 20) :EAX) (:MOV :EAX (- (:EBP) 4)) (:MOVL 0 (- (:EBP) 16)) (:MOVL 0 (- (:EBP) 8)) (:XOR :EAX :EAX) (:MOV :AL :CL) (:CMPL 0 (- (:EBP) 16)) (:MOV :CL (- (:EBP) 289)) (:JNE :ADDR) (:MOV (- (:EBP) 8) :EAX) (:CMP (- (:EBP) 32) :EAX) (:SETL :CL) (:MOV :CL (- (:EBP) 289)) (:MOV (- (:EBP) 289) :AL) (:TEST 1 :AL) (:JNE :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 8) :EAX) (:MOV (- (:EBP) 272) :EAX) (:CMP (- (:EBP) 4) :EAX) (:JNE :ADDR) (:MOVL 1 (- (:EBP) 16)) (:JMP :ADDR) (:MOV (- (:EBP) 8) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 8)) (:JMP :ADDR) (:CMPL 0 (- (:EBP) 16)) (:JE :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 4) :EAX) (:MOV (- (:EBP) 32) :ECX) (:MOV :ECX :EDX) (:ADD 1 :EDX) (:MOV :EDX (- (:EBP) 32)) (:MOV :EAX (- (:EBP) 272)) (:MOV (- (:EBP) 4) :EAX) (:MOV :EAX (:ESP)) (:CALL :SFD) (:MOV :EAX (- (:EBP) 4)) (:MOV (- (:EBP) 12) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 12)) (:JMP :ADDR))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 1796025940141142544, "ast_class": "Var", "random": 0.0017192682000548576, "src_text": "int error = GOAL", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": [["GOAL", "GOAL 2000000"]], "disasm": null, "types": [-5849325953548989793], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": 1205239680690881112, "ast_class": "DeclRefExpr", "random": 0.0017361745013954044, "src_text": "(|newdenom|)", "unbound_vals": [["(|newdenom|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 6966165189028824020, "ast_class": "BinaryOperator", "random": 0.0017413161533953447, "src_text": "(|end|) == 1", "unbound_vals": [["(|end|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": "8b 45 f8 8b 4d f8 89 04 8d 28 a0 04 08", "hash": 8435874574015937377, "ast_class": "BinaryOperator", "random": 0.0017694973044636297, "src_text": "(|a|)[(|i|)] = (|i|)", "unbound_vals": [["(|a|)", 2], ["(|i|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 8) :EAX) (:MOV (- (:EBP) 8) :ECX) (:MOV :EAX (+ (:ECX) 134520872)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 4068434300377042472, "ast_class": "ArraySubscriptExpr", "random": 0.0017839607278899994, "src_text": "(|szFactor|)[(|i|)]", "unbound_vals": [["(|szFactor|)", 3], ["(|i|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -5795694349896013753, "ast_class": "UnaryOperator", "random": 0.0017884771419892642, "src_text": "-307", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": null, "hash": -7408078838440647670, "ast_class": "IfStmt", "random": 0.0018116886966813572, "src_text": "if ((|len|) != strlen((|str2|)))\n    return 0", "unbound_vals": [["(|str2|)", 1], ["(|len|)", 0]], "includes": ["<string.h>"], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -3084565100719475247, "ast_class": "BinaryOperator", "random": 0.0018217170360373958, "src_text": "(|a0|) +\n                                                                                                                                                                                    (|a1|) +\n                                                                                                                                                                                    (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) +\n                                                                                                                                                                                    (|a17|) +\n                                                                                                                                                                                    (|a18|) +\n                                                                                                                                                                                    (|a19|) +\n                                                                                                                                                                                    (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) +\n                                                                                                                                                                                    (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|) + (|a61|) + (|a62|) + (|a63|) + (|a64|) + (|a65|) + (|a66|) + (|a67|) + (|a68|) + (|a69|) + (|a70|) + (|a71|) + (|a72|) + (|a73|) + (|a74|) + (|a75|) + (|a76|) + (|a77|) + (|a78|) + (|a79|) +\n                                                                                                                                                                                    (|a80|) +\n                                                                                                                                                                                    (|a81|) +\n                                                                                                                                                                                    (|a82|)", "unbound_vals": [["(|a0|)", 84], ["(|a1|)", 84], ["(|a2|)", 84], ["(|a3|)", 84], ["(|a4|)", 84], ["(|a5|)", 84], ["(|a6|)", 84], ["(|a7|)", 84], ["(|a8|)", 84], ["(|a9|)", 84], ["(|a10|)", 84], ["(|a11|)", 84], ["(|a12|)", 84], ["(|a13|)", 84], ["(|a14|)", 84], ["(|a15|)", 84], ["(|a16|)", 84], ["(|a17|)", 84], ["(|a18|)", 84], ["(|a19|)", 84], ["(|a20|)", 84], ["(|a21|)", 84], ["(|a22|)", 84], ["(|a23|)", 84], ["(|a24|)", 84], ["(|a25|)", 84], ["(|a26|)", 84], ["(|a27|)", 84], ["(|a28|)", 84], ["(|a29|)", 84], ["(|a30|)", 84], ["(|a31|)", 84], ["(|a32|)", 84], ["(|a33|)", 84], ["(|a34|)", 84], ["(|a35|)", 84], ["(|a36|)", 84], ["(|a37|)", 84], ["(|a38|)", 84], ["(|a39|)", 84], ["(|a40|)", 84], ["(|a41|)", 84], ["(|a42|)", 84], ["(|a43|)", 84], ["(|a44|)", 84], ["(|a45|)", 84], ["(|a46|)", 84], ["(|a47|)", 84], ["(|a48|)", 84], ["(|a49|)", 84], ["(|a50|)", 84], ["(|a51|)", 84], ["(|a52|)", 84], ["(|a53|)", 84], ["(|a54|)", 84], ["(|a55|)", 84], ["(|a56|)", 84], ["(|a57|)", 84], ["(|a58|)", 84], ["(|a59|)", 84], ["(|a60|)", 84], ["(|a61|)", 84], ["(|a62|)", 84], ["(|a63|)", 84], ["(|a64|)", 84], ["(|a65|)", 84], ["(|a66|)", 84], ["(|a67|)", 84], ["(|a68|)", 84], ["(|a69|)", 84], ["(|a70|)", 84], ["(|a71|)", 84], ["(|a72|)", 84], ["(|a73|)", 84], ["(|a74|)", 84], ["(|a75|)", 84], ["(|a76|)", 84], ["(|a77|)", 84], ["(|a78|)", 84], ["(|a79|)", 84], ["(|a80|)", 84], ["(|a81|)", 84], ["(|a82|)", 84]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 4883389575797022274, "ast_class": "ImplicitCastExpr", "random": 0.0018245875758571284, "src_text": "28123", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "c7 45 e0 00 00 00 00 8b 45 e0 8b 4d e8 83 e9 01 39 c8 0f 8d 4c 00 00 00 8b 45 f0 8b 4d e4 83 e9 01 39 c8 0f 85 09 00 00 00 c6 45 f7 01 e9 50 00 00 00 8b 45 f0 89 c1 c1 f9 1f 8b 55 e4 89 e6 89 56 0c 89 4e 04 89 06 c7 46 08 02 00 00 00 e8 77 fe ff ff 89 45 f0 8b 45 e0 83 c0 01 89 45 e0 e9 a3 ff ff ff", "hash": -801521649436893372, "ast_class": "ForStmt", "random": 0.0018442126160819194, "src_text": "for ((|i|) = 0; (|i|) < (|s|) - 1; ++(|i|)) {\n    if ((|a|) == (|n|) - 1)\n      return true;\n    (|a|) = (|mod_exp|)((|a|), 2, (|n|));\n  }", "unbound_vals": [["(|a|)", 1], ["(|s|)", 1], ["(|n|)", 1], ["(|i|)", 0]], "includes": ["<stdbool.h>"], "unbound_funs": [["(|mod_exp|)", null, null, 3]], "macros": null, "disasm": "((:MOVL 0 (- (:EBP) 32)) (:MOV (- (:EBP) 32) :EAX) (:MOV (- (:EBP) 24) :ECX) (:SUB 1 :ECX) (:CMP :ECX :EAX) (:JGE :ADDR) (:MOV (- (:EBP) 16) :EAX) (:MOV (- (:EBP) 28) :ECX) (:SUB 1 :ECX) (:CMP :ECX :EAX) (:JNE :ADDR) (:MOVB 1 (- (:EBP) 9)) (:JMP :ADDR) (:MOV (- (:EBP) 16) :EAX) (:MOV :EAX :ECX) (:SAR 31 :ECX) (:MOV (- (:EBP) 28) :EDX) (:MOV :ESP :ESI) (:MOV :EDX (+ (:ESI) 12)) (:MOV :ECX (+ (:ESI) 4)) (:MOV :EAX (:ESI)) (:MOVL 2 (+ (:ESI) 8)) (:CALL :MOD_EXP) (:MOV :EAX (- (:EBP) 16)) (:MOV (- (:EBP) 32) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 32)) (:JMP :ADDR))", "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "89 04 24 e8 30 fc ff ff", "hash": -4762261519798510824, "ast_class": "CallExpr", "random": 0.0018632316378144331, "src_text": "printf(\"DP Processing Tree:\\n\")", "unbound_vals": null, "includes": ["<stdio.h>"], "unbound_funs": null, "macros": null, "disasm": "((:MOV \"DP Processing Tree:\n\" (:ESP)) (:CALL :_ITM_DEREGISTERTMCLONETABLE))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -922891779921491903, "ast_class": "BinaryOperator", "random": 0.0018689687814525957, "src_text": "(|l|) >= L", "unbound_vals": [["(|l|)", 2]], "includes": null, "unbound_funs": null, "macros": [["L", "L 2000000"]], "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 9002619546822317558, "ast_class": "DeclRefExpr", "random": 0.0019055848141822374, "src_text": "(|j_p|)", "unbound_vals": [["(|j_p|)", 2]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": null, "hash": -5247865196920459192, "ast_class": "Function", "random": 0.001910807408027182, "src_text": "int main() {\n  unsigned long int a, i, sum = 0, temp = 0, num = 0, num_temp = 0, num_max = 0,\n                          Answer = 0;\n\n  for (i = 2; i < 10; i++) {\n    num_temp = 0;\n    sum = 0;\n    for (a = i; a < 1000000; a++) {\n      if ((|ifprime|)(a) != 0) {\n        if ((sum + a) > 1000000) {\n          break;\n        } else {\n          num_temp++;\n          sum += a;\n          if ((|ifprime|)(sum) != 0) {\n            num = num_temp;\n            temp = sum;\n          }\n        }\n      }\n      if (num_max < num) {\n        num_max = num;\n        Answer = temp;\n      }\n    }\n  }\n\n  printf(\"Answer:\\t %lu\", Answer);\n  (|getche|)();\n  return 0;\n}", "unbound_vals": [], "includes": ["<stdio.h>"], "unbound_funs": [["(|ifprime|)", false, false, 1], ["(|getche|)", false, false, 0]], "macros": [], "disasm": null, "types": [-4865021300304785594], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": 4017530401433579924, "ast_class": "DeclRefExpr", "random": 0.0019194113720129025, "src_text": "(|a12|)", "unbound_vals": [["(|a12|)", 73]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 5901865509084304901, "ast_class": "BinaryOperator", "random": 0.0019200944221933192, "src_text": "(|a0|) +\n                                                                                                                                                      (|a1|) +\n                                                                                                                                                      (|a2|) +\n                                                                                                                                                      (|a3|) +\n                                                                                                                                                      (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|)", "unbound_vals": [["(|a0|)", 66], ["(|a1|)", 66], ["(|a2|)", 66], ["(|a3|)", 66], ["(|a4|)", 66], ["(|a5|)", 66], ["(|a6|)", 66], ["(|a7|)", 66], ["(|a8|)", 66], ["(|a9|)", 66], ["(|a10|)", 66], ["(|a11|)", 66], ["(|a12|)", 66], ["(|a13|)", 66], ["(|a14|)", 66], ["(|a15|)", 66], ["(|a16|)", 66], ["(|a17|)", 66], ["(|a18|)", 66], ["(|a19|)", 66], ["(|a20|)", 66], ["(|a21|)", 66], ["(|a22|)", 66], ["(|a23|)", 66], ["(|a24|)", 66], ["(|a25|)", 66], ["(|a26|)", 66], ["(|a27|)", 66], ["(|a28|)", 66], ["(|a29|)", 66], ["(|a30|)", 66], ["(|a31|)", 66], ["(|a32|)", 66]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -3410150885066344718, "ast_class": "BinaryOperator", "random": 0.0019203819010676915, "src_text": "M - 10", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": [["M", "M 100000"]], "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -2440565255218953762, "ast_class": "ImplicitCastExpr", "random": 0.0019244347974637366, "src_text": "(|a77|)", "unbound_vals": [["(|a77|)", 82]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "8b 45 dc 8b 4d d4 8b 55 e0 8b 0c 8a 89 41 08", "hash": 7668483539341658530, "ast_class": "BinaryOperator", "random": 0.0019393904455606847, "src_text": "(|tab|)[(|j|)][2] = (|i|)", "unbound_vals": [["(|tab|)", 4], ["(|i|)", 4], ["(|j|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 36) :EAX) (:MOV (- (:EBP) 44) :ECX) (:MOV (- (:EBP) 32) :EDX) (:MOV (:EDX) :ECX) (:MOV :EAX (+ (:ECX) 8)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -1831949654981550431, "ast_class": "Var", "random": 0.0019594945279036713, "src_text": "long long unsigned c[9]", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [735379148409540298], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": 1918103696973667016, "ast_class": "DeclRefExpr", "random": 0.0019620090017113956, "src_text": "(|pp|)", "unbound_vals": [["(|pp|)", 2]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 2409569497405332658, "ast_class": "IntegerLiteral", "random": 0.0019644377422456394, "src_text": "2500", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 5673191564739573890, "ast_class": "BinaryOperator", "random": 0.0019953434653174895, "src_text": "(|nums|) % 10", "unbound_vals": [["(|nums|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -6916706123113221871, "ast_class": "BinaryOperator", "random": 0.001997936024835001, "src_text": "((|whati|) == (|whatDigits|)(2 * (|i|))) && ((|whati|) == (|whatDigits|)(3 * (|i|)))", "unbound_vals": [["(|i|)", 1], ["(|whati|)", 0]], "includes": null, "unbound_funs": [["(|whatDigits|)", null, null, 1]], "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 3441149545868075702, "ast_class": "BinaryOperator", "random": 0.0020299554505113226, "src_text": "((|l|) * (3 * (|l|) - 1)) / 2", "unbound_vals": [["(|l|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "55 89 e5 56 83 ec 10 8b 45 08 89 45 f8 c7 45 f0 00 00 00 00 c7 45 f4 00 00 00 00 81 7d f4 a0 00 00 00 0f 8d 4a 00 00 00 b8 0a 00 00 00 8b 4d f4 8b 0c 8d 20 a0 04 08 0f af 4d f8 03 4d f0 89 4d f0 8b 4d f0 89 45 ec 89 c8 99 8b 4d ec f7 f9 8b 75 f4 89 14 b5 20 a0 04 08 8b 55 f0 89 d0 99 f7 f9 89 45 f0 8b 45 f4 83 c0 01 89 45 f4 e9 a9 ff ff ff 83 c4 10 5e 5d c3 0f 1f 84 00 00 00 00 00", "hash": -6384849553550480293, "ast_class": "CompoundStmt", "random": 0.002043453459298572, "src_text": "{\n  int i;\n  int over = 0;\n  for (i = 0; i < N; ++i) {\n    over = (|num|)[i] * (|n|) + over;\n    (|num|)[i] = over % 10;\n    over /= 10;\n  }\n}", "unbound_vals": [["(|num|)", 2], ["(|n|)", 1]], "includes": null, "unbound_funs": null, "macros": [["N", "N 160"]], "disasm": "((:PUSH :EBP) (:MOV :ESP :EBP) (:PUSH :ESI) (:SUB 16 :ESP) (:MOV (+ (:EBP) 8) :EAX) (:MOV :EAX (- (:EBP) 8)) (:MOVL 0 (- (:EBP) 16)) (:MOVL 0 (- (:EBP) 12)) (:CMPL 160 (- (:EBP) 12)) (:JGE :ADDR) (:MOV 10 :EAX) (:MOV (- (:EBP) 12) :ECX) (:MOV (+ (:ECX) 134520864) :ECX) (:IMUL (- (:EBP) 8) :ECX) (:ADD (- (:EBP) 16) :ECX) (:MOV :ECX (- (:EBP) 16)) (:MOV (- (:EBP) 16) :ECX) (:MOV 10 (- (:EBP) 20)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 20) :ECX) (:IDIV :ECX) (:MOV (- (:EBP) 12) :ESI) (:MOV :EDX (+ (:ESI) 134520864)) (:MOV (- (:EBP) 16) :EDX) (:MOV :EDX :EAX) (:CLTD) (:IDIV :ECX) (:MOV :EAX (- (:EBP) 16)) (:MOV (- (:EBP) 12) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 12)) (:JMP :ADDR) (:ADD 16 :ESP) (:POP :ESI) (:POP :EBP) (:RET) (:NOPL (+ (:EAX) 0)))", "types": [-5849325953548989793], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 1175956253853147623, "ast_class": "BinaryOperator", "random": 0.0020490356868081427, "src_text": "(|a0|) +\n                                                                                                 (|a1|) +\n                                                                                                 (|a2|) +\n                                                                                                 (|a3|) +\n                                                                                                 (|a4|) +\n                                                                                                 (|a5|) +\n                                                                                                 (|a6|) +\n                                                                                                 (|a7|) +\n                                                                                                 (|a8|) +\n                                                                                                 (|a9|) +\n                                                                                                 (|a10|) +\n                                                                                                 (|a11|) +\n                                                                                                 (|a12|) +\n                                                                                                 (|a13|) +\n                                                                                                 (|a14|) +\n                                                                                                 (|a15|) +\n                                                                                                 (|a16|) +\n                                                                                                 (|a17|) +\n                                                                                                 (|a18|) +\n                                                                                                 (|a19|) +\n                                                                                                 (|a20|) +\n                                                                                                 (|a21|) +\n                                                                                                 (|a22|) +\n                                                                                                 (|a23|) +\n                                                                                                 (|a24|) +\n                                                                                                 (|a25|) +\n                                                                                                 (|a26|) +\n                                                                                                 (|a27|) +\n                                                                                                 (|a28|) +\n                                                                                                 (|a29|) +\n                                                                                                 (|a30|) +\n                                                                                                 (|a31|) +\n                                                                                                 (|a32|) +\n                                                                                                 (|a33|) +\n                                                                                                 (|a34|)", "unbound_vals": [["(|a0|)", 43], ["(|a1|)", 43], ["(|a2|)", 43], ["(|a3|)", 43], ["(|a4|)", 43], ["(|a5|)", 43], ["(|a6|)", 43], ["(|a7|)", 43], ["(|a8|)", 43], ["(|a9|)", 43], ["(|a10|)", 43], ["(|a11|)", 43], ["(|a12|)", 43], ["(|a13|)", 43], ["(|a14|)", 43], ["(|a15|)", 43], ["(|a16|)", 43], ["(|a17|)", 43], ["(|a18|)", 43], ["(|a19|)", 43], ["(|a20|)", 43], ["(|a21|)", 43], ["(|a22|)", 43], ["(|a23|)", 43], ["(|a24|)", 43], ["(|a25|)", 43], ["(|a26|)", 43], ["(|a27|)", 43], ["(|a28|)", 43], ["(|a29|)", 43], ["(|a30|)", 43], ["(|a31|)", 43], ["(|a32|)", 43], ["(|a33|)", 43], ["(|a34|)", 43]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 214217994444709314, "ast_class": "ImplicitCastExpr", "random": 0.0020698159264130878, "src_text": "(|primes|)", "unbound_vals": [["(|primes|)", 4]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -8244029998566708895, "ast_class": "BinaryOperator", "random": 0.0020784642728391978, "src_text": "(|product|) % (|i|) == 0", "unbound_vals": [["(|i|)", 1], ["(|product|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": null, "hash": -8931630394809400467, "ast_class": "ForStmt", "random": 0.002081108170225776, "src_text": "for (\n                                                                                                                                        (|a65|) = (|d|) - ((|a0|) + (|a1|) + (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|) + (|a61|) + (|a62|) + (|a63|) + (|a64|)); (|a65|) >= 0; (|a65|)--) {\n                                                                                                                                      if ((|a64|) < (|a65|) &&\n                                                                                                                                              (|a64|);\n                                                                                                                                          !=\n                                                                                                                                          0)\n                                                                                                                                        a65 =\n                                                                                                                                            a64;\n                                                                                                                                      if ((|a64|) <\n                                                                                                                                          (|a65|))\n                                                                                                                                        break;\n                                                                                                                                      for ((|a66|) = (|d|) - ((|a0|) +\n                                                                                                                                                      (|a1|) +\n                                                                                                                                                      (|a2|) +\n                                                                                                                                                      (|a3|) +\n                                                                                                                                                      (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) +\n                                                                                                                                                      (|a40|) +\n                                                                                                                                                      (|a41|) +\n                                                                                                                                                      (|a42|) +\n                                                                                                                                                      (|a43|) +\n                                                                                                                                                      (|a44|) +\n                                                                                                                                                      (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|) + (|a61|) + (|a62|) + (|a63|) +\n                                                                                                                                                      (|a64|) +\n                                                                                                                                                      (|a65|));\n                                                                                                                                           (|a66|) >=\n                                                                                                                                           0;\n                                                                                                                                           (|a66|)--) {\n                                                                                                                                        if ((|a65|) < (|a66|) &&\n                                                                                                                                                (|a65|);\n                                                                                                                                            !=\n                                                                                                                                            0)\n                                                                                                                                          a66 =\n                                                                                                                                              a65;\n                                                                                                                                        if ((|a65|) <\n                                                                                                                                            (|a66|))\n                                                                                                                                          break;\n                                                                                                                                        for (\n                                                                                                                                            (|a67|) = (|d|) - ((|a0|) +\n                                                                                                                                                       (|a1|) +\n                                                                                                                                                       (|a2|) +\n                                                                                                                                                       (|a3|) +\n                                                                                                                                                       (|a4|) +\n                                                                                                                                                       (|a5|) +\n                                                                                                                                                       (|a6|) +\n                                                                                                                                                       (|a7|) +\n                                                                                                                                                       (|a8|) +\n                                                                                                                                                       (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) + (|a43|) +\n                                                                                                                                                       (|a44|) +\n                                                                                                                                                       (|a45|) +\n                                                                                                                                                       (|a46|) +\n                                                                                                                                                       (|a47|) +\n                                                                                                                                                       (|a48|) +\n                                                                                                                                                       (|a49|) +\n                                                                                                                                                       (|a50|) +\n                                                                                                                                                       (|a51|) +\n                                                                                                                                                       (|a52|) +\n                                                                                                                                                       (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|) + (|a61|) + (|a62|) + (|a63|) +\n                                                                                                                                                       (|a64|) +\n                                                                                                                                                       (|a65|) +\n                                                                                                                                                       (|a66|));\n                                                                                                                                            (|a67|) >=\n                                                                                                                                            0;\n                                                                                                                                            (|a67|)--) {\n                                                                                                                                          if ((|a66|) < (|a67|) &&\n                                                                                                                                                  (|a66|);\n                                                                                                                                              !=\n                                                                                                                                              0)\n                                                                                                                                            a67 =\n                                                                                                                                                a66;\n                                                                                                                                          if ((|a66|) <\n                                                                                                                                              (|a67|))\n                                                                                                                                            break;\n                                                                                                                                          for (\n                                                                                                                                              (|a68|) = (|d|) - ((|a0|) +\n                                                                                                                                                         (|a1|) +\n                                                                                                                                                         (|a2|) +\n                                                                                                                                                         (|a3|) +\n                                                                                                                                                         (|a4|) +\n                                                                                                                                                         (|a5|) +\n                                                                                                                                                         (|a6|) +\n                                                                                                                                                         (|a7|) +\n                                                                                                                                                         (|a8|) +\n                                                                                                                                                         (|a9|) +\n                                                                                                                                                         (|a10|) +\n                                                                                                                                                         (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) +\n                                                                                                                                                         (|a58|) +\n                                                                                                                                                         (|a59|) +\n                                                                                                                                                         (|a60|) +\n                                                                                                                                                         (|a61|) +\n                                                                                                                                                         (|a62|) +\n                                                                                                                                                         (|a63|) +\n                                                                                                                                                         (|a64|) +\n                                                                                                                                                         (|a65|) +\n                                                                                                                                                         (|a66|) +\n                                                                                                                                                         (|a67|));\n                                                                                                                                              (|a68|) >=\n                                                                                                                                              0;\n                                                                                                                                              (|a68|)--) {\n                                                                                                                                            if ((|a67|) < (|a68|) &&\n                                                                                                                                                    (|a67|);\n                                                                                                                                                !=\n                                                                                                                                                0)\n                                                                                                                                              a68 =\n                                                                                                                                                  a67;\n                                                                                                                                            if ((|a67|) <\n                                                                                                                                                (|a68|))\n                                                                                                                                              break;\n                                                                                                                                            for ((|a69|) = (|d|) -\n                                                                                                                                                       ((|a0|) +\n                                                                                                                                                        (|a1|) +\n                                                                                                                                                        (|a2|) +\n                                                                                                                                                        (|a3|) +\n                                                                                                                                                        (|a4|) +\n                                                                                                                                                        (|a5|) +\n                                                                                                                                                        (|a6|) +\n                                                                                                                                                        (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) +\n                                                                                                                                                        (|a25|) +\n                                                                                                                                                        (|a26|) +\n                                                                                                                                                        (|a27|) +\n                                                                                                                                                        (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|) + (|a61|) +\n                                                                                                                                                        (|a62|) +\n                                                                                                                                                        (|a63|) +\n                                                                                                                                                        (|a64|) +\n                                                                                                                                                        (|a65|) +\n                                                                                                                                                        (|a66|) +\n                                                                                                                                                        (|a67|) +\n                                                                                                                                                        (|a68|));\n                                                                                                                                                 (|a69|) >=\n                                                                                                                                                 0;\n                                                                                                                                                 (|a69|)--) {\n                                                                                                                                              if ((|a68|) < (|a69|) &&\n                                                                                                                                                      (|a68|);\n                                                                                                                                                  !=\n                                                                                                                                                  0)\n                                                                                                                                                a69 =\n                                                                                                                                                    a68;\n                                                                                                                                              if ((|a68|) <\n                                                                                                                                                  (|a69|))\n                                                                                                                                                break;\n                                                                                                                                              for (\n                                                                                                                                                  (|a70|) = (|d|) -\n                                                                                                                                                        ((|a0|) +\n                                                                                                                                                         (|a1|) +\n                                                                                                                                                         (|a2|) +\n                                                                                                                                                         (|a3|) +\n                                                                                                                                                         (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) +\n                                                                                                                                                         (|a39|) +\n                                                                                                                                                         (|a40|) +\n                                                                                                                                                         (|a41|) +\n                                                                                                                                                         (|a42|) +\n                                                                                                                                                         (|a43|) +\n                                                                                                                                                         (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|) + (|a61|) + (|a62|) + (|a63|) +\n                                                                                                                                                         (|a64|) +\n                                                                                                                                                         (|a65|) +\n                                                                                                                                                         (|a66|) +\n                                                                                                                                                         (|a67|) +\n                                                                                                                                                         (|a68|) +\n                                                                                                                                                         (|a69|));\n                                                                                                                                                  (|a70|) >=\n                                                                                                                                                  0;\n                                                                                                                                                  (|a70|)--) {\n                                                                                                                                                if ((|a69|) < (|a70|) &&\n                                                                                                                                                        (|a69|);\n                                                                                                                                                    !=\n                                                                                                                                                    0)\n                                                                                                                                                  a70 =\n                                                                                                                                                      a69;\n                                                                                                                                                if ((|a69|) <\n                                                                                                                                                    (|a70|))\n                                                                                                                                                  break;\n                                                                                                                                                for ((|a71|) =\n                                                                                                                                                         (|d|) -\n                                                                                                                                                         ((|a0|) + (|a1|) + (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) + (|a43|) +\n                                                                                                                                                          (|a44|) +\n                                                                                                                                                          (|a45|) +\n                                                                                                                                                          (|a46|) +\n                                                                                                                                                          (|a47|) +\n                                                                                                                                                          (|a48|) +\n                                                                                                                                                          (|a49|) +\n                                                                                                                                                          (|a50|) +\n                                                                                                                                                          (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|) + (|a61|) + (|a62|) + (|a63|) + (|a64|) + (|a65|) +\n                                                                                                                                                          (|a66|) +\n                                                                                                                                                          (|a67|) +\n                                                                                                                                                          (|a68|) +\n                                                                                                                                                          (|a69|) +\n                                                                                                                                                          (|a70|));\n                                                                                                                                                     (|a71|) >=\n                                                                                                                                                     0;\n                                                                                                                                                     (|a71|)--) {\n                                                                                                                                                  if ((|a70|) < (|a71|) &&\n                                                                                                                                                          (|a70|);\n                                                                                                                                                      !=\n                                                                                                                                                      0)\n                                                                                                                                                    a71 =\n                                                                                                                                                        a70;\n                                                                                                                                                  if ((|a70|) <\n                                                                                                                                                      (|a71|))\n                                                                                                                                                    break;\n                                                                                                                                                  for ((|a72|) =\n                                                                                                                                                           (|d|) - ((|a0|) +\n                                                                                                                                                                (|a1|) +\n                                                                                                                                                                (|a2|) +\n                                                                                                                                                                (|a3|) +\n                                                                                                                                                                (|a4|) +\n                                                                                                                                                                (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) +\n                                                                                                                                                                (|a22|) +\n                                                                                                                                                                (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) +\n                                                                                                                                                                (|a39|) +\n                                                                                                                                                                (|a40|) + (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) +\n                                                                                                                                                                (|a56|) +\n                                                                                                                                                                (|a57|) + (|a58|) + (|a59|) + (|a60|) + (|a61|) + (|a62|) + (|a63|) + (|a64|) + (|a65|) + (|a66|) + (|a67|) + (|a68|) + (|a69|) + (|a70|) + (|a71|));\n                                                                                                                                                       (|a72|) >=\n                                                                                                                                                       0;\n                                                                                                                                                       (|a72|)--) {\n                                                                                                                                                    if ((|a71|) < (|a72|) &&\n                                                                                                                                                            (|a71|);\n                                                                                                                                                        !=\n                                                                                                                                                        0)\n                                                                                                                                                      a72 =\n                                                                                                                                                          a71;\n                                                                                                                                                    if ((|a71|) <\n                                                                                                                                                        (|a72|))\n                                                                                                                                                      break;\n                                                                                                                                                    for ((|a73|) =\n                                                                                                                                                             (|d|) -\n                                                                                                                                                             ((|a0|) + (|a1|) + (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) +\n                                                                                                                                                              (|a43|) +\n                                                                                                                                                              (|a44|) +\n                                                                                                                                                              (|a45|) +\n                                                                                                                                                              (|a46|) +\n                                                                                                                                                              (|a47|) +\n                                                                                                                                                              (|a48|) +\n                                                                                                                                                              (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|) + (|a61|) + (|a62|) + (|a63|) + (|a64|) + (|a65|) +\n                                                                                                                                                              (|a66|) +\n                                                                                                                                                              (|a67|) +\n                                                                                                                                                              (|a68|) +\n                                                                                                                                                              (|a69|) +\n                                                                                                                                                              (|a70|) +\n                                                                                                                                                              (|a71|) +\n                                                                                                                                                              (|a72|));\n                                                                                                                                                         (|a73|) >=\n                                                                                                                                                         0;\n                                                                                                                                                         (|a73|)--) {\n                                                                                                                                                      if ((|a72|) < (|a73|) &&\n                                                                                                                                                              (|a72|);\n                                                                                                                                                          !=\n                                                                                                                                                          0)\n                                                                                                                                                        a73 =\n                                                                                                                                                            a72;\n                                                                                                                                                      if ((|a72|) <\n                                                                                                                                                          (|a73|))\n                                                                                                                                                        break;\n                                                                                                                                                      for ((|a74|) =\n                                                                                                                                                               (|d|) - ((|a0|) +\n                                                                                                                                                                    (|a1|) +\n                                                                                                                                                                    (|a2|) +\n                                                                                                                                                                    (|a3|) +\n                                                                                                                                                                    (|a4|) +\n                                                                                                                                                                    (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) +\n                                                                                                                                                                    (|a38|) +\n                                                                                                                                                                    (|a39|) +\n                                                                                                                                                                    (|a40|) +\n                                                                                                                                                                    (|a41|) +\n                                                                                                                                                                    (|a42|) +\n                                                                                                                                                                    (|a43|) +\n                                                                                                                                                                    (|a44|) +\n                                                                                                                                                                    (|a45|) +\n                                                                                                                                                                    (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) +\n                                                                                                                                                                    (|a60|) +\n                                                                                                                                                                    (|a61|) +\n                                                                                                                                                                    (|a62|) +\n                                                                                                                                                                    (|a63|) +\n                                                                                                                                                                    (|a64|) +\n                                                                                                                                                                    (|a65|) +\n                                                                                                                                                                    (|a66|) +\n                                                                                                                                                                    (|a67|) +\n                                                                                                                                                                    (|a68|) +\n                                                                                                                                                                    (|a69|) +\n                                                                                                                                                                    (|a70|) +\n                                                                                                                                                                    (|a71|) +\n                                                                                                                                                                    (|a72|) +\n                                                                                                                                                                    (|a73|));\n                                                                                                                                                           (|a74|) >=\n                                                                                                                                                           0;\n                                                                                                                                                           (|a74|)--) {\n                                                                                                                                                        if ((|a73|) < (|a74|) &&\n                                                                                                                                                                (|a73|);\n                                                                                                                                                            !=\n                                                                                                                                                            0)\n                                                                                                                                                          a74 =\n                                                                                                                                                              a73;\n                                                                                                                                                        if ((|a73|) <\n                                                                                                                                                            (|a74|))\n                                                                                                                                                          break;\n                                                                                                                                                        for (\n                                                                                                                                                            (|a75|) = (|d|) -\n                                                                                                                                                                  ((|a0|) +\n                                                                                                                                                                   (|a1|) +\n                                                                                                                                                                   (|a2|) +\n                                                                                                                                                                   (|a3|) +\n                                                                                                                                                                   (|a4|) +\n                                                                                                                                                                   (|a5|) +\n                                                                                                                                                                   (|a6|) +\n                                                                                                                                                                   (|a7|) +\n                                                                                                                                                                   (|a8|) +\n                                                                                                                                                                   (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) +\n                                                                                                                                                                   (|a33|) +\n                                                                                                                                                                   (|a34|) +\n                                                                                                                                                                   (|a35|) +\n                                                                                                                                                                   (|a36|) +\n                                                                                                                                                                   (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|) + (|a61|) + (|a62|) + (|a63|) +\n                                                                                                                                                                   (|a64|) +\n                                                                                                                                                                   (|a65|) +\n                                                                                                                                                                   (|a66|) +\n                                                                                                                                                                   (|a67|) +\n                                                                                                                                                                   (|a68|) +\n                                                                                                                                                                   (|a69|) +\n                                                                                                                                                                   (|a70|) +\n                                                                                                                                                                   (|a71|) +\n                                                                                                                                                                   (|a72|) +\n                                                                                                                                                                   (|a73|) +\n                                                                                                                                                                   (|a74|));\n                                                                                                                                                            (|a75|) >=\n                                                                                                                                                            0;\n                                                                                                                                                            (|a75|)--) {\n                                                                                                                                                          if ((|a74|) < (|a75|) &&\n                                                                                                                                                                  (|a74|);\n                                                                                                                                                              !=\n                                                                                                                                                              0)\n                                                                                                                                                            a75 =\n                                                                                                                                                                a74;\n                                                                                                                                                          if ((|a74|) <\n                                                                                                                                                              (|a75|))\n                                                                                                                                                            break;\n                                                                                                                                                          for ((|a76|) = (|d|) -\n                                                                                                                                                                     ((|a0|) +\n                                                                                                                                                                      (|a1|) +\n                                                                                                                                                                      (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) +\n                                                                                                                                                                      (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|) + (|a61|) + (|a62|) + (|a63|) + (|a64|) + (|a65|) + (|a66|) + (|a67|) + (|a68|) + (|a69|) + (|a70|) + (|a71|) + (|a72|) + (|a73|) + (|a74|) + (|a75|));\n                                                                                                                                                               (|a76|) >=\n                                                                                                                                                               0;\n                                                                                                                                                               (|a76|)--) {\n                                                                                                                                                            if ((|a75|) < (|a76|) &&\n                                                                                                                                                                    (|a75|);\n                                                                                                                                                                !=\n                                                                                                                                                                0)\n                                                                                                                                                              a76 =\n                                                                                                                                                                  a75;\n                                                                                                                                                            if ((|a75|) <\n                                                                                                                                                                (|a76|))\n                                                                                                                                                              break;\n                                                                                                                                                            for ((|a77|) =\n                                                                                                                                                                     (|d|) -\n                                                                                                                                                                     ((|a0|) +\n                                                                                                                                                                      (|a1|) +\n                                                                                                                                                                      (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) +\n                                                                                                                                                                      (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|) + (|a61|) + (|a62|) + (|a63|) + (|a64|) + (|a65|) + (|a66|) + (|a67|) + (|a68|) + (|a69|) + (|a70|) + (|a71|) + (|a72|) + (|a73|) + (|a74|) + (|a75|) + (|a76|));\n                                                                                                                                                                 (|a77|) >=\n                                                                                                                                                                 0;\n                                                                                                                                                                 (|a77|)--) {\n                                                                                                                                                              if ((|a76|) < (|a77|) &&\n                                                                                                                                                                      (|a76|);\n                                                                                                                                                                  !=\n                                                                                                                                                                  0)\n                                                                                                                                                                a77 =\n                                                                                                                                                                    a76;\n                                                                                                                                                              if ((|a76|) <\n                                                                                                                                                                  (|a77|))\n                                                                                                                                                                break;\n                                                                                                                                                              for ((|a78|) =\n                                                                                                                                                                       (|d|) - ((|a0|) +\n                                                                                                                                                                            (|a1|) + (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) +\n                                                                                                                                                                            (|a19|) +\n                                                                                                                                                                            (|a20|) +\n                                                                                                                                                                            (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) +\n                                                                                                                                                                            (|a33|) +\n                                                                                                                                                                            (|a34|) +\n                                                                                                                                                                            (|a35|) +\n                                                                                                                                                                            (|a36|) +\n                                                                                                                                                                            (|a37|) +\n                                                                                                                                                                            (|a38|) +\n                                                                                                                                                                            (|a39|) +\n                                                                                                                                                                            (|a40|) + (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) +\n                                                                                                                                                                            (|a51|) +\n                                                                                                                                                                            (|a52|) +\n                                                                                                                                                                            (|a53|) +\n                                                                                                                                                                            (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|) + (|a61|) + (|a62|) + (|a63|) + (|a64|) + (|a65|) + (|a66|) + (|a67|) + (|a68|) + (|a69|) +\n                                                                                                                                                                            (|a70|) +\n                                                                                                                                                                            (|a71|) +\n                                                                                                                                                                            (|a72|) +\n                                                                                                                                                                            (|a73|) +\n                                                                                                                                                                            (|a74|) +\n                                                                                                                                                                            (|a75|) +\n                                                                                                                                                                            (|a76|) +\n                                                                                                                                                                            (|a77|));\n                                                                                                                                                                   (|a78|) >=\n                                                                                                                                                                   0;\n                                                                                                                                                                   (|a78|)--) {\n                                                                                                                                                                if ((|a77|) < (|a78|) &&\n                                                                                                                                                                        (|a77|);\n                                                                                                                                                                    !=\n                                                                                                                                                                    0)\n                                                                                                                                                                  a78 =\n                                                                                                                                                                      a77;\n                                                                                                                                                                if ((|a77|) <\n                                                                                                                                                                    (|a78|))\n                                                                                                                                                                  break;\n                                                                                                                                                                for ((|a79|) = (|d|) - ((|a0|) +\n                                                                                                                                                                                (|a1|) +\n                                                                                                                                                                                (|a2|) +\n                                                                                                                                                                                (|a3|) +\n                                                                                                                                                                                (|a4|) +\n                                                                                                                                                                                (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) +\n                                                                                                                                                                                (|a18|) +\n                                                                                                                                                                                (|a19|) +\n                                                                                                                                                                                (|a20|) +\n                                                                                                                                                                                (|a21|) +\n                                                                                                                                                                                (|a22|) +\n                                                                                                                                                                                (|a23|) +\n                                                                                                                                                                                (|a24|) +\n                                                                                                                                                                                (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) +\n                                                                                                                                                                                (|a35|) +\n                                                                                                                                                                                (|a36|) +\n                                                                                                                                                                                (|a37|) +\n                                                                                                                                                                                (|a38|) +\n                                                                                                                                                                                (|a39|) + (|a40|) + (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) +\n                                                                                                                                                                                (|a54|) +\n                                                                                                                                                                                (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|) + (|a61|) + (|a62|) + (|a63|) + (|a64|) + (|a65|) + (|a66|) + (|a67|) + (|a68|) +\n                                                                                                                                                                                (|a69|) +\n                                                                                                                                                                                (|a70|) +\n                                                                                                                                                                                (|a71|) +\n                                                                                                                                                                                (|a72|) +\n                                                                                                                                                                                (|a73|) +\n                                                                                                                                                                                (|a74|) +\n                                                                                                                                                                                (|a75|) +\n                                                                                                                                                                                (|a76|) +\n                                                                                                                                                                                (|a77|) +\n                                                                                                                                                                                (|a78|));\n                                                                                                                                                                     (|a79|) >=\n                                                                                                                                                                     0;\n                                                                                                                                                                     (|a79|)--) {\n                                                                                                                                                                  if ((|a78|) < (|a79|) &&\n                                                                                                                                                                          (|a78|);\n                                                                                                                                                                      !=\n                                                                                                                                                                      0)\n                                                                                                                                                                    a79 =\n                                                                                                                                                                        a78;\n                                                                                                                                                                  if ((|a78|) <\n                                                                                                                                                                      (|a79|))\n                                                                                                                                                                    break;\n                                                                                                                                                                  for (\n                                                                                                                                                                      (|a80|) =\n                                                                                                                                                                          (|d|) -\n                                                                                                                                                                          ((|a0|) +\n                                                                                                                                                                           (|a1|) + (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) +\n                                                                                                                                                                           (|a19|) +\n                                                                                                                                                                           (|a20|) +\n                                                                                                                                                                           (|a21|) +\n                                                                                                                                                                           (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) +\n                                                                                                                                                                           (|a33|) +\n                                                                                                                                                                           (|a34|) +\n                                                                                                                                                                           (|a35|) +\n                                                                                                                                                                           (|a36|) +\n                                                                                                                                                                           (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|) + (|a61|) + (|a62|) + (|a63|) + (|a64|) + (|a65|) + (|a66|) + (|a67|) + (|a68|) +\n                                                                                                                                                                           (|a69|) +\n                                                                                                                                                                           (|a70|) +\n                                                                                                                                                                           (|a71|) +\n                                                                                                                                                                           (|a72|) +\n                                                                                                                                                                           (|a73|) +\n                                                                                                                                                                           (|a74|) +\n                                                                                                                                                                           (|a75|) +\n                                                                                                                                                                           (|a76|) +\n                                                                                                                                                                           (|a77|) +\n                                                                                                                                                                           (|a78|) +\n                                                                                                                                                                           (|a79|));\n                                                                                                                                                                      (|a80|) >=\n                                                                                                                                                                      0;\n                                                                                                                                                                      (|a80|)--) {\n                                                                                                                                                                    if ((|a79|) < (|a80|) &&\n                                                                                                                                                                            (|a79|);\n                                                                                                                                                                        !=\n                                                                                                                                                                        0)\n                                                                                                                                                                      a80 =\n                                                                                                                                                                          a79;\n                                                                                                                                                                    if ((|a79|) <\n                                                                                                                                                                        (|a80|))\n                                                                                                                                                                      break;\n                                                                                                                                                                    for (\n                                                                                                                                                                        (|a81|) = (|d|) -\n                                                                                                                                                                              ((|a0|) +\n                                                                                                                                                                               (|a1|) +\n                                                                                                                                                                               (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) +\n                                                                                                                                                                               (|a18|) +\n                                                                                                                                                                               (|a19|) +\n                                                                                                                                                                               (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) +\n                                                                                                                                                                               (|a34|) +\n                                                                                                                                                                               (|a35|) +\n                                                                                                                                                                               (|a36|) +\n                                                                                                                                                                               (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) +\n                                                                                                                                                                               (|a50|) +\n                                                                                                                                                                               (|a51|) +\n                                                                                                                                                                               (|a52|) +\n                                                                                                                                                                               (|a53|) +\n                                                                                                                                                                               (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|) + (|a61|) + (|a62|) + (|a63|) + (|a64|) + (|a65|) + (|a66|) +\n                                                                                                                                                                               (|a67|) +\n                                                                                                                                                                               (|a68|) +\n                                                                                                                                                                               (|a69|) +\n                                                                                                                                                                               (|a70|) +\n                                                                                                                                                                               (|a71|) +\n                                                                                                                                                                               (|a72|) +\n                                                                                                                                                                               (|a73|) +\n                                                                                                                                                                               (|a74|) +\n                                                                                                                                                                               (|a75|) +\n                                                                                                                                                                               (|a76|) +\n                                                                                                                                                                               (|a77|) +\n                                                                                                                                                                               (|a78|) +\n                                                                                                                                                                               (|a79|) +\n                                                                                                                                                                               (|a80|));\n                                                                                                                                                                        (|a81|) >= 0; (|a81|)--) {\n                                                                                                                                                                      if ((|a80|) < (|a81|) &&\n                                                                                                                                                                              (|a80|);\n                                                                                                                                                                          !=\n                                                                                                                                                                          0)\n                                                                                                                                                                        a81 =\n                                                                                                                                                                            a80;\n                                                                                                                                                                      if ((|a80|) <\n                                                                                                                                                                          (|a81|))\n                                                                                                                                                                        break;\n                                                                                                                                                                      for ((|a82|) =\n                                                                                                                                                                               (|d|) - ((|a0|) +\n                                                                                                                                                                                    (|a1|) +\n                                                                                                                                                                                    (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) +\n                                                                                                                                                                                    (|a17|) +\n                                                                                                                                                                                    (|a18|) +\n                                                                                                                                                                                    (|a19|) +\n                                                                                                                                                                                    (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|) + (|a61|) + (|a62|) + (|a63|) + (|a64|) + (|a65|) + (|a66|) + (|a67|) + (|a68|) +\n                                                                                                                                                                                    (|a69|) +\n                                                                                                                                                                                    (|a70|) +\n                                                                                                                                                                                    (|a71|) +\n                                                                                                                                                                                    (|a72|) +\n                                                                                                                                                                                    (|a73|) +\n                                                                                                                                                                                    (|a74|) +\n                                                                                                                                                                                    (|a75|) +\n                                                                                                                                                                                    (|a76|) +\n                                                                                                                                                                                    (|a77|) +\n                                                                                                                                                                                    (|a78|) +\n                                                                                                                                                                                    (|a79|) +\n                                                                                                                                                                                    (|a80|) +\n                                                                                                                                                                                    (|a81|));\n                                                                                                                                                                           (|a82|) >=\n                                                                                                                                                                           0;\n                                                                                                                                                                           (|a82|)--) {\n                                                                                                                                                                        if ((|a81|) < (|a82|) &&\n                                                                                                                                                                                (|a81|);\n                                                                                                                                                                            !=\n                                                                                                                                                                            0)\n                                                                                                                                                                          a82 =\n                                                                                                                                                                              a81;\n                                                                                                                                                                        if ((|a81|) <\n                                                                                                                                                                            (|a82|))\n                                                                                                                                                                          break;\n                                                                                                                                                                        for ((|a83|) = (|d|) -\n                                                                                                                                                                                   ((|a0|) +\n                                                                                                                                                                                    (|a1|) +\n                                                                                                                                                                                    (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) +\n                                                                                                                                                                                    (|a17|) +\n                                                                                                                                                                                    (|a18|) +\n                                                                                                                                                                                    (|a19|) +\n                                                                                                                                                                                    (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|) + (|a61|) + (|a62|) + (|a63|) + (|a64|) + (|a65|) + (|a66|) + (|a67|) + (|a68|) +\n                                                                                                                                                                                    (|a69|) +\n                                                                                                                                                                                    (|a70|) +\n                                                                                                                                                                                    (|a71|) +\n                                                                                                                                                                                    (|a72|) +\n                                                                                                                                                                                    (|a73|) +\n                                                                                                                                                                                    (|a74|) +\n                                                                                                                                                                                    (|a75|) +\n                                                                                                                                                                                    (|a76|) +\n                                                                                                                                                                                    (|a77|) +\n                                                                                                                                                                                    (|a78|) +\n                                                                                                                                                                                    (|a79|) +\n                                                                                                                                                                                    (|a80|) +\n                                                                                                                                                                                    (|a81|) +\n                                                                                                                                                                                    (|a82|));\n                                                                                                                                                                             (|a83|) >=\n                                                                                                                                                                             0;\n                                                                                                                                                                             (|a83|)--) {\n                                                                                                                                                                          if ((|a82|) < (|a83|) &&\n                                                                                                                                                                                  (|a82|);\n                                                                                                                                                                              !=\n                                                                                                                                                                              0)\n                                                                                                                                                                            a83 =\n                                                                                                                                                                                a82;\n                                                                                                                                                                          if ((|a82|) <\n                                                                                                                                                                              (|a83|))\n                                                                                                                                                                            break;\n                                                                                                                                                                          for ((|a84|) =\n                                                                                                                                                                                   (|d|) -\n                                                                                                                                                                                   ((|a0|) +\n                                                                                                                                                                                    (|a1|) +\n                                                                                                                                                                                    (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) +\n                                                                                                                                                                                    (|a17|) +\n                                                                                                                                                                                    (|a18|) +\n                                                                                                                                                                                    (|a19|) +\n                                                                                                                                                                                    (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) +\n                                                                                                                                                                                    (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|) + (|a61|) + (|a62|) + (|a63|) + (|a64|) + (|a65|) + (|a66|) + (|a67|) + (|a68|) + (|a69|) + (|a70|) + (|a71|) + (|a72|) + (|a73|) + (|a74|) + (|a75|) + (|a76|) + (|a77|) + (|a78|) + (|a79|) +\n                                                                                                                                                                                    (|a80|) +\n                                                                                                                                                                                    (|a81|) +\n                                                                                                                                                                                    (|a82|) +\n                                                                                                                                                                                    (|a83|));\n                                                                                                                                                                               (|a84|) >=\n                                                                                                                                                                               0;\n                                                                                                                                                                               (|a84|)--) {\n                                                                                                                                                                            if ((|a83|) < (|a84|) &&\n                                                                                                                                                                                    (|a83|);\n                                                                                                                                                                                !=\n                                                                                                                                                                                0)\n                                                                                                                                                                              a84 =\n                                                                                                                                                                                  a83;\n                                                                                                                                                                            if ((|a83|) <\n                                                                                                                                                                                (|a84|))\n                                                                                                                                                                              break;\n                                                                                                                                                                            for ((|a85|) =\n                                                                                                                                                                                     (|d|) - ((|a0|) +\n                                                                                                                                                                                          (|a1|) +\n                                                                                                                                                                                          (|a2|) +\n                                                                                                                                                                                          (|a3|) +\n                                                                                                                                                                                          (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) +\n                                                                                                                                                                                          (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|) + (|a61|) +\n                                                                                                                                                                                          (|a62|) + (|a63|) + (|a64|) + (|a65|) + (|a66|) + (|a67|) + (|a68|) + (|a69|) + (|a70|) + (|a71|) + (|a72|) + (|a73|) +\n                                                                                                                                                                                          (|a74|) +\n                                                                                                                                                                                          (|a75|) +\n                                                                                                                                                                                          (|a76|) +\n                                                                                                                                                                                          (|a77|) +\n                                                                                                                                                                                          (|a78|) +\n                                                                                                                                                                                          (|a79|) +\n                                                                                                                                                                                          (|a80|) +\n                                                                                                                                                                                          (|a81|) +\n                                                                                                                                                                                          (|a82|) +\n                                                                                                                                                                                          (|a83|) +\n                                                                                                                                                                                          (|a84|));\n                                                                                                                                                                                 (|a85|) >=\n                                                                                                                                                                                 0;\n                                                                                                                                                                                 (|a85|)--) {\n                                                                                                                                                                              if ((|a84|) < (|a85|) &&\n                                                                                                                                                                                      (|a84|);\n                                                                                                                                                                                  !=\n                                                                                                                                                                                  0)\n                                                                                                                                                                                a85 =\n                                                                                                                                                                                    a84;\n                                                                                                                                                                              if ((|a84|) <\n                                                                                                                                                                                  (|a85|))\n                                                                                                                                                                                break;\n                                                                                                                                                                              for ((|a86|) =\n                                                                                                                                                                                       (|d|) -\n                                                                                                                                                                                       ((|a0|) +\n                                                                                                                                                                                        (|a1|) +\n                                                                                                                                                                                        (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) +\n                                                                                                                                                                                        (|a16|) +\n                                                                                                                                                                                        (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) +\n                                                                                                                                                                                        (|a49|) +\n                                                                                                                                                                                        (|a50|) +\n                                                                                                                                                                                        (|a51|) +\n                                                                                                                                                                                        (|a52|) +\n                                                                                                                                                                                        (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|) + (|a61|) + (|a62|) + (|a63|) +\n                                                                                                                                                                                        (|a64|) +\n                                                                                                                                                                                        (|a65|) +\n                                                                                                                                                                                        (|a66|) + (|a67|) + (|a68|) + (|a69|) + (|a70|) + (|a71|) + (|a72|) + (|a73|) + (|a74|) + (|a75|) + (|a76|) + (|a77|) + (|a78|) + (|a79|) + (|a80|) +\n                                                                                                                                                                                        (|a81|) +\n                                                                                                                                                                                        (|a82|) +\n                                                                                                                                                                                        (|a83|) +\n                                                                                                                                                                                        (|a84|) +\n                                                                                                                                                                                        (|a85|));\n                                                                                                                                                                                   (|a86|) >=\n                                                                                                                                                                                   0;\n                                                                                                                                                                                   (|a86|)--) {\n                                                                                                                                                                                if ((|a85|) < (|a86|) &&\n                                                                                                                                                                                        (|a85|);\n                                                                                                                                                                                    !=\n                                                                                                                                                                                    0)\n                                                                                                                                                                                  a86 =\n                                                                                                                                                                                      a85;\n                                                                                                                                                                                if ((|a85|) <\n                                                                                                                                                                                    (|a86|))\n                                                                                                                                                                                  break;\n                                                                                                                                                                                for ((|a87|) =\n                                                                                                                                                                                         (|d|) - ((|a0|) +\n                                                                                                                                                                                              (|a1|) +\n                                                                                                                                                                                              (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) +\n                                                                                                                                                                                              (|a15|) +\n                                                                                                                                                                                              (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) +\n                                                                                                                                                                                              (|a31|) +\n                                                                                                                                                                                              (|a32|) +\n                                                                                                                                                                                              (|a33|) +\n                                                                                                                                                                                              (|a34|) +\n                                                                                                                                                                                              (|a35|) +\n                                                                                                                                                                                              (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) + (|a43|) +\n                                                                                                                                                                                              (|a44|) +\n                                                                                                                                                                                              (|a45|) +\n                                                                                                                                                                                              (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|) + (|a61|) + (|a62|) + (|a63|) + (|a64|) + (|a65|) + (|a66|) + (|a67|) + (|a68|) + (|a69|) + (|a70|) + (|a71|) + (|a72|) + (|a73|) + (|a74|) + (|a75|) + (|a76|) + (|a77|) +\n                                                                                                                                                                                              (|a78|) +\n                                                                                                                                                                                              (|a79|) +\n                                                                                                                                                                                              (|a80|) +\n                                                                                                                                                                                              (|a81|) +\n                                                                                                                                                                                              (|a82|) +\n                                                                                                                                                                                              (|a83|) +\n                                                                                                                                                                                              (|a84|) +\n                                                                                                                                                                                              (|a85|) +\n                                                                                                                                                                                              (|a86|));\n                                                                                                                                                                                     (|a87|) >=\n                                                                                                                                                                                     0;\n                                                                                                                                                                                     (|a87|)--) {\n                                                                                                                                                                                  if ((|a86|) < (|a87|) &&\n                                                                                                                                                                                          (|a86|);\n                                                                                                                                                                                      !=\n                                                                                                                                                                                      0)\n                                                                                                                                                                                    a87 =\n                                                                                                                                                                                        a86;\n                                                                                                                                                                                  if ((|a86|) <\n                                                                                                                                                                                      (|a87|))\n                                                                                                                                                                                    break;\n                                                                                                                                                                                  for ((|a88|) =\n                                                                                                                                                                                           (|d|) - ((|a0|) +\n                                                                                                                                                                                                (|a1|) + (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) +\n                                                                                                                                                                                                (|a15|) +\n                                                                                                                                                                                                (|a16|) +\n                                                                                                                                                                                                (|a17|) +\n                                                                                                                                                                                                (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) +\n                                                                                                                                                                                                (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) +\n                                                                                                                                                                                                (|a53|) +\n                                                                                                                                                                                                (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|) + (|a61|) + (|a62|) + (|a63|) + (|a64|) + (|a65|) + (|a66|) + (|a67|) + (|a68|) + (|a69|) + (|a70|) + (|a71|) + (|a72|) + (|a73|) + (|a74|) + (|a75|) + (|a76|) + (|a77|) + (|a78|) + (|a79|) + (|a80|) + (|a81|) + (|a82|) + (|a83|) + (|a84|) + (|a85|) + (|a86|) +\n                                                                                                                                                                                                (|a87|));\n                                                                                                                                                                                       (|a88|) >=\n                                                                                                                                                                                       0;\n                                                                                                                                                                                       (|a88|)--) {\n                                                                                                                                                                                    if ((|a87|) < (|a88|) &&\n                                                                                                                                                                                            (|a87|);\n                                                                                                                                                                                        !=\n                                                                                                                                                                                        0)\n                                                                                                                                                                                      a88 =\n                                                                                                                                                                                          a87;\n                                                                                                                                                                                    if ((|a87|) <\n                                                                                                                                                                                        (|a88|))\n                                                                                                                                                                                      break;\n                                                                                                                                                                                    for ((|a89|) = (|d|) - ((|a0|) +\n                                                                                                                                                                                                    (|a1|) +\n                                                                                                                                                                                                    (|a2|) +\n                                                                                                                                                                                                    (|a3|) +\n                                                                                                                                                                                                    (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) +\n                                                                                                                                                                                                    (|a15|) +\n                                                                                                                                                                                                    (|a16|) +\n                                                                                                                                                                                                    (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) +\n                                                                                                                                                                                                    (|a30|) +\n                                                                                                                                                                                                    (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) + (|a43|) +\n                                                                                                                                                                                                    (|a44|) +\n                                                                                                                                                                                                    (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) +\n                                                                                                                                                                                                    (|a58|) +\n                                                                                                                                                                                                    (|a59|) + (|a60|) + (|a61|) + (|a62|) + (|a63|) + (|a64|) + (|a65|) + (|a66|) + (|a67|) + (|a68|) + (|a69|) + (|a70|) + (|a71|) +\n                                                                                                                                                                                                    (|a72|) +\n                                                                                                                                                                                                    (|a73|) + (|a74|) + (|a75|) + (|a76|) + (|a77|) + (|a78|) + (|a79|) + (|a80|) + (|a81|) + (|a82|) + (|a83|) + (|a84|) + (|a85|) +\n                                                                                                                                                                                                    (|a86|) +\n                                                                                                                                                                                                    (|a87|) +\n                                                                                                                                                                                                    (|a88|));\n                                                                                                                                                                                         (|a89|) >=\n                                                                                                                                                                                         0;\n                                                                                                                                                                                         (|a89|)--) {\n                                                                                                                                                                                      if ((|a88|) < (|a89|) &&\n                                                                                                                                                                                              (|a88|);\n                                                                                                                                                                                          !=\n                                                                                                                                                                                          0)\n                                                                                                                                                                                        a89 =\n                                                                                                                                                                                            a88;\n                                                                                                                                                                                      if ((|a88|) <\n                                                                                                                                                                                          (|a89|))\n                                                                                                                                                                                        break;\n                                                                                                                                                                                      for ((|a90|) =\n                                                                                                                                                                                               (|d|) - ((|a0|) +\n                                                                                                                                                                                                    (|a1|) +\n                                                                                                                                                                                                    (|a2|) +\n                                                                                                                                                                                                    (|a3|) +\n                                                                                                                                                                                                    (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) +\n                                                                                                                                                                                                    (|a15|) +\n                                                                                                                                                                                                    (|a16|) +\n                                                                                                                                                                                                    (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) +\n                                                                                                                                                                                                    (|a30|) +\n                                                                                                                                                                                                    (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) + (|a43|) +\n                                                                                                                                                                                                    (|a44|) +\n                                                                                                                                                                                                    (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) +\n                                                                                                                                                                                                    (|a58|) +\n                                                                                                                                                                                                    (|a59|) + (|a60|) + (|a61|) + (|a62|) + (|a63|) + (|a64|) + (|a65|) + (|a66|) + (|a67|) + (|a68|) + (|a69|) + (|a70|) + (|a71|) +\n                                                                                                                                                                                                    (|a72|) +\n                                                                                                                                                                                                    (|a73|) + (|a74|) + (|a75|) + (|a76|) + (|a77|) + (|a78|) + (|a79|) + (|a80|) + (|a81|) + (|a82|) + (|a83|) + (|a84|) + (|a85|) +\n                                                                                                                                                                                                    (|a86|) +\n                                                                                                                                                                                                    (|a87|) +\n                                                                                                                                                                                                    (|a88|) +\n                                                                                                                                                                                                    (|a89|));\n                                                                                                                                                                                           (|a90|) >=\n                                                                                                                                                                                           0;\n                                                                                                                                                                                           (|a90|)--) {\n                                                                                                                                                                                        if ((|a89|) < (|a90|) &&\n                                                                                                                                                                                                (|a89|);\n                                                                                                                                                                                            !=\n                                                                                                                                                                                            0)\n                                                                                                                                                                                          a90 =\n                                                                                                                                                                                              a89;\n                                                                                                                                                                                        if ((|a89|) <\n                                                                                                                                                                                            (|a90|))\n                                                                                                                                                                                          break;\n                                                                                                                                                                                        for ((|a91|) =\n                                                                                                                                                                                                 (|d|) - ((|a0|) +\n                                                                                                                                                                                                      (|a1|) + (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) +\n                                                                                                                                                                                                      (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) +\n                                                                                                                                                                                                      (|a28|) +\n                                                                                                                                                                                                      (|a29|) +\n                                                                                                                                                                                                      (|a30|) +\n                                                                                                                                                                                                      (|a31|) +\n                                                                                                                                                                                                      (|a32|) +\n                                                                                                                                                                                                      (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) +\n                                                                                                                                                                                                      (|a42|) +\n                                                                                                                                                                                                      (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) +\n                                                                                                                                                                                                      (|a57|) +\n                                                                                                                                                                                                      (|a58|) +\n                                                                                                                                                                                                      (|a59|) +\n                                                                                                                                                                                                      (|a60|) +\n                                                                                                                                                                                                      (|a61|) +\n                                                                                                                                                                                                      (|a62|) + (|a63|) + (|a64|) + (|a65|) + (|a66|) + (|a67|) + (|a68|) + (|a69|) + (|a70|) +\n                                                                                                                                                                                                      (|a71|) +\n                                                                                                                                                                                                      (|a72|) + (|a73|) + (|a74|) + (|a75|) + (|a76|) + (|a77|) + (|a78|) + (|a79|) + (|a80|) + (|a81|) + (|a82|) + (|a83|) + (|a84|) + (|a85|) +\n                                                                                                                                                                                                      (|a86|) +\n                                                                                                                                                                                                      (|a87|) +\n                                                                                                                                                                                                      (|a88|) +\n                                                                                                                                                                                                      (|a89|) +\n                                                                                                                                                                                                      (|a90|));\n                                                                                                                                                                                             (|a91|) >=\n                                                                                                                                                                                             0;\n                                                                                                                                                                                             (|a91|)--) {\n                                                                                                                                                                                          if ((|a90|) < (|a91|) &&\n                                                                                                                                                                                                  (|a90|);\n                                                                                                                                                                                              !=\n                                                                                                                                                                                              0)\n                                                                                                                                                                                            a91 =\n                                                                                                                                                                                                a90;\n                                                                                                                                                                                          if ((|a90|) <\n                                                                                                                                                                                              (|a91|))\n                                                                                                                                                                                            break;\n                                                                                                                                                                                          for ((|a92|) = (|d|) -\n                                                                                                                                                                                                     ((|a0|) +\n                                                                                                                                                                                                      (|a1|) +\n                                                                                                                                                                                                      (|a2|) +\n                                                                                                                                                                                                      (|a3|) +\n                                                                                                                                                                                                      (|a4|) +\n                                                                                                                                                                                                      (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) +\n                                                                                                                                                                                                      (|a40|) +\n                                                                                                                                                                                                      (|a41|) +\n                                                                                                                                                                                                      (|a42|) +\n                                                                                                                                                                                                      (|a43|) +\n                                                                                                                                                                                                      (|a44|) +\n                                                                                                                                                                                                      (|a45|) +\n                                                                                                                                                                                                      (|a46|) +\n                                                                                                                                                                                                      (|a47|) +\n                                                                                                                                                                                                      (|a48|) +\n                                                                                                                                                                                                      (|a49|) +\n                                                                                                                                                                                                      (|a50|) +\n                                                                                                                                                                                                      (|a51|) +\n                                                                                                                                                                                                      (|a52|) +\n                                                                                                                                                                                                      (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|) + (|a61|) + (|a62|) + (|a63|) + (|a64|) + (|a65|) + (|a66|) + (|a67|) + (|a68|) + (|a69|) + (|a70|) + (|a71|) + (|a72|) + (|a73|) + (|a74|) + (|a75|) + (|a76|) + (|a77|) + (|a78|) + (|a79|) + (|a80|) + (|a81|) + (|a82|) + (|a83|) + (|a84|) + (|a85|) +\n                                                                                                                                                                                                      (|a86|) +\n                                                                                                                                                                                                      (|a87|) +\n                                                                                                                                                                                                      (|a88|) +\n                                                                                                                                                                                                      (|a89|) +\n                                                                                                                                                                                                      (|a90|) +\n                                                                                                                                                                                                      (|a91|));\n                                                                                                                                                                                               (|a92|) >=\n                                                                                                                                                                                               0;\n                                                                                                                                                                                               (|a92|)--) {\n                                                                                                                                                                                            if ((|a91|) < (|a92|) &&\n                                                                                                                                                                                                    (|a91|);\n                                                                                                                                                                                                !=\n                                                                                                                                                                                                0)\n                                                                                                                                                                                              a92 =\n                                                                                                                                                                                                  a91;\n                                                                                                                                                                                            if ((|a91|) <\n                                                                                                                                                                                                (|a92|))\n                                                                                                                                                                                              break;\n                                                                                                                                                                                            for ((|a93|) = (|d|) -\n                                                                                                                                                                                                       ((|a0|) + (|a1|) + (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) +\n                                                                                                                                                                                                        (|a14|) +\n                                                                                                                                                                                                        (|a15|) +\n                                                                                                                                                                                                        (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) +\n                                                                                                                                                                                                        (|a27|) +\n                                                                                                                                                                                                        (|a28|) +\n                                                                                                                                                                                                        (|a29|) +\n                                                                                                                                                                                                        (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|) + (|a61|) + (|a62|) + (|a63|) + (|a64|) + (|a65|) + (|a66|) + (|a67|) + (|a68|) + (|a69|) + (|a70|) + (|a71|) +\n                                                                                                                                                                                                        (|a72|) +\n                                                                                                                                                                                                        (|a73|) +\n                                                                                                                                                                                                        (|a74|) +\n                                                                                                                                                                                                        (|a75|) +\n                                                                                                                                                                                                        (|a76|) +\n                                                                                                                                                                                                        (|a77|) + (|a78|) + (|a79|) + (|a80|) + (|a81|) + (|a82|) + (|a83|) + (|a84|) + (|a85|) + (|a86|) +\n                                                                                                                                                                                                        (|a87|) +\n                                                                                                                                                                                                        (|a88|) +\n                                                                                                                                                                                                        (|a89|) +\n                                                                                                                                                                                                        (|a90|) +\n                                                                                                                                                                                                        (|a91|) +\n                                                                                                                                                                                                        (|a92|));\n                                                                                                                                                                                                 (|a93|) >=\n                                                                                                                                                                                                 0;\n                                                                                                                                                                                                 (|a93|)--) {\n                                                                                                                                                                                              if ((|a92|) < (|a93|) &&\n                                                                                                                                                                                                      (|a92|);\n                                                                                                                                                                                                  !=\n                                                                                                                                                                                                  0)\n                                                                                                                                                                                                a93 =\n                                                                                                                                                                                                    a92;\n                                                                                                                                                                                              if ((|a92|) <\n                                                                                                                                                                                                  (|a93|))\n                                                                                                                                                                                                break;\n                                                                                                                                                                                              for ((|a94|) = (|d|) - ((|a0|) + (|a1|) + (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) +\n                                                                                                                                                                                                              (|a49|) +\n                                                                                                                                                                                                              (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|) + (|a61|) + (|a62|) + (|a63|) + (|a64|) + (|a65|) + (|a66|) + (|a67|) + (|a68|) + (|a69|) +\n                                                                                                                                                                                                              (|a70|) +\n                                                                                                                                                                                                              (|a71|) +\n                                                                                                                                                                                                              (|a72|) + (|a73|) + (|a74|) + (|a75|) + (|a76|) + (|a77|) + (|a78|) + (|a79|) + (|a80|) + (|a81|) + (|a82|) + (|a83|) + (|a84|) + (|a85|) +\n                                                                                                                                                                                                              (|a86|) +\n                                                                                                                                                                                                              (|a87|) +\n                                                                                                                                                                                                              (|a88|) +\n                                                                                                                                                                                                              (|a89|) +\n                                                                                                                                                                                                              (|a90|) +\n                                                                                                                                                                                                              (|a91|) +\n                                                                                                                                                                                                              (|a92|) +\n                                                                                                                                                                                                              (|a93|));\n                                                                                                                                                                                                   (|a94|) >=\n                                                                                                                                                                                                   0;\n                                                                                                                                                                                                   (|a94|)--) {\n                                                                                                                                                                                                if ((|a93|) < (|a94|) &&\n                                                                                                                                                                                                        (|a93|);\n                                                                                                                                                                                                    !=\n                                                                                                                                                                                                    0)\n                                                                                                                                                                                                  a94 =\n                                                                                                                                                                                                      a93;\n                                                                                                                                                                                                if ((|a93|) <\n                                                                                                                                                                                                    (|a94|))\n                                                                                                                                                                                                  break;\n                                                                                                                                                                                                for (\n                                                                                                                                                                                                    (|a95|) = (|d|) - ((|a0|) +\n                                                                                                                                                                                                               (|a1|) +\n                                                                                                                                                                                                               (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) +\n                                                                                                                                                                                                               (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) +\n                                                                                                                                                                                                               (|a39|) +\n                                                                                                                                                                                                               (|a40|) +\n                                                                                                                                                                                                               (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) +\n                                                                                                                                                                                                               (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|) + (|a61|) + (|a62|) + (|a63|) + (|a64|) + (|a65|) + (|a66|) + (|a67|) + (|a68|) + (|a69|) + (|a70|) + (|a71|) + (|a72|) + (|a73|) + (|a74|) + (|a75|) + (|a76|) + (|a77|) +\n                                                                                                                                                                                                               (|a78|) +\n                                                                                                                                                                                                               (|a79|) + (|a80|) + (|a81|) + (|a82|) + (|a83|) + (|a84|) + (|a85|) + (|a86|) + (|a87|) +\n                                                                                                                                                                                                               (|a88|) +\n                                                                                                                                                                                                               (|a89|) +\n                                                                                                                                                                                                               (|a90|) +\n                                                                                                                                                                                                               (|a91|) +\n                                                                                                                                                                                                               (|a92|) +\n                                                                                                                                                                                                               (|a93|) +\n                                                                                                                                                                                                               (|a94|));\n                                                                                                                                                                                                    (|a95|) >=\n                                                                                                                                                                                                    0;\n                                                                                                                                                                                                    (|a95|)--) {\n                                                                                                                                                                                                  if ((|a94|) < (|a95|) &&\n                                                                                                                                                                                                          (|a94|);\n                                                                                                                                                                                                      !=\n                                                                                                                                                                                                      0)\n                                                                                                                                                                                                    a95 =\n                                                                                                                                                                                                        a94;\n                                                                                                                                                                                                  if ((|a94|) <\n                                                                                                                                                                                                      (|a95|))\n                                                                                                                                                                                                    break;\n                                                                                                                                                                                                  for ((|a96|) = (|d|) - ((|a0|) +\n                                                                                                                                                                                                                  (|a1|) + (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) +\n                                                                                                                                                                                                                  (|a43|) +\n                                                                                                                                                                                                                  (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) +\n                                                                                                                                                                                                                  (|a57|) +\n                                                                                                                                                                                                                  (|a58|) +\n                                                                                                                                                                                                                  (|a59|) +\n                                                                                                                                                                                                                  (|a60|) +\n                                                                                                                                                                                                                  (|a61|) +\n                                                                                                                                                                                                                  (|a62|) + (|a63|) + (|a64|) + (|a65|) + (|a66|) + (|a67|) + (|a68|) + (|a69|) + (|a70|) + (|a71|) + (|a72|) + (|a73|) + (|a74|) + (|a75|) + (|a76|) + (|a77|) + (|a78|) + (|a79|) + (|a80|) +\n                                                                                                                                                                                                                  (|a81|) +\n                                                                                                                                                                                                                  (|a82|) +\n                                                                                                                                                                                                                  (|a83|) + (|a84|) + (|a85|) + (|a86|) + (|a87|) + (|a88|) + (|a89|) + (|a90|) + (|a91|) + (|a92|) + (|a93|) +\n                                                                                                                                                                                                                  (|a94|) +\n                                                                                                                                                                                                                  (|a95|));\n                                                                                                                                                                                                       (|a96|) >=\n                                                                                                                                                                                                       0;\n                                                                                                                                                                                                       (|a96|)--) {\n                                                                                                                                                                                                    if ((|a95|) < (|a96|) &&\n                                                                                                                                                                                                            (|a95|);\n                                                                                                                                                                                                        !=\n                                                                                                                                                                                                        0)\n                                                                                                                                                                                                      a96 =\n                                                                                                                                                                                                          a95;\n                                                                                                                                                                                                    if ((|a95|) <\n                                                                                                                                                                                                        (|a96|))\n                                                                                                                                                                                                      break;\n                                                                                                                                                                                                    for (\n                                                                                                                                                                                                        (|a97|) =\n                                                                                                                                                                                                            (|d|) -\n                                                                                                                                                                                                            ((|a0|) + (|a1|) + (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) +\n                                                                                                                                                                                                             (|a43|) +\n                                                                                                                                                                                                             (|a44|) +\n                                                                                                                                                                                                             (|a45|) +\n                                                                                                                                                                                                             (|a46|) +\n                                                                                                                                                                                                             (|a47|) +\n                                                                                                                                                                                                             (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) +\n                                                                                                                                                                                                             (|a57|) +\n                                                                                                                                                                                                             (|a58|) +\n                                                                                                                                                                                                             (|a59|) +\n                                                                                                                                                                                                             (|a60|) +\n                                                                                                                                                                                                             (|a61|) +\n                                                                                                                                                                                                             (|a62|) +\n                                                                                                                                                                                                             (|a63|) + (|a64|) + (|a65|) + (|a66|) + (|a67|) + (|a68|) + (|a69|) + (|a70|) + (|a71|) +\n                                                                                                                                                                                                             (|a72|) +\n                                                                                                                                                                                                             (|a73|) +\n                                                                                                                                                                                                             (|a74|) +\n                                                                                                                                                                                                             (|a75|) +\n                                                                                                                                                                                                             (|a76|) +\n                                                                                                                                                                                                             (|a77|) +\n                                                                                                                                                                                                             (|a78|) + (|a79|) + (|a80|) + (|a81|) + (|a82|) + (|a83|) + (|a84|) + (|a85|) + (|a86|) +\n                                                                                                                                                                                                             (|a87|) +\n                                                                                                                                                                                                             (|a88|) +\n                                                                                                                                                                                                             (|a89|) +\n                                                                                                                                                                                                             (|a90|) +\n                                                                                                                                                                                                             (|a91|) +\n                                                                                                                                                                                                             (|a92|) +\n                                                                                                                                                                                                             (|a93|) +\n                                                                                                                                                                                                             (|a94|) +\n                                                                                                                                                                                                             (|a95|) +\n                                                                                                                                                                                                             (|a96|));\n                                                                                                                                                                                                        (|a97|) >=\n                                                                                                                                                                                                        0;\n                                                                                                                                                                                                        (|a97|)--) {\n                                                                                                                                                                                                      if ((|a96|) < (|a97|) &&\n                                                                                                                                                                                                              (|a96|);\n                                                                                                                                                                                                          !=\n                                                                                                                                                                                                          0)\n                                                                                                                                                                                                        a97 =\n                                                                                                                                                                                                            a96;\n                                                                                                                                                                                                      if ((|a96|) <\n                                                                                                                                                                                                          (|a97|))\n                                                                                                                                                                                                        break;\n                                                                                                                                                                                                      for (\n                                                                                                                                                                                                          (|a98|) = (|d|) - ((|a0|) +\n                                                                                                                                                                                                                     (|a1|) +\n                                                                                                                                                                                                                     (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) +\n                                                                                                                                                                                                                     (|a12|) +\n                                                                                                                                                                                                                     (|a13|) +\n                                                                                                                                                                                                                     (|a14|) +\n                                                                                                                                                                                                                     (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) +\n                                                                                                                                                                                                                     (|a26|) +\n                                                                                                                                                                                                                     (|a27|) +\n                                                                                                                                                                                                                     (|a28|) +\n                                                                                                                                                                                                                     (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) +\n                                                                                                                                                                                                                     (|a40|) +\n                                                                                                                                                                                                                     (|a41|) +\n                                                                                                                                                                                                                     (|a42|) +\n                                                                                                                                                                                                                     (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) +\n                                                                                                                                                                                                                     (|a53|) +\n                                                                                                                                                                                                                     (|a54|) +\n                                                                                                                                                                                                                     (|a55|) +\n                                                                                                                                                                                                                     (|a56|) +\n                                                                                                                                                                                                                     (|a57|) +\n                                                                                                                                                                                                                     (|a58|) + (|a59|) + (|a60|) + (|a61|) + (|a62|) + (|a63|) + (|a64|) + (|a65|) + (|a66|) +\n                                                                                                                                                                                                                     (|a67|) +\n                                                                                                                                                                                                                     (|a68|) + (|a69|) + (|a70|) + (|a71|) + (|a72|) + (|a73|) + (|a74|) + (|a75|) + (|a76|) + (|a77|) + (|a78|) + (|a79|) + (|a80|) +\n                                                                                                                                                                                                                     (|a81|) +\n                                                                                                                                                                                                                     (|a82|) +\n                                                                                                                                                                                                                     (|a83|) + (|a84|) + (|a85|) + (|a86|) + (|a87|) + (|a88|) + (|a89|) + (|a90|) + (|a91|) + (|a92|) +\n                                                                                                                                                                                                                     (|a93|) +\n                                                                                                                                                                                                                     (|a94|) +\n                                                                                                                                                                                                                     (|a95|) +\n                                                                                                                                                                                                                     (|a96|) +\n                                                                                                                                                                                                                     (|a97|));\n                                                                                                                                                                                                          (|a98|) >=\n                                                                                                                                                                                                          0;\n                                                                                                                                                                                                          (|a98|)--) {\n                                                                                                                                                                                                        if ((|a97|) < (|a98|) &&\n                                                                                                                                                                                                                (|a97|);\n                                                                                                                                                                                                            !=\n                                                                                                                                                                                                            0)\n                                                                                                                                                                                                          a98 =\n                                                                                                                                                                                                              a97;\n                                                                                                                                                                                                        if ((|a97|) <\n                                                                                                                                                                                                            (|a98|))\n                                                                                                                                                                                                          break;\n                                                                                                                                                                                                        for ((|a99|) = (|d|) -\n                                                                                                                                                                                                                   ((|a0|) + (|a1|) + (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) +\n                                                                                                                                                                                                                    (|a12|) +\n                                                                                                                                                                                                                    (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) +\n                                                                                                                                                                                                                    (|a38|) +\n                                                                                                                                                                                                                    (|a39|) +\n                                                                                                                                                                                                                    (|a40|) +\n                                                                                                                                                                                                                    (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) +\n                                                                                                                                                                                                                    (|a59|) + (|a60|) + (|a61|) + (|a62|) + (|a63|) + (|a64|) + (|a65|) + (|a66|) + (|a67|) + (|a68|) + (|a69|) + (|a70|) + (|a71|) + (|a72|) + (|a73|) + (|a74|) + (|a75|) + (|a76|) + (|a77|) + (|a78|) + (|a79|) + (|a80|) + (|a81|) + (|a82|) + (|a83|) + (|a84|) + (|a85|) + (|a86|) + (|a87|) +\n                                                                                                                                                                                                                    (|a88|) +\n                                                                                                                                                                                                                    (|a89|) +\n                                                                                                                                                                                                                    (|a90|) +\n                                                                                                                                                                                                                    (|a91|) +\n                                                                                                                                                                                                                    (|a92|) +\n                                                                                                                                                                                                                    (|a93|) + (|a94|) + (|a95|) + (|a96|) + (|a97|) + (|a98|));\n                                                                                                                                                                                                             (|a99|) >=\n                                                                                                                                                                                                             0;\n                                                                                                                                                                                                             (|a99|)--) {\n                                                                                                                                                                                                          if ((|a98|) < (|a99|) &&\n                                                                                                                                                                                                                  (|a98|);\n                                                                                                                                                                                                              !=\n                                                                                                                                                                                                              0)\n                                                                                                                                                                                                            a99 =\n                                                                                                                                                                                                                a98;\n                                                                                                                                                                                                          if ((|a98|) <\n                                                                                                                                                                                                              (|a99|))\n                                                                                                                                                                                                            break;\n                                                                                                                                                                                                          (|a|)[0] =\n                                                                                                                                                                                                              (|a0|);\n                                                                                                                                                                                                          (|a|)[10] =\n                                                                                                                                                                                                              (|a10|);\n                                                                                                                                                                                                          (|a|)[20] =\n                                                                                                                                                                                                              (|a20|);\n                                                                                                                                                                                                          (|a|)[30] =\n                                                                                                                                                                                                              (|a30|);\n                                                                                                                                                                                                          (|a|)[40] =\n                                                                                                                                                                                                              (|a40|);\n                                                                                                                                                                                                          (|a|)[50] =\n                                                                                                                                                                                                              (|a50|);\n                                                                                                                                                                                                          (|a|)[60] =\n                                                                                                                                                                                                              (|a60|);\n                                                                                                                                                                                                          (|a|)[70] =\n                                                                                                                                                                                                              (|a70|);\n                                                                                                                                                                                                          (|a|)[80] =\n                                                                                                                                                                                                              (|a80|);\n                                                                                                                                                                                                          (|a|)[90] =\n                                                                                                                                                                                                              (|a90|);\n                                                                                                                                                                                                          (|a|)[1] =\n                                                                                                                                                                                                              (|a1|);\n                                                                                                                                                                                                          (|a|)[11] =\n                                                                                                                                                                                                              (|a11|);\n                                                                                                                                                                                                          (|a|)[21] =\n                                                                                                                                                                                                              (|a21|);\n                                                                                                                                                                                                          (|a|)[31] =\n                                                                                                                                                                                                              (|a31|);\n                                                                                                                                                                                                          (|a|)[41] =\n                                                                                                                                                                                                              (|a41|);\n                                                                                                                                                                                                          (|a|)[51] =\n                                                                                                                                                                                                              (|a51|);\n                                                                                                                                                                                                          (|a|)[61] =\n                                                                                                                                                                                                              (|a61|);\n                                                                                                                                                                                                          (|a|)[71] =\n                                                                                                                                                                                                              (|a71|);\n                                                                                                                                                                                                          (|a|)[81] =\n                                                                                                                                                                                                              (|a81|);\n                                                                                                                                                                                                          (|a|)[91] =\n                                                                                                                                                                                                              (|a91|);\n                                                                                                                                                                                                          (|a|)[2] =\n                                                                                                                                                                                                              (|a2|);\n                                                                                                                                                                                                          (|a|)[12] =\n                                                                                                                                                                                                              (|a12|);\n                                                                                                                                                                                                          (|a|)[22] =\n                                                                                                                                                                                                              (|a22|);\n                                                                                                                                                                                                          (|a|)[32] =\n                                                                                                                                                                                                              (|a32|);\n                                                                                                                                                                                                          (|a|)[42] =\n                                                                                                                                                                                                              (|a42|);\n                                                                                                                                                                                                          (|a|)[52] =\n                                                                                                                                                                                                              (|a52|);\n                                                                                                                                                                                                          (|a|)[62] =\n                                                                                                                                                                                                              (|a62|);\n                                                                                                                                                                                                          (|a|)[72] =\n                                                                                                                                                                                                              (|a72|);\n                                                                                                                                                                                                          (|a|)[82] =\n                                                                                                                                                                                                              (|a82|);\n                                                                                                                                                                                                          (|a|)[92] =\n                                                                                                                                                                                                              (|a92|);\n                                                                                                                                                                                                          (|a|)[3] =\n                                                                                                                                                                                                              (|a3|);\n                                                                                                                                                                                                          (|a|)[13] =\n                                                                                                                                                                                                              (|a13|);\n                                                                                                                                                                                                          (|a|)[23] =\n                                                                                                                                                                                                              (|a23|);\n                                                                                                                                                                                                          (|a|)[33] =\n                                                                                                                                                                                                              (|a33|);\n                                                                                                                                                                                                          (|a|)[43] =\n                                                                                                                                                                                                              (|a43|);\n                                                                                                                                                                                                          (|a|)[53] =\n                                                                                                                                                                                                              (|a53|);\n                                                                                                                                                                                                          (|a|)[63] =\n                                                                                                                                                                                                              (|a63|);\n                                                                                                                                                                                                          (|a|)[73] =\n                                                                                                                                                                                                              (|a73|);\n                                                                                                                                                                                                          (|a|)[83] =\n                                                                                                                                                                                                              (|a83|);\n                                                                                                                                                                                                          (|a|)[93] =\n                                                                                                                                                                                                              (|a93|);\n                                                                                                                                                                                                          (|a|)[4] =\n                                                                                                                                                                                                              (|a4|);\n                                                                                                                                                                                                          (|a|)[14] =\n                                                                                                                                                                                                              (|a14|);\n                                                                                                                                                                                                          (|a|)[24] =\n                                                                                                                                                                                                              (|a24|);\n                                                                                                                                                                                                          (|a|)[34] =\n                                                                                                                                                                                                              (|a34|);\n                                                                                                                                                                                                          (|a|)[44] =\n                                                                                                                                                                                                              (|a44|);\n                                                                                                                                                                                                          (|a|)[54] =\n                                                                                                                                                                                                              (|a54|);\n                                                                                                                                                                                                          (|a|)[64] =\n                                                                                                                                                                                                              (|a64|);\n                                                                                                                                                                                                          (|a|)[74] =\n                                                                                                                                                                                                              (|a74|);\n                                                                                                                                                                                                          (|a|)[84] =\n                                                                                                                                                                                                              (|a84|);\n                                                                                                                                                                                                          (|a|)[94] =\n                                                                                                                                                                                                              (|a94|);\n                                                                                                                                                                                                          (|a|)[5] =\n                                                                                                                                                                                                              (|a5|);\n                                                                                                                                                                                                          (|a|)[15] =\n                                                                                                                                                                                                              (|a15|);\n                                                                                                                                                                                                          (|a|)[25] =\n                                                                                                                                                                                                              (|a25|);\n                                                                                                                                                                                                          (|a|)[35] =\n                                                                                                                                                                                                              (|a35|);\n                                                                                                                                                                                                          (|a|)[45] =\n                                                                                                                                                                                                              (|a45|);\n                                                                                                                                                                                                          (|a|)[55] =\n                                                                                                                                                                                                              (|a55|);\n                                                                                                                                                                                                          (|a|)[65] =\n                                                                                                                                                                                                              (|a65|);\n                                                                                                                                                                                                          (|a|)[75] =\n                                                                                                                                                                                                              (|a75|);\n                                                                                                                                                                                                          (|a|)[85] =\n                                                                                                                                                                                                              (|a85|);\n                                                                                                                                                                                                          (|a|)[95] =\n                                                                                                                                                                                                              (|a95|);\n                                                                                                                                                                                                          (|a|)[6] =\n                                                                                                                                                                                                              (|a6|);\n                                                                                                                                                                                                          (|a|)[16] =\n                                                                                                                                                                                                              (|a16|);\n                                                                                                                                                                                                          (|a|)[26] =\n                                                                                                                                                                                                              (|a26|);\n                                                                                                                                                                                                          (|a|)[36] =\n                                                                                                                                                                                                              (|a36|);\n                                                                                                                                                                                                          (|a|)[46] =\n                                                                                                                                                                                                              (|a46|);\n                                                                                                                                                                                                          (|a|)[56] =\n                                                                                                                                                                                                              (|a56|);\n                                                                                                                                                                                                          (|a|)[66] =\n                                                                                                                                                                                                              (|a66|);\n                                                                                                                                                                                                          (|a|)[76] =\n                                                                                                                                                                                                              (|a76|);\n                                                                                                                                                                                                          (|a|)[86] =\n                                                                                                                                                                                                              (|a86|);\n                                                                                                                                                                                                          (|a|)[96] =\n                                                                                                                                                                                                              (|a96|);\n                                                                                                                                                                                                          (|a|)[7] =\n                                                                                                                                                                                                              (|a7|);\n                                                                                                                                                                                                          (|a|)[17] =\n                                                                                                                                                                                                              (|a17|);\n                                                                                                                                                                                                          (|a|)[27] =\n                                                                                                                                                                                                              (|a27|);\n                                                                                                                                                                                                          (|a|)[37] =\n                                                                                                                                                                                                              (|a37|);\n                                                                                                                                                                                                          (|a|)[47] =\n                                                                                                                                                                                                              (|a47|);\n                                                                                                                                                                                                          (|a|)[57] =\n                                                                                                                                                                                                              (|a57|);\n                                                                                                                                                                                                          (|a|)[67] =\n                                                                                                                                                                                                              (|a67|);\n                                                                                                                                                                                                          (|a|)[77] =\n                                                                                                                                                                                                              (|a77|);\n                                                                                                                                                                                                          (|a|)[87] =\n                                                                                                                                                                                                              (|a87|);\n                                                                                                                                                                                                          (|a|)[97] =\n                                                                                                                                                                                                              (|a97|);\n                                                                                                                                                                                                          (|a|)[8] =\n                                                                                                                                                                                                              (|a8|);\n                                                                                                                                                                                                          (|a|)[18] =\n                                                                                                                                                                                                              (|a18|);\n                                                                                                                                                                                                          (|a|)[28] =\n                                                                                                                                                                                                              (|a28|);\n                                                                                                                                                                                                          (|a|)[38] =\n                                                                                                                                                                                                              (|a38|);\n                                                                                                                                                                                                          (|a|)[48] =\n                                                                                                                                                                                                              (|a48|);\n                                                                                                                                                                                                          (|a|)[58] =\n                                                                                                                                                                                                              (|a58|);\n                                                                                                                                                                                                          (|a|)[68] =\n                                                                                                                                                                                                              (|a68|);\n                                                                                                                                                                                                          (|a|)[78] =\n                                                                                                                                                                                                              (|a78|);\n                                                                                                                                                                                                          (|a|)[88] =\n                                                                                                                                                                                                              (|a88|);\n                                                                                                                                                                                                          (|a|)[98] =\n                                                                                                                                                                                                              (|a98|);\n                                                                                                                                                                                                          (|a|)[9] =\n                                                                                                                                                                                                              (|a9|);\n                                                                                                                                                                                                          (|a|)[19] =\n                                                                                                                                                                                                              (|a19|);\n                                                                                                                                                                                                          (|a|)[29] =\n                                                                                                                                                                                                              (|a29|);\n                                                                                                                                                                                                          (|a|)[39] =\n                                                                                                                                                                                                              (|a39|);\n                                                                                                                                                                                                          (|a|)[49] =\n                                                                                                                                                                                                              (|a49|);\n                                                                                                                                                                                                          (|a|)[59] =\n                                                                                                                                                                                                              (|a59|);\n                                                                                                                                                                                                          (|a|)[69] =\n                                                                                                                                                                                                              (|a69|);\n                                                                                                                                                                                                          (|a|)[79] =\n                                                                                                                                                                                                              (|a79|);\n                                                                                                                                                                                                          (|a|)[89] =\n                                                                                                                                                                                                              (|a89|);\n                                                                                                                                                                                                          (|a|)[99] =\n                                                                                                                                                                                                              (|a99|);\n                                                                                                                                                                                                          fprintf(\n                                                                                                                                                                                                              (|fp|),\n                                                                                                                                                                                                              \"%lli=\",\n                                                                                                                                                                                                              (|d|));\n                                                                                                                                                                                                          printf(\n                                                                                                                                                                                                              \"%lli=\",\n                                                                                                                                                                                                              (|d|));\n                                                                                                                                                                                                          for (\n                                                                                                                                                                                                              (|b|) = 0;\n                                                                                                                                                                                                              (|b|) <\n                                                                                                                                                                                                              100;\n                                                                                                                                                                                                              (|b|)++) {\n                                                                                                                                                                                                            if ((|a|)[(|b|)] !=\n                                                                                                                                                                                                                0) {\n                                                                                                                                                                                                              fprintf(\n                                                                                                                                                                                                                  (|fp|),\n                                                                                                                                                                                                                  \"%lli+\",\n                                                                                                                                                                                                                  (|a|)[(|b|)]);\n                                                                                                                                                                                                              printf(\n                                                                                                                                                                                                                  \"%lli+\",\n                                                                                                                                                                                                                  (|a|)[(|b|)]);\n                                                                                                                                                                                                            }\n                                                                                                                                                                                                          }\n                                                                                                                                                                                                          fseek(\n                                                                                                                                                                                                              (|fp|),\n                                                                                                                                                                                                              -1,\n                                                                                                                                                                                                              SEEK_CUR);\n                                                                                                                                                                                                          fprintf(\n                                                                                                                                                                                                              (|fp|),\n                                                                                                                                                                                                              \" \\n\");\n                                                                                                                                                                                                          printf(\n                                                                                                                                                                                                              \"\\b \\n\");\n                                                                                                                                                                                                          (|c|)++;\n                                                                                                                                                                                                        }\n                                                                                                                                                                                                      }\n                                                                                                                                                                                                    }\n                                                                                                                                                                                                  }\n                                                                                                                                                                                                }\n                                                                                                                                                                                              }\n                                                                                                                                                                                            }\n                                                                                                                                                                                          }\n                                                                                                                                                                                        }\n                                                                                                                                                                                      }\n                                                                                                                                                                                    }\n                                                                                                                                                                                  }\n                                                                                                                                                                                }\n                                                                                                                                                                              }\n                                                                                                                                                                            }\n                                                                                                                                                                          }\n                                                                                                                                                                        }\n                                                                                                                                                                      }\n                                                                                                                                                                    }\n                                                                                                                                                                  }\n                                                                                                                                                                }\n                                                                                                                                                              }\n                                                                                                                                                            }\n                                                                                                                                                          }\n                                                                                                                                                        }\n                                                                                                                                                      }\n                                                                                                                                                    }\n                                                                                                                                                  }\n                                                                                                                                                }\n                                                                                                                                              }\n                                                                                                                                            }\n                                                                                                                                          }\n                                                                                                                                        }\n                                                                                                                                      }\n                                                                                                                                    }", "unbound_vals": [["(|a|)", 65], ["(|b|)", 65], ["(|d|)", 65], ["(|a0|)", 65], ["(|a1|)", 65], ["(|a2|)", 65], ["(|a3|)", 65], ["(|a4|)", 65], ["(|a5|)", 65], ["(|a6|)", 65], ["(|a7|)", 65], ["(|a8|)", 65], ["(|a9|)", 65], ["(|a10|)", 65], ["(|a11|)", 65], ["(|a12|)", 65], ["(|a13|)", 65], ["(|a14|)", 65], ["(|a15|)", 65], ["(|a16|)", 65], ["(|a17|)", 65], ["(|a18|)", 65], ["(|a19|)", 65], ["(|a20|)", 65], ["(|a21|)", 65], ["(|a22|)", 65], ["(|a23|)", 65], ["(|a24|)", 65], ["(|a25|)", 65], ["(|a26|)", 65], ["(|a27|)", 65], ["(|a28|)", 65], ["(|a29|)", 65], ["(|a30|)", 65], ["(|a31|)", 65], ["(|a32|)", 65], ["(|a33|)", 65], ["(|a34|)", 65], ["(|a35|)", 65], ["(|a36|)", 65], ["(|a37|)", 65], ["(|a38|)", 65], ["(|a39|)", 65], ["(|a40|)", 65], ["(|a41|)", 65], ["(|a42|)", 65], ["(|a43|)", 65], ["(|a44|)", 65], ["(|a45|)", 65], ["(|a46|)", 65], ["(|a47|)", 65], ["(|a48|)", 65], ["(|a49|)", 65], ["(|a50|)", 65], ["(|a51|)", 65], ["(|a52|)", 65], ["(|a53|)", 65], ["(|a54|)", 65], ["(|a55|)", 65], ["(|a56|)", 65], ["(|a57|)", 65], ["(|a58|)", 65], ["(|a59|)", 65], ["(|a60|)", 65], ["(|a61|)", 65], ["(|a62|)", 65], ["(|a63|)", 65], ["(|a64|)", 65], ["(|a65|)", 65], ["(|a66|)", 65], ["(|a67|)", 65], ["(|a68|)", 65], ["(|a69|)", 65], ["(|a70|)", 65], ["(|a71|)", 65], ["(|a72|)", 65], ["(|a73|)", 65], ["(|a74|)", 65], ["(|a75|)", 65], ["(|a76|)", 65], ["(|a77|)", 65], ["(|a78|)", 65], ["(|a79|)", 65], ["(|a80|)", 65], ["(|a81|)", 65], ["(|a82|)", 65], ["(|a83|)", 65], ["(|a84|)", 65], ["(|a85|)", 65], ["(|a86|)", 65], ["(|a87|)", 65], ["(|a88|)", 65], ["(|a89|)", 65], ["(|a90|)", 65], ["(|a91|)", 65], ["(|a92|)", 65], ["(|a93|)", 65], ["(|a94|)", 65], ["(|a95|)", 65], ["(|a96|)", 65], ["(|a97|)", 65], ["(|a98|)", 65], ["(|a99|)", 65], ["(|c|)", 65], ["(|fp|)", 65]], "includes": ["<stdio.h>"], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 684693912940441589, "ast_class": "BinaryOperator", "random": 0.0020867557271101456, "src_text": "(|a0|) +\n                                                                                                                                        (|a1|) +\n                                                                                                                                        (|a2|) +\n                                                                                                                                        (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|)", "unbound_vals": [["(|a0|)", 60], ["(|a1|)", 60], ["(|a2|)", 60], ["(|a3|)", 60], ["(|a4|)", 60], ["(|a5|)", 60], ["(|a6|)", 60], ["(|a7|)", 60], ["(|a8|)", 60]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "c7 45 fc 1f 00 00 00 e9 33 00 00 00", "hash": -8927455227018170975, "ast_class": "ReturnStmt", "random": 0.0020871401386586275, "src_text": "return 31", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOVL 31 (- (:EBP) 4)) (:JMP :ADDR))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 209165832548739884, "ast_class": "ImplicitCastExpr", "random": 0.0020876875730877487, "src_text": "(|terms|)[(|i|)]", "unbound_vals": [["(|terms|)", 2], ["(|i|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -7478516700997907138, "ast_class": "DeclRefExpr", "random": 0.0021059044862419274, "src_text": "(|a7|)", "unbound_vals": [["(|a7|)", 68]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -5590600982226091584, "ast_class": "CallExpr", "random": 0.0021429989153955997, "src_text": "(|digits|)((|n|))", "unbound_vals": [["(|n|)", 2]], "includes": null, "unbound_funs": [["(|digits|)", null, null, 1]], "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "8b 45 f4 03 45 e4 89 45 e4", "hash": 834566290497034983, "ast_class": "CompoundAssignOperator", "random": 0.0021451846504393357, "src_text": "(|s|) += (|j|)", "unbound_vals": [["(|s|)", 3], ["(|j|)", 3]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 12) :EAX) (:ADD (- (:EBP) 28) :EAX) (:MOV :EAX (- (:EBP) 28)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -7969415567878398476, "ast_class": "IntegerLiteral", "random": 0.002147331643914674, "src_text": "379", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -7229545762031886948, "ast_class": "IntegerLiteral", "random": 0.0021488073430201426, "src_text": "87592", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "c7 85 e8 37 ff ff 00 00 00 00 83 bd e8 37 ff ff 50 0f 8d 45 01 00 00 c7 85 e4 37 ff ff 00 00 00 00 83 bd e4 37 ff ff 50 0f 8d 15 01 00 00 8b 85 ec 37 ff ff 89 04 24 e8 f1 fc ff ff 88 c1 88 8d e3 37 ff ff 0f be c1 89 85 d8 37 ff ff e8 eb fc ff ff 8b 00 8b 95 d8 37 ff ff 0f b7 04 50 25 00 08 00 00 83 f8 00 0f 95 c1 80 f1 ff f6 c1 01 0f 85 05 00 00 00 e9 05 00 00 00 e9 af ff ff ff 8d 85 f0 9b ff ff 0f be 8d e3 37 ff ff 83 e9 30 8b 95 e4 37 ff ff 69 b5 e8 37 ff ff 40 01 00 00 01 f0 89 0c 90 8b 85 ec 37 ff ff 89 04 24 e8 7b fc ff ff 88 c1 88 8d e3 37 ff ff 0f be c1 89 85 d4 37 ff ff e8 75 fc ff ff 8b 00 8b 95 d4 37 ff ff 0f b7 04 50 25 00 08 00 00 83 f8 00 0f 84 48 00 00 00 8d 85 f0 9b ff ff 8b 8d e4 37 ff ff 69 95 e8 37 ff ff 40 01 00 00 89 c6 01 d6 6b 14 8e 0a 89 14 8e 0f be 8d e3 37 ff ff 83 e9 30 8b 95 e4 37 ff ff 69 b5 e8 37 ff ff 40 01 00 00 01 f0 03 0c 90 89 0c 90 e9 7a ff ff ff e9 00 00 00 00 8b 85 e4 37 ff ff 83 c0 01 89 85 e4 37 ff ff e9 de fe ff ff e9 00 00 00 00 8b 85 e8 37 ff ff 83 c0 01 89 85 e8 37 ff ff e9 ae fe ff ff", "hash": 1990648454318686567, "ast_class": "ForStmt", "random": 0.002153156864329153, "src_text": "for (int i = 0; i < 80; ++i)\n    for (int j = 0; j < 80; ++j) {\n      char ch;\n      while (!isdigit(ch = fgetc((|fp|))))\n        ;\n      (|matrix|)[i][j] = ch - '0';\n      while (isdigit(ch = fgetc((|fp|)))) {\n        (|matrix|)[i][j] *= 10;\n        (|matrix|)[i][j] += ch - '0';\n      }\n    }", "unbound_vals": [["(|matrix|)", 0], ["(|fp|)", 0]], "includes": ["<ctype.h>", "<stdio.h>"], "unbound_funs": null, "macros": null, "disasm": "((:MOVL 0 (- (:EBP) 51224)) (:CMPL 80 (- (:EBP) 51224)) (:JGE :ADDR) (:MOVL 0 (- (:EBP) 51228)) (:CMPL 80 (- (:EBP) 51228)) (:JGE :ADDR) (:MOV (- (:EBP) 51220) :EAX) (:MOV :EAX (:ESP)) (:CALL :MEMSET) (:MOV :AL :CL) (:MOV :CL (- (:EBP) 51229)) (:MOVSBL :CL :EAX) (:MOV :EAX (- (:EBP) 51240)) (:CALL :FGETC) (:MOV (:EAX) :EAX) (:MOV (- (:EBP) 51240) :EDX) (:MOVZWL (:EAX) :EAX) (:AND 2048 :EAX) (:CMP 0 :EAX) (:SETNE :CL) (:XOR 255 :CL) (:TEST 1 :CL) (:JNE :ADDR) (:JMP :ADDR) (:JMP :ADDR) (:LEA (- (:EBP) 25616) :EAX) (:MOVSBL (- (:EBP) 51229) :ECX) (:SUB 48 :ECX) (:MOV (- (:EBP) 51228) :EDX) (:IMUL 320 (- (:EBP) 51224) :ESI) (:ADD :ESI :EAX) (:MOV :ECX (:EAX)) (:MOV (- (:EBP) 51220) :EAX) (:MOV :EAX (:ESP)) (:CALL :MEMSET) (:MOV :AL :CL) (:MOV :CL (- (:EBP) 51229)) (:MOVSBL :CL :EAX) (:MOV :EAX (- (:EBP) 51244)) (:CALL :FGETC) (:MOV (:EAX) :EAX) (:MOV (- (:EBP) 51244) :EDX) (:MOVZWL (:EAX) :EAX) (:AND 2048 :EAX) (:CMP 0 :EAX) (:JE :ADDR) (:LEA (- (:EBP) 25616) :EAX) (:MOV (- (:EBP) 51228) :ECX) (:IMUL 320 (- (:EBP) 51224) :EDX) (:MOV :EAX :ESI) (:ADD :EDX :ESI) (:IMUL 10 (:ESI) :EDX) (:MOV :EDX (:ESI)) (:MOVSBL (- (:EBP) 51229) :ECX) (:SUB 48 :ECX) (:MOV (- (:EBP) 51228) :EDX) (:IMUL 320 (- (:EBP) 51224) :ESI) (:ADD :ESI :EAX) (:ADD (:EAX) :ECX) (:MOV :ECX (:EAX)) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 51228) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 51228)) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 51224) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 51224)) (:JMP :ADDR))", "types": [342363981814211588, -5849325953548989793, -1272965151017857640], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -4009904749941784931, "ast_class": "ParmVar", "random": 0.002159931963314321, "src_text": "UINT m", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [-6907056765200120000], "is_decl": true},
{"full_stmt": false, "binary_contents": "83 bd 0c f8 ff ff 01 0f 8e 0f 00 00 00 8b 85 18 f8 ff ff c1 e0 01 89 85 18 f8 ff ff", "hash": -9181433192858019964, "ast_class": "CompoundStmt", "random": 0.0021802308892571176, "src_text": "{\n      (|d2|) *= 2;\n    }", "unbound_vals": [["(|d2|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:CMPL 1 (- (:EBP) 2036)) (:JLE :ADDR) (:MOV (- (:EBP) 2024) :EAX) (:SHL 1 :EAX) (:MOV :EAX (- (:EBP) 2024)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 4036695202948232643, "ast_class": "CallExpr", "random": 0.002183045058120947, "src_text": "(|checkifprime|)((|n|))", "unbound_vals": [["(|n|)", 3]], "includes": null, "unbound_funs": [["(|checkifprime|)", null, null, 1]], "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 60302562134613802, "ast_class": "ImplicitCastExpr", "random": 0.002201167985682262, "src_text": "(|a7|)", "unbound_vals": [["(|a7|)", 80]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -4543719780286881293, "ast_class": "BinaryOperator", "random": 0.002207775877473561, "src_text": "(|a|) * (|a|)", "unbound_vals": [["(|a|)", 2]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -8030307267806993246, "ast_class": "ImplicitCastExpr", "random": 0.002227643986782546, "src_text": "(|a17|)", "unbound_vals": [["(|a17|)", 92]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 8506600786206377335, "ast_class": "BinaryOperator", "random": 0.002242681827764881, "src_text": "(|a9|) != (|a1|) && (|a9|) != (|a2|) && (|a9|) != (|a3|)", "unbound_vals": [["(|a1|)", 0], ["(|a2|)", 0], ["(|a3|)", 0], ["(|a9|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -8657549672398993659, "ast_class": "BinaryOperator", "random": 0.0022547210534408224, "src_text": "(|j|) = SIZE - 2", "unbound_vals": [["(|j|)", 0]], "includes": [], "unbound_funs": [], "macros": [["SIZE", "SIZE 80"]], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": null, "hash": -839146166271246304, "ast_class": "CompoundAssignOperator", "random": 0.00226348206159388, "src_text": "(|num|)[(|i|)] *= 2", "unbound_vals": [["(|num|)", 2], ["(|i|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "e8 eb fa ff ff 8d 0d f8 89 04 08 ba 80 96 98 00 f2 0f 10 05 f0 89 04 08 f2 0f 2a c8 f2 0f 5c 4d f0 f2 0f 11 4d f0", "hash": -7118341053312819676, "ast_class": "BinaryOperator", "random": 0.0022677044558194748, "src_text": "(|dtime|) = clock() - (|dtime|)", "unbound_vals": [["(|dtime|)", 0]], "includes": ["<time.h>"], "unbound_funs": null, "macros": null, "disasm": "((:CALL :PRINTF) (:LEA \"for N=%d: fast method %d, %.3lf sec\" :ECX) (:MOV 10000000 :EDX) (:MOVSD 1000000.0D0 :XMM0) (:CVTSI2SD :EAX :XMM1) (:SUBSD (- (:EBP) 16) :XMM1) (:MOVSD :XMM1 (- (:EBP) 16)))", "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": null, "hash": 7536872640416576559, "ast_class": "DeclStmt", "random": 0.0022739636708242195, "src_text": "int primes", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [-5849325953548989793], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -6501274921870017335, "ast_class": "BinaryOperator", "random": 0.0022784854260218257, "src_text": "(|a0|) +\n                                                                                               (|a1|) +\n                                                                                               (|a2|) +\n                                                                                               (|a3|) +\n                                                                                               (|a4|) +\n                                                                                               (|a5|) +\n                                                                                               (|a6|) +\n                                                                                               (|a7|) +\n                                                                                               (|a8|) +\n                                                                                               (|a9|) +\n                                                                                               (|a10|) +\n                                                                                               (|a11|) +\n                                                                                               (|a12|) +\n                                                                                               (|a13|) +\n                                                                                               (|a14|) +\n                                                                                               (|a15|) +\n                                                                                               (|a16|) +\n                                                                                               (|a17|) +\n                                                                                               (|a18|) +\n                                                                                               (|a19|) +\n                                                                                               (|a20|) +\n                                                                                               (|a21|)", "unbound_vals": [["(|a0|)", 42], ["(|a1|)", 42], ["(|a2|)", 42], ["(|a3|)", 42], ["(|a4|)", 42], ["(|a5|)", 42], ["(|a6|)", 42], ["(|a7|)", 42], ["(|a8|)", 42], ["(|a9|)", 42], ["(|a10|)", 42], ["(|a11|)", 42], ["(|a12|)", 42], ["(|a13|)", 42], ["(|a14|)", 42], ["(|a15|)", 42], ["(|a16|)", 42], ["(|a17|)", 42], ["(|a18|)", 42], ["(|a19|)", 42], ["(|a20|)", 42], ["(|a21|)", 42]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -4415679642314096426, "ast_class": "ImplicitCastExpr", "random": 0.0022793330052084393, "src_text": "-114", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -7846736381668500924, "ast_class": "ImplicitCastExpr", "random": 0.00228534457196794, "src_text": "329514", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -431496514613947607, "ast_class": "ImplicitCastExpr", "random": 0.0022889448259559853, "src_text": "calloc((|LIM|) + 1000, sizeof(bool))", "unbound_vals": [["(|LIM|)", 0]], "includes": ["<stdlib.h>"], "unbound_funs": [], "macros": [], "disasm": null, "types": [-5864957900383334482], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -8042790966044858453, "ast_class": "ImplicitCastExpr", "random": 0.0022929271935794304, "src_text": "(|tri|)[(|row|) + 1]", "unbound_vals": [["(|tri|)", 2], ["(|row|)", 2]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -6373108090325642881, "ast_class": "ImplicitCastExpr", "random": 0.002305598801376596, "src_text": "(|filtered|)", "unbound_vals": [["(|filtered|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -6079280416610493959, "ast_class": "CompoundStmt", "random": 0.0023075073534869484, "src_text": "{\n      (|sum|) = (|carry|) + (|n2|)->digits[(|j|)];\n      if ((|sum|) >= 10) {\n        (|sum|) -= 10;\n        (|carry|) = 1;\n      } else {\n        (|carry|) = 0;\n      }\n\n      (|n2|)->digits[(|j|)] = (|sum|);\n    }", "unbound_vals": [["(|n2|)", 3], ["(|carry|)", 2], ["(|sum|)", 2], ["(|j|)", 2]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -8030307267806993294, "ast_class": "ImplicitCastExpr", "random": 0.0023177101648269582, "src_text": "(|a17|)", "unbound_vals": [["(|a17|)", 44]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": null, "hash": -5855197642932133061, "ast_class": "CompoundStmt", "random": 0.002319735028564307, "src_text": "{\n  long long unsigned ns = 1, nn = (|n|);\n  while (nn > 1) {\n    ns++;\n    step(&nn;);\n  }\n  return ns;\n}", "unbound_vals": [["(|n|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [3456822550903822590], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -1174258130363383113, "ast_class": "ArraySubscriptExpr", "random": 0.0023227676116163165, "src_text": "(|d|)[(|b|) % 10]", "unbound_vals": [["(|b|)", 2], ["(|d|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "8b 55 f0 89 55 ec", "hash": -5518519871261654329, "ast_class": "BinaryOperator", "random": 0.002337205398582398, "src_text": "(|copy|) = (|i|)", "unbound_vals": [["(|i|)", 1], ["(|copy|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 16) :EDX) (:MOV :EDX (- (:EBP) 20)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 8195482112451330924, "ast_class": "IntegerLiteral", "random": 0.0023494173065239377, "src_text": "554022", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 1851680882254578129, "ast_class": "ArraySubscriptExpr", "random": 0.002359707841293246, "src_text": "(|tabSt|)[(|i|)][(|j|) + 1]", "unbound_vals": [["(|tabSt|)", 3], ["(|i|)", 3], ["(|j|)", 3]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "8b 4d f0 89 04 24 89 4c 24 04 e8 e7 fd ff ff 31 c9", "hash": 5778126969189765, "ast_class": "CallExpr", "random": 0.0023701461623510944, "src_text": "printf(\"%d\\n\", (|largest|))", "unbound_vals": [["(|largest|)", 0]], "includes": ["<stdio.h>"], "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 16) :ECX) (:MOV \"%d\n\" (:ESP)) (:MOV :ECX (+ (:ESP) 4)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:XOR :ECX :ECX))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 7199613423157638036, "ast_class": "ImplicitCastExpr", "random": 0.0023714556861227365, "src_text": "8581", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 1538968385903342580, "ast_class": "IntegerLiteral", "random": 0.0023873303415203884, "src_text": "1454", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -2137300303802879942, "ast_class": "InitListExpr", "random": 0.0024679933015719913, "src_text": "{-634, -356, 90, -207, 936, 622}", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -4105461295586172109, "ast_class": "DeclRefExpr", "random": 0.0024733490428137106, "src_text": "(|days|)", "unbound_vals": null, "includes": null, "unbound_funs": [["(|days|)", null, null, 2]], "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": null, "hash": 8135316171039748241, "ast_class": "BinaryOperator", "random": 0.002477354508103158, "src_text": "(|j|) = 1", "unbound_vals": [["(|j|)", 3]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -1290301985951446671, "ast_class": "BinaryOperator", "random": 0.002478194552180457, "src_text": "(|a0|) +\n                                                                           (|a1|) +\n                                                                           (|a2|) +\n                                                                           (|a3|) +\n                                                                           (|a4|) +\n                                                                           (|a5|) +\n                                                                           (|a6|) +\n                                                                           (|a7|) +\n                                                                           (|a8|) +\n                                                                           (|a9|) +\n                                                                           (|a10|) +\n                                                                           (|a11|) +\n                                                                           (|a12|) +\n                                                                           (|a13|) +\n                                                                           (|a14|) +\n                                                                           (|a15|) +\n                                                                           (|a16|) +\n                                                                           (|a17|) +\n                                                                           (|a18|) +\n                                                                           (|a19|) +\n                                                                           (|a20|) +\n                                                                           (|a21|) +\n                                                                           (|a22|) +\n                                                                           (|a23|) +\n                                                                           (|a24|) +\n                                                                           (|a25|) +\n                                                                           (|a26|) +\n                                                                           (|a27|) +\n                                                                           (|a28|) +\n                                                                           (|a29|)", "unbound_vals": [["(|a0|)", 32], ["(|a1|)", 32], ["(|a2|)", 32], ["(|a3|)", 32], ["(|a4|)", 32], ["(|a5|)", 32], ["(|a6|)", 32], ["(|a7|)", 32], ["(|a8|)", 32], ["(|a9|)", 32], ["(|a10|)", 32], ["(|a11|)", 32], ["(|a12|)", 32], ["(|a13|)", 32], ["(|a14|)", 32], ["(|a15|)", 32], ["(|a16|)", 32], ["(|a17|)", 32], ["(|a18|)", 32], ["(|a19|)", 32], ["(|a20|)", 32], ["(|a21|)", 32], ["(|a22|)", 32], ["(|a23|)", 32], ["(|a24|)", 32], ["(|a25|)", 32], ["(|a26|)", 32], ["(|a27|)", 32], ["(|a28|)", 32], ["(|a29|)", 32]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -5569127392715300490, "ast_class": "ImplicitCastExpr", "random": 0.002490911040727961, "src_text": "(|carry|)", "unbound_vals": [["(|carry|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -8760546753242027592, "ast_class": "ParmVar", "random": 0.002491009986853032, "src_text": "int d", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [-5849325953548989793], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": 6391291326818110770, "ast_class": "DeclRefExpr", "random": 0.0024919992227400156, "src_text": "(|qx|)", "unbound_vals": [["(|qx|)", 5]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -1845684029329409992, "ast_class": "IntegerLiteral", "random": 0.002510047514338254, "src_text": "4657", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -2345004820625317918, "ast_class": "ImplicitCastExpr", "random": 0.0025221001352225825, "src_text": "(|com|)", "unbound_vals": [["(|com|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": "c7 45 f4 00 00 00 00 31 c0 88 c1 81 7d f4 cd 04 00 00 88 8d e3 17 fe ff 0f 8d 21 00 00 00 8b 45 f4 8b 84 85 e4 17 fe ff 8b 4d f4 0f af 84 8d e4 17 fe ff 3b 45 e0 0f 9e c2 88 95 e3 17 fe ff 8a 85 e3 17 fe ff a8 01 0f 85 05 00 00 00 e9 f7 00 00 00 8b 45 f4 8b 84 85 e4 17 fe ff 89 45 e8 8b 45 f8 03 45 e8 83 e8 01 99 f7 7d e8 0f af 45 e8 2b 45 f8 89 45 f0 81 7d f0 10 27 00 00 0f 8d 23 00 00 00 8b 45 e8 8b 4d f0 0f af 84 8d 58 c7 fe ff 89 84 8d 58 c7 fe ff 8b 45 e8 03 45 f0 89 45 f0 e9 d0 ff ff ff 8b 45 f8 03 45 e8 83 e8 01 99 f7 7d e8 0f af 45 e8 2b 45 f8 89 45 f0 81 7d f0 10 27 00 00 0f 8d 22 00 00 00 8b 45 f0 8b 8c 85 98 63 ff ff 83 c1 01 89 8c 85 98 63 ff ff 8b 45 e8 03 45 f0 89 45 f0 e9 d1 ff ff ff 8b 45 e8 0f af 45 e8 89 45 e4 8b 45 f8 03 45 e4 83 e8 01 99 f7 7d e4 0f af 45 e4 2b 45 f8 89 45 f0 81 7d f0 10 27 00 00 0f 8d 1c 00 00 00 8b 45 f0 c7 84 85 58 c7 fe ff 00 00 00 00 8b 45 e4 03 45 f0 89 45 f0 e9 d7 ff ff ff e9 00 00 00 00 8b 45 f4 83 c0 01 89 45 f4 e9 be fe ff ff", "hash": 103037115853843064, "ast_class": "CompoundStmt", "random": 0.0025319535394833226, "src_text": "{\n      (|p|) = (|primes|)[(|j|)];\n      for ((|k|) = (((|i|) + (|p|) - 1) / (|p|)) * (|p|) - (|i|); (|k|) < 10000; (|k|) += (|p|))\n        (|S|)[(|k|)] *= (|p|);\n      for ((|k|) = (((|i|) + (|p|) - 1) / (|p|)) * (|p|) - (|i|); (|k|) < 10000; (|k|) += (|p|))\n        (|A|)[(|k|)]++;\n      (|q|) = (|p|) * (|p|);\n      for ((|k|) = (((|i|) + (|q|) - 1) / (|q|)) * (|q|) - (|i|); (|k|) < 10000; (|k|) += (|q|))\n        (|S|)[(|k|)] = 0;\n    }", "unbound_vals": [["(|i|)", 2], ["(|j|)", 2], ["(|k|)", 2], ["(|p|)", 2], ["(|q|)", 2], ["(|A|)", 2], ["(|S|)", 2], ["(|primes|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOVL 0 (- (:EBP) 12)) (:XOR :EAX :EAX) (:MOV :AL :CL) (:CMPL 1229 (- (:EBP) 12)) (:MOV :CL (- (:EBP) 124957)) (:JGE :ADDR) (:MOV (- (:EBP) 12) :EAX) (:MOV (- (:EBP) 124956) :EAX) (:MOV (- (:EBP) 12) :ECX) (:IMUL (- (:EBP) 124956) :EAX) (:CMP (- (:EBP) 32) :EAX) (:SETLE :DL) (:MOV :DL (- (:EBP) 124957)) (:MOV (- (:EBP) 124957) :AL) (:TEST 1 :AL) (:JNE :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 12) :EAX) (:MOV (- (:EBP) 124956) :EAX) (:MOV :EAX (- (:EBP) 24)) (:MOV (- (:EBP) 8) :EAX) (:ADD (- (:EBP) 24) :EAX) (:SUB 1 :EAX) (:CLTD) (:IDIVL (- (:EBP) 24)) (:IMUL (- (:EBP) 24) :EAX) (:SUB (- (:EBP) 8) :EAX) (:MOV :EAX (- (:EBP) 16)) (:CMPL 10000 (- (:EBP) 16)) (:JGE :ADDR) (:MOV (- (:EBP) 24) :EAX) (:MOV (- (:EBP) 16) :ECX) (:IMUL (- (:EBP) 80040) :EAX) (:MOV :EAX (- (:EBP) 80040)) (:MOV (- (:EBP) 24) :EAX) (:ADD (- (:EBP) 16) :EAX) (:MOV :EAX (- (:EBP) 16)) (:JMP :ADDR) (:MOV (- (:EBP) 8) :EAX) (:ADD (- (:EBP) 24) :EAX) (:SUB 1 :EAX) (:CLTD) (:IDIVL (- (:EBP) 24)) (:IMUL (- (:EBP) 24) :EAX) (:SUB (- (:EBP) 8) :EAX) (:MOV :EAX (- (:EBP) 16)) (:CMPL 10000 (- (:EBP) 16)) (:JGE :ADDR) (:MOV (- (:EBP) 16) :EAX) (:MOV (- (:EBP) 40040) :ECX) (:ADD 1 :ECX) (:MOV :ECX (- (:EBP) 40040)) (:MOV (- (:EBP) 24) :EAX) (:ADD (- (:EBP) 16) :EAX) (:MOV :EAX (- (:EBP) 16)) (:JMP :ADDR) (:MOV (- (:EBP) 24) :EAX) (:IMUL (- (:EBP) 24) :EAX) (:MOV :EAX (- (:EBP) 28)) (:MOV (- (:EBP) 8) :EAX) (:ADD (- (:EBP) 28) :EAX) (:SUB 1 :EAX) (:CLTD) (:IDIVL (- (:EBP) 28)) (:IMUL (- (:EBP) 28) :EAX) (:SUB (- (:EBP) 8) :EAX) (:MOV :EAX (- (:EBP) 16)) (:CMPL 10000 (- (:EBP) 16)) (:JGE :ADDR) (:MOV (- (:EBP) 16) :EAX) (:MOVL 0 (- (:EBP) 80040)) (:MOV (- (:EBP) 28) :EAX) (:ADD (- (:EBP) 16) :EAX) (:MOV :EAX (- (:EBP) 16)) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 12) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 12)) (:JMP :ADDR))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 4061615334567753844, "ast_class": "DeclRefExpr", "random": 0.002536481778852462, "src_text": "(|tot|)", "unbound_vals": [["(|tot|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -7746479153524481060, "ast_class": "ImplicitCastExpr", "random": 0.0025367829947984255, "src_text": "261823", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -7367881187976554137, "ast_class": "BinaryOperator", "random": 0.0025904834141560196, "src_text": "(|i|) * (|p|)", "unbound_vals": [["(|i|)", 2], ["(|p|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 2502844832949164150, "ast_class": "BinaryOperator", "random": 0.002619624387337427, "src_text": "(|lim|) * sizeof(int)", "unbound_vals": [["(|lim|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [-5849325953548989793], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -4416567151393619636, "ast_class": "ImplicitCastExpr", "random": 0.0026248968190720756, "src_text": "-106", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -6576351238872490962, "ast_class": "InitListExpr", "random": 0.002629200343896687, "src_text": "{78, 502, 781, -832, 713, 836}", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -2485088059561782937, "ast_class": "DeclRefExpr", "random": 0.0026334306733828416, "src_text": "(|l_u64Sum|)", "unbound_vals": [["(|l_u64Sum|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -4953567395249243093, "ast_class": "ParmVar", "random": 0.0026368380597640018, "src_text": "u p", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [-5926351236391496716], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": -8834287685858380482, "ast_class": "IntegerLiteral", "random": 0.002643066750649181, "src_text": "275", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -5933794788197396835, "ast_class": "ImplicitCastExpr", "random": 0.002643568435770627, "src_text": "(|a6|)", "unbound_vals": [["(|a6|)", 98]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "c7 45 f0 00 00 00 00 81 7d f0 88 13 00 00 0f 8d 3c 00 00 00 8b 45 f0 89 04 24 e8 e5 fe ff ff 83 f8 00 0f 84 15 00 00 00 8b 45 f0 8b 4d f4 89 ca 83 c2 01 89 55 f4 89 04 8d 30 a0 04 08 e9 00 00 00 00 8b 45 f0 83 c0 01 89 45 f0 e9 b7 ff ff ff", "hash": -7031119226612981841, "ast_class": "ForStmt", "random": 0.0026570267091250432, "src_text": "for (int i = 0; i < 5000; i++) {\n    if ((|isPrime|)(i)) {\n      (|prime|)[(|count|)++] = i;\n    }\n  }", "unbound_vals": [["(|prime|)", 2], ["(|count|)", 0]], "includes": null, "unbound_funs": [["(|isPrime|)", null, null, 1]], "macros": null, "disasm": "((:MOVL 0 (- (:EBP) 16)) (:CMPL 5000 (- (:EBP) 16)) (:JGE :ADDR) (:MOV (- (:EBP) 16) :EAX) (:MOV :EAX (:ESP)) (:CALL :ISPRIME) (:CMP 0 :EAX) (:JE :ADDR) (:MOV (- (:EBP) 16) :EAX) (:MOV (- (:EBP) 12) :ECX) (:MOV :ECX :EDX) (:ADD 1 :EDX) (:MOV :EDX (- (:EBP) 12)) (:MOV :EAX (+ (:ECX) 134520880)) (:JMP :ADDR) (:MOV (- (:EBP) 16) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 16)) (:JMP :ADDR))", "types": [-5849325953548989793], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -3658596223607658557, "ast_class": "BinaryOperator", "random": 0.0026610609882510294, "src_text": "(|j|) = 0", "unbound_vals": [["(|j|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 3611277151398644612, "ast_class": "IntegerLiteral", "random": 0.0026851194952086654, "src_text": "506331", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 3636966127809749550, "ast_class": "ImplicitCastExpr", "random": 0.0026853368363620733, "src_text": "sizeof(\"ten\") - 1", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 2394258941573234803, "ast_class": "BinaryOperator", "random": 0.0026856282521048325, "src_text": "(|a29|) < (|a30|)", "unbound_vals": [["(|a29|)", 31], ["(|a30|)", 31]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -8760049577312299472, "ast_class": "CallExpr", "random": 0.0026986523276768537, "src_text": "abs((|Tri|)[(|i|)].PointA.x * ((|Tri|)[(|i|)].PointB.y - 0) +\n                 (|Tri|)[(|i|)].PointB.x * (0 - (|Tri|)[(|i|)].PointA.y))", "unbound_vals": [["(|i|)", 1], ["(|Tri|)", 1]], "includes": ["<stdlib.h>"], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -2423974184284418352, "ast_class": "InitListExpr", "random": 0.002700824616623798, "src_text": "{-886, 454, 747, 806, 190, 231}", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 5023990134744206743, "ast_class": "CallExpr", "random": 0.002707578643512898, "src_text": "(|log10|)(3.0)", "unbound_vals": null, "includes": null, "unbound_funs": [["(|log10|)", null, null, 1]], "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -7717318974029722618, "ast_class": "Var", "random": 0.0027294262670314318, "src_text": "unsigned long long i", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [3456822550903822590], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": -194922357368476075, "ast_class": "DeclRefExpr", "random": 0.0027338118267452582, "src_text": "(|sqrlen3|)", "unbound_vals": [["(|sqrlen3|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": null, "hash": -1185596239409447485, "ast_class": "BinaryOperator", "random": 0.002734259258939775, "src_text": "(|e|) = 0", "unbound_vals": [["(|e|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": null, "hash": -6765715561903593985, "ast_class": "IfStmt", "random": 0.0027512326204895965, "src_text": "if ((|f|)((|n|) * (|n|))) {\n      printf(\"%lu\\n\", (|n|));\n      break;\n    }", "unbound_vals": [["(|n|)", 1]], "includes": ["<stdio.h>"], "unbound_funs": [["(|f|)", false, false, 1]], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 3322379804059545833, "ast_class": "DeclRefExpr", "random": 0.0027520255898690893, "src_text": "(|repeat|)", "unbound_vals": [["(|repeat|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 3666670070726252300, "ast_class": "ImplicitCastExpr", "random": 0.0027704936157206816, "src_text": "551890", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 7200557905908702650, "ast_class": "BinaryOperator", "random": 0.0027909528263134753, "src_text": "(|c|)[(|e|)] != (|d|)[(|e|)]", "unbound_vals": [["(|d|)", 1], ["(|c|)", 1], ["(|e|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -8667482666584026680, "ast_class": "BinaryOperator", "random": 0.0027991028964833298, "src_text": "(|i|) < 101", "unbound_vals": [["(|i|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -929434843997904995, "ast_class": "BinaryOperator", "random": 0.0028121744129628867, "src_text": "((|n|) * (3 * (|n|) - 1)) >> 1", "unbound_vals": [["(|n|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 923869787088190477, "ast_class": "BinaryOperator", "random": 0.0028150986196278094, "src_text": "((|ntothen_|) * (|n|)) % 10000000000UL", "unbound_vals": [["(|n|)", 2], ["(|ntothen_|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 942706108786248907, "ast_class": "DeclRefExpr", "random": 0.00281783570408356, "src_text": "(|a26|)", "unbound_vals": [["(|a26|)", 33]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 1092848222318667972, "ast_class": "BinaryOperator", "random": 0.002826065509789255, "src_text": "(|d|) % (|n|)", "unbound_vals": [["(|d|)", 1], ["(|n|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 5594020934684006101, "ast_class": "Var", "random": 0.0028387970739721657, "src_text": "rem", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [-5849325953548989793], "is_decl": true},
{"full_stmt": true, "binary_contents": "55 89 e5 83 ec 28 c7 45 fc 00 00 00 00 c7 45 f4 00 00 00 00 c7 45 f0 00 00 00 00 e8 40 fe ff ff c7 45 f8 00 00 00 00 81 7d f8 40 42 0f 00 0f 8d 1c 00 00 00 8b 45 f8 c7 04 85 28 a0 04 08 00 00 00 00 8b 45 f8 83 c0 01 89 45 f8 e9 d7 ff ff ff c7 45 f8 02 00 00 00 81 7d f8 40 42 0f 00 0f 8d 58 00 00 00 8b 45 f8 89 04 24 e8 a1 fe ff ff 89 45 ec 8b 45 ec 3b 45 f4 0f 8e 2b 00 00 00 8d 05 f0 87 04 08 8b 4d ec 89 4d f4 8b 4d f8 89 4d f0 8b 4d f8 8b 55 f4 89 04 24 89 4c 24 04 89 54 24 08 e8 8a fc ff ff 89 45 e8 e9 00 00 00 00 8b 45 f8 83 c0 01 89 45 f8 e9 9b ff ff ff c7 45 f8 00 00 00 00 81 7d f8 40 42 0f 00 0f 8d 1c 00 00 00 8b 45 f8 c7 04 85 28 a0 04 08 00 00 00 00 8b 45 f8 83 c0 01 89 45 f8 e9 d7 ff ff ff c7 05 24 a0 04 08 01 00 00 00 8b 45 f0 89 04 24 e8 0f fe ff ff 8d 0d 0b 88 04 08 89 0c 24 89 44 24 04 e8 1d fc ff ff 31 c9 89 45 e4 89 c8 83 c4 28 5d c3", "hash": 4379509950398345530, "ast_class": "Function", "random": 0.00284218802237024, "src_text": "int main() {\n  int i, longest = 0, with = 0, x;\n  (|init_divsum|)();\n\n  for (i = 0; i < LIMIT; i++)\n    (|t|)[i] = 0;\n  for (i = 2; i < LIMIT; i++) {\n    x = (|check_chain|)(i);\n    if (x > longest) {\n      longest = x;\n      with = i;\n      printf(\"%u yields chain length %u\\n\", i, longest);\n    }\n  }\n\n  for (i = 0; i < LIMIT; i++)\n    (|t|)[i] = 0;\n  (|trace_flag|) = 1;\n  printf(\"%d\\n\", (|check_chain|)(with));\n\n  return 0;\n}", "unbound_vals": [["(|t|)", 1], ["(|trace_flag|)", 1]], "includes": ["<stdio.h>"], "unbound_funs": [["(|init_divsum|)", true, null, 0], ["(|check_chain|)", null, null, 1]], "macros": [["LIMIT", "LIMIT 1000000"]], "disasm": "((:PUSH :EBP) (:MOV :ESP :EBP) (:SUB 40 :ESP) (:MOVL 0 (- (:EBP) 4)) (:MOVL 0 (- (:EBP) 12)) (:MOVL 0 (- (:EBP) 16)) (:CALL :INIT_DIVSUM) (:MOVL 0 (- (:EBP) 8)) (:CMPL 1000000 (- (:EBP) 8)) (:JGE :ADDR) (:MOV (- (:EBP) 8) :EAX) (:MOVL 0 (+ (:EAX) 134520872)) (:MOV (- (:EBP) 8) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 8)) (:JMP :ADDR) (:MOVL 2 (- (:EBP) 8)) (:CMPL 1000000 (- (:EBP) 8)) (:JGE :ADDR) (:MOV (- (:EBP) 8) :EAX) (:MOV :EAX (:ESP)) (:CALL :CHECK_CHAIN) (:MOV :EAX (- (:EBP) 20)) (:MOV (- (:EBP) 20) :EAX) (:CMP (- (:EBP) 12) :EAX) (:JLE :ADDR) (:LEA \"%u yields chain length %u\n\" :EAX) (:MOV (- (:EBP) 20) :ECX) (:MOV :ECX (- (:EBP) 12)) (:MOV (- (:EBP) 8) :ECX) (:MOV :ECX (- (:EBP) 16)) (:MOV (- (:EBP) 8) :ECX) (:MOV (- (:EBP) 12) :EDX) (:MOV \"%u yields chain length %u\n\" (:ESP)) (:MOV :ECX (+ (:ESP) 4)) (:MOV :EDX (+ (:ESP) 8)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:MOV \"%u yields chain length %u\n\" (- (:EBP) 24)) (:JMP :ADDR) (:MOV (- (:EBP) 8) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 8)) (:JMP :ADDR) (:MOVL 0 (- (:EBP) 8)) (:CMPL 1000000 (- (:EBP) 8)) (:JGE :ADDR) (:MOV (- (:EBP) 8) :EAX) (:MOVL 0 (+ (:EAX) 134520872)) (:MOV (- (:EBP) 8) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 8)) (:JMP :ADDR) (:MOVL 1 134520868) (:MOV (- (:EBP) 16) :EAX) (:MOV :EAX (:ESP)) (:CALL :CHECK_CHAIN) (:LEA \"%d\n\" :ECX) (:MOV \"%d\n\" (:ESP)) (:MOV :EAX (+ (:ESP) 4)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:XOR \"%d\n\" :ECX) (:MOV :EAX (- (:EBP) 28)) (:MOV :ECX :EAX) (:ADD 40 :ESP) (:POP :EBP) (:RET))", "types": [-5849325953548989793], "is_decl": true},
{"full_stmt": false, "binary_contents": "8b 45 f8 83 e0 01 83 f8 00 0f 85 09 00 00 00 c6 45 ff 00 e9 a4 00 00 00", "hash": 4014038315941017602, "ast_class": "CompoundStmt", "random": 0.002855871737454274, "src_text": "{\n    return false;\n  }", "unbound_vals": null, "includes": ["<stdbool.h>"], "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 8) :EAX) (:AND 1 :EAX) (:CMP 0 :EAX) (:JNE :ADDR) (:MOVB 0 (- (:EBP) 1)) (:JMP :ADDR))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 4269261623413699969, "ast_class": "DeclRefExpr", "random": 0.0028604218290262384, "src_text": "(|prime2|)", "unbound_vals": [["(|prime2|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -8945338752437822467, "ast_class": "DeclRefExpr", "random": 0.002872946971390289, "src_text": "(|a43|)", "unbound_vals": [["(|a43|)", 68]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -6564075273005044994, "ast_class": "StringLiteral", "random": 0.002891240048398802, "src_text": "\"SUM: %d\\n\"", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": "8b 45 fc 0f af 45 f8 c7 04 85 28 a0 04 08 01 00 00 00 8b 45 f8 83 c0 01 89 45 f8 e9 ce ff ff ff e9 00 00 00 00", "hash": 4992166607241292540, "ast_class": "BinaryOperator", "random": 0.0028962546618527263, "src_text": "(|p|)[(|i|) * (|j|)] = 1", "unbound_vals": [["(|p|)", 2], ["(|i|)", 0], ["(|j|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 4) :EAX) (:IMUL (- (:EBP) 8) :EAX) (:MOVL 1 (+ (:EAX) 134520872)) (:MOV (- (:EBP) 8) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 8)) (:JMP :ADDR) (:JMP :ADDR))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 2305005556353152337, "ast_class": "ImplicitCastExpr", "random": 0.002945983208152647, "src_text": "(|a4|)", "unbound_vals": [["(|a4|)", 88]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 6322845878844410825, "ast_class": "ImplicitCastExpr", "random": 0.002954109068502464, "src_text": "(|n|).s1", "unbound_vals": [["(|n|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 8867643929258842436, "ast_class": "IntegerLiteral", "random": 0.0029819393386577575, "src_text": "238050", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -5411193722244108903, "ast_class": "ArraySubscriptExpr", "random": 0.0030204838118542687, "src_text": "(|result|)[(|i|)]", "unbound_vals": [["(|i|)", 0], ["(|result|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 4059572420663415292, "ast_class": "BinaryOperator", "random": 0.0030226676218522153, "src_text": "2 * (|k|) * ((|m|) * (|n|) + (|m|) * (|m|)) <= MAX", "unbound_vals": [["(|m|)", 1], ["(|n|)", 1], ["(|k|)", 1]], "includes": null, "unbound_funs": null, "macros": [["MAX", "MAX 2000000"]], "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 3328248021001400078, "ast_class": "DeclRefExpr", "random": 0.003052223767611273, "src_text": "(|mb|)", "unbound_vals": [["(|mb|)", 3]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 2518009354563555536, "ast_class": "DeclRefExpr", "random": 0.0030591954920714537, "src_text": "(|a51|)", "unbound_vals": [["(|a51|)", 60]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -3633173374768330963, "ast_class": "UnaryOperator", "random": 0.0030623365400170854, "src_text": "-944", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": null, "hash": 8071199737677847077, "ast_class": "IfStmt", "random": 0.0030822506499037505, "src_text": "if ((|a75|) < (|a76|) &&\n                                                                                                                                                                    (|a75|);", "unbound_vals": [["(|a75|)", 77], ["(|a76|)", 77]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": null, "hash": 1949434919065262536, "ast_class": "UnaryOperator", "random": 0.003096246700046268, "src_text": "(|f|)--", "unbound_vals": [["(|f|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 5066850803880997746, "ast_class": "ImplicitCastExpr", "random": 0.0031004686476723275, "src_text": "(|temp|) / (long)(|pow|)(10, (int)(|log10|)((|temp|)))", "unbound_vals": [["(|temp|)", 5]], "includes": null, "unbound_funs": [["(|pow|)", null, null, 2], ["(|log10|)", null, null, 1]], "macros": null, "disasm": null, "types": [-6857659793473511817, -5849325953548989793], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -5044220351997016526, "ast_class": "ImplicitCastExpr", "random": 0.0031022332558292565, "src_text": "(|arrNumbers|)", "unbound_vals": [["(|arrNumbers|)", 3]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -6268959239818266718, "ast_class": "IntegerLiteral", "random": 0.0031028421247006888, "src_text": "581", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 3906912320151692075, "ast_class": "BinaryOperator", "random": 0.0031197970585117307, "src_text": "(|i|) % 5ULL", "unbound_vals": [["(|i|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "c6 85 f5 fe ff ff 00", "hash": 1987053377630733891, "ast_class": "BinaryOperator", "random": 0.0031242161367976973, "src_text": "(|s|)[1] = '\\0'", "unbound_vals": [["(|s|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOVB 0 (- (:EBP) 267)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -3910160485876307090, "ast_class": "IntegerLiteral", "random": 0.0031298768331784466, "src_text": "4517", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 4526655839580099604, "ast_class": "Var", "random": 0.003131847189728143, "src_text": "unsigned c", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [6059612999785877620], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": -7968527482051094608, "ast_class": "IntegerLiteral", "random": 0.0031679819647206786, "src_text": "360", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": null, "hash": -3460194478036422393, "ast_class": "DeclStmt", "random": 0.0031714353358711644, "src_text": "int i, j, x, y", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [-5849325953548989793], "is_decl": null},
{"full_stmt": true, "binary_contents": "8b 45 f4 8b 40 04 89 e1 89 01 c7 41 08 00 00 00 00 c7 41 04 00 00 00 00 e8 d0 fd ff ff 89 15 2c a0 04 08 a3 28 a0 04 08 8d 05 f0 86 04 08", "hash": 1314950018050089220, "ast_class": "BinaryOperator", "random": 0.0032163612313629297, "src_text": "(|max|) = strtoull((|argv|)[1], NULL, 0)", "unbound_vals": [["(|max|)", 3], ["(|argv|)", 2]], "includes": ["<stdlib.h>"], "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 12) :EAX) (:MOV (+ (:EAX) 4) :EAX) (:MOV :ESP :ECX) (:MOV :EAX (:ECX)) (:MOVL 0 (+ (:ECX) 8)) (:MOVL 0 (+ (:ECX) 4)) (:CALL :__LIBC_START_MAIN) (:MOV :EDX 134520876) (:MOV :EAX 134520872) (:LEA \"%llu\n\" :EAX))", "types": [-6534947291467637091], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -7883649131570687185, "ast_class": "BinaryOperator", "random": 0.0032176304455728832, "src_text": "(|j|) < 80", "unbound_vals": [["(|j|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -3475880640284923109, "ast_class": "ImplicitCastExpr", "random": 0.003219181907436086, "src_text": "(|isNot|)", "unbound_vals": [["(|isNot|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 5285199104873155442, "ast_class": "BinaryOperator", "random": 0.003222650428810092, "src_text": "(|a0|) +\n                                                                                                                                         (|a1|) +\n                                                                                                                                         (|a2|) +\n                                                                                                                                         (|a3|) +\n                                                                                                                                         (|a4|) +\n                                                                                                                                         (|a5|) +\n                                                                                                                                         (|a6|) +\n                                                                                                                                         (|a7|) +\n                                                                                                                                         (|a8|) +\n                                                                                                                                         (|a9|) +\n                                                                                                                                         (|a10|) +\n                                                                                                                                         (|a11|) +\n                                                                                                                                         (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|)", "unbound_vals": [["(|a0|)", 63], ["(|a1|)", 63], ["(|a2|)", 63], ["(|a3|)", 63], ["(|a4|)", 63], ["(|a5|)", 63], ["(|a6|)", 63], ["(|a7|)", 63], ["(|a8|)", 63], ["(|a9|)", 63], ["(|a10|)", 63], ["(|a11|)", 63], ["(|a12|)", 63], ["(|a13|)", 63], ["(|a14|)", 63], ["(|a15|)", 63], ["(|a16|)", 63], ["(|a17|)", 63], ["(|a18|)", 63], ["(|a19|)", 63], ["(|a20|)", 63], ["(|a21|)", 63], ["(|a22|)", 63], ["(|a23|)", 63], ["(|a24|)", 63], ["(|a25|)", 63], ["(|a26|)", 63], ["(|a27|)", 63], ["(|a28|)", 63], ["(|a29|)", 63], ["(|a30|)", 63], ["(|a31|)", 63], ["(|a32|)", 63], ["(|a33|)", 63], ["(|a34|)", 63], ["(|a35|)", 63], ["(|a36|)", 63], ["(|a37|)", 63], ["(|a38|)", 63], ["(|a39|)", 63], ["(|a40|)", 63], ["(|a41|)", 63], ["(|a42|)", 63]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 3504591879082702133, "ast_class": "ImplicitCastExpr", "random": 0.003246921378894485, "src_text": "(|n|) * (3 * (|n|) - 1) / 2", "unbound_vals": [["(|n|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 655884483652932623, "ast_class": "Var", "random": 0.003264864584041849, "src_text": "long long unsigned int best_area", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [3456822550903822590], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": -6816074963306163532, "ast_class": "DeclRefExpr", "random": 0.0032812573355048835, "src_text": "(|a35|)", "unbound_vals": [["(|a35|)", 74]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -4631016643444404766, "ast_class": "ImplicitCastExpr", "random": 0.0033160649014328802, "src_text": "(|a33|)", "unbound_vals": [["(|a33|)", 94]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -9174739146039150368, "ast_class": "BinaryOperator", "random": 0.0033326359740237788, "src_text": "sizeof(\"ninety\") - 1", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 6864329348173500291, "ast_class": "Var", "random": 0.0033424352214942443, "src_text": "unsigned long ntothen_ = 1", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [-4865021300304785594], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": 7453250097293257241, "ast_class": "BinaryOperator", "random": 0.003353551371759078, "src_text": "(|a0|) +\n                                                                                                                                                                      (|a1|) +\n                                                                                                                                                                      (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) +\n                                                                                                                                                                      (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|)", "unbound_vals": [["(|a0|)", 77], ["(|a1|)", 77], ["(|a2|)", 77], ["(|a3|)", 77], ["(|a4|)", 77], ["(|a5|)", 77], ["(|a6|)", 77], ["(|a7|)", 77], ["(|a8|)", 77], ["(|a9|)", 77], ["(|a10|)", 77], ["(|a11|)", 77], ["(|a12|)", 77], ["(|a13|)", 77], ["(|a14|)", 77], ["(|a15|)", 77], ["(|a16|)", 77], ["(|a17|)", 77], ["(|a18|)", 77], ["(|a19|)", 77], ["(|a20|)", 77], ["(|a21|)", 77], ["(|a22|)", 77], ["(|a23|)", 77], ["(|a24|)", 77], ["(|a25|)", 77], ["(|a26|)", 77], ["(|a27|)", 77], ["(|a28|)", 77], ["(|a29|)", 77], ["(|a30|)", 77], ["(|a31|)", 77], ["(|a32|)", 77], ["(|a33|)", 77], ["(|a34|)", 77], ["(|a35|)", 77], ["(|a36|)", 77], ["(|a37|)", 77], ["(|a38|)", 77], ["(|a39|)", 77], ["(|a40|)", 77], ["(|a41|)", 77], ["(|a42|)", 77], ["(|a43|)", 77], ["(|a44|)", 77], ["(|a45|)", 77], ["(|a46|)", 77], ["(|a47|)", 77], ["(|a48|)", 77], ["(|a49|)", 77], ["(|a50|)", 77], ["(|a51|)", 77], ["(|a52|)", 77], ["(|a53|)", 77], ["(|a54|)", 77], ["(|a55|)", 77], ["(|a56|)", 77], ["(|a57|)", 77], ["(|a58|)", 77]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": null, "hash": 5584033095445089800, "ast_class": "DeclStmt", "random": 0.003354849769163337, "src_text": "long long n", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [-6252000326173323660], "is_decl": false},
{"full_stmt": true, "binary_contents": null, "hash": -8200599944802435868, "ast_class": "ForStmt", "random": 0.003358380341790257, "src_text": "for ((|j|) = 2; (|j|) <= SS; ++(|j|))\n        (|c|)[(|i|)] += (|tri|)[(|row|) + (|j|)][(|tpos|)[(|i|)]] > (|tri|)[(|row|) + (|j|)][(|tpos|)[(|i|)] + 1]\n                    ? (|tri|)[(|row|) + (|j|)][(|tpos|)[(|i|)]]\n                    : (|tri|)[(|row|) + (|j|)][++(|tpos|)[(|i|)]]", "unbound_vals": [["(|tri|)", 2], ["(|row|)", 2], ["(|i|)", 1], ["(|j|)", 1], ["(|c|)", 1], ["(|tpos|)", 1]], "includes": [], "unbound_funs": [], "macros": [["SS", "SS 2 "]], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 2860558395204275804, "ast_class": "BinaryOperator", "random": 0.003359136549398234, "src_text": "(|a0|) +\n                                                                                                                              (|a1|) +\n                                                                                                                              (|a2|) +\n                                                                                                                              (|a3|) +\n                                                                                                                              (|a4|) +\n                                                                                                                              (|a5|) +\n                                                                                                                              (|a6|) +\n                                                                                                                              (|a7|) +\n                                                                                                                              (|a8|) +\n                                                                                                                              (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|)", "unbound_vals": [["(|a0|)", 57], ["(|a1|)", 57], ["(|a2|)", 57], ["(|a3|)", 57], ["(|a4|)", 57], ["(|a5|)", 57], ["(|a6|)", 57], ["(|a7|)", 57], ["(|a8|)", 57], ["(|a9|)", 57], ["(|a10|)", 57], ["(|a11|)", 57], ["(|a12|)", 57], ["(|a13|)", 57], ["(|a14|)", 57], ["(|a15|)", 57], ["(|a16|)", 57], ["(|a17|)", 57], ["(|a18|)", 57], ["(|a19|)", 57], ["(|a20|)", 57], ["(|a21|)", 57], ["(|a22|)", 57]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 1003886319608606683, "ast_class": "DeclRefExpr", "random": 0.003375810977929272, "src_text": "(|a72|)", "unbound_vals": [["(|a72|)", 74]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 409735551214502142, "ast_class": "BinaryOperator", "random": 0.003392306534928946, "src_text": "(|a0|) +\n                                                                                                                                                                           (|a1|) + (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) +\n                                                                                                                                                                           (|a19|) +\n                                                                                                                                                                           (|a20|) +\n                                                                                                                                                                           (|a21|) +\n                                                                                                                                                                           (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) +\n                                                                                                                                                                           (|a33|) +\n                                                                                                                                                                           (|a34|) +\n                                                                                                                                                                           (|a35|)", "unbound_vals": [["(|a0|)", 80], ["(|a1|)", 80], ["(|a2|)", 80], ["(|a3|)", 80], ["(|a4|)", 80], ["(|a5|)", 80], ["(|a6|)", 80], ["(|a7|)", 80], ["(|a8|)", 80], ["(|a9|)", 80], ["(|a10|)", 80], ["(|a11|)", 80], ["(|a12|)", 80], ["(|a13|)", 80], ["(|a14|)", 80], ["(|a15|)", 80], ["(|a16|)", 80], ["(|a17|)", 80], ["(|a18|)", 80], ["(|a19|)", 80], ["(|a20|)", 80], ["(|a21|)", 80], ["(|a22|)", 80], ["(|a23|)", 80], ["(|a24|)", 80], ["(|a25|)", 80], ["(|a26|)", 80], ["(|a27|)", 80], ["(|a28|)", 80], ["(|a29|)", 80], ["(|a30|)", 80], ["(|a31|)", 80], ["(|a32|)", 80], ["(|a33|)", 80], ["(|a34|)", 80], ["(|a35|)", 80]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 5210191250899843252, "ast_class": "ImplicitCastExpr", "random": 0.0034027565066150345, "src_text": "\"es\"", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -1703844675841624650, "ast_class": "ImplicitCastExpr", "random": 0.003405858969191433, "src_text": "(|ips|)", "unbound_vals": [["(|ips|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -1138914846726110892, "ast_class": "ParmVar", "random": 0.0034177414113146787, "src_text": "int i", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [-5849325953548989793], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": -7094175083828167319, "ast_class": "ParenExpr", "random": 0.003419048151076076, "src_text": "((|known|) = (|c_table|)[(|seq|)[(|j|)]])", "unbound_vals": [["(|c_table|)", 2], ["(|seq|)", 2], ["(|j|)", 2], ["(|known|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "c7 45 f8 01 00 00 00 81 7d f8 d0 07 00 00 0f 8d f3 00 00 00 c7 45 f4 01 00 00 00 81 7d f4 d0 07 00 00 0f 8d cc 00 00 00 c7 45 e8 00 00 00 00 c7 45 f0 01 00 00 00 8b 45 f0 3b 45 f8 0f 8f 4f 00 00 00 c7 45 ec 01 00 00 00 8b 45 ec 3b 45 f4 0f 8f 29 00 00 00 8b 45 f8 2b 45 f0 83 c0 01 8b 4d f4 2b 4d ec 83 c1 01 0f af c1 03 45 e8 89 45 e8 8b 45 ec 83 c0 01 89 45 ec e9 cb ff ff ff e9 00 00 00 00 8b 45 f0 83 c0 01 89 45 f0 e9 a5 ff ff ff b8 b0 7c 1e 00 3b 45 e8 0f 8d 30 00 00 00 81 7d e8 80 84 1e 00 0f 8d 23 00 00 00 8d 05 c0 86 04 08 8b 4d f8 0f af 4d f4 8b 55 e8 89 04 24 89 4c 24 04 89 54 24 08 e8 e0 fd ff ff 89 45 e4 81 7d e8 80 84 1e 00 0f 8e 05 00 00 00 e9 13 00 00 00 e9 00 00 00 00 8b 45 f4 83 c0 01 89 45 f4 e9 27 ff ff ff e9 00 00 00 00 8b 45 f8 83 c0 01 89 45 f8 e9 00 ff ff ff 8d 05 c9 86 04 08", "hash": -8522320425947929306, "ast_class": "ForStmt", "random": 0.0034486773208545207, "src_text": "for ((|i|) = 1; (|i|) < 2000; (|i|)++)\n    for ((|j|) = 1; (|j|) < 2000; (|j|)++) {\n      (|n|) = 0;\n      for ((|x|) = 1; (|x|) <= (|i|); (|x|)++)\n        for ((|y|) = 1; (|y|) <= (|j|); (|y|)++)\n          (|n|) += (long)((|i|) - (|x|) + 1) * ((|j|) - (|y|) + 1);\n\n      if (N < (|n|) && (|n|) < M)\n        printf(\"\\n%d  %ld\", (|i|) * (|j|), (|n|));\n      if ((|n|) > M)\n        break;\n    }", "unbound_vals": [["(|x|)", 0], ["(|y|)", 0], ["(|i|)", 0], ["(|j|)", 0], ["(|n|)", 0]], "includes": ["<stdio.h>"], "unbound_funs": null, "macros": [["M", "M 2000000"], ["N", "N 1998000"]], "disasm": "((:MOVL 1 (- (:EBP) 8)) (:CMPL 2000 (- (:EBP) 8)) (:JGE :ADDR) (:MOVL 1 (- (:EBP) 12)) (:CMPL 2000 (- (:EBP) 12)) (:JGE :ADDR) (:MOVL 0 (- (:EBP) 24)) (:MOVL 1 (- (:EBP) 16)) (:MOV (- (:EBP) 16) :EAX) (:CMP (- (:EBP) 8) :EAX) (:JG :ADDR) (:MOVL 1 (- (:EBP) 20)) (:MOV (- (:EBP) 20) :EAX) (:CMP (- (:EBP) 12) :EAX) (:JG :ADDR) (:MOV (- (:EBP) 8) :EAX) (:SUB (- (:EBP) 16) :EAX) (:ADD 1 :EAX) (:MOV (- (:EBP) 12) :ECX) (:SUB (- (:EBP) 20) :ECX) (:ADD 1 :ECX) (:IMUL :ECX :EAX) (:ADD (- (:EBP) 24) :EAX) (:MOV :EAX (- (:EBP) 24)) (:MOV (- (:EBP) 20) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 20)) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 16) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 16)) (:JMP :ADDR) (:MOV 1998000 :EAX) (:CMP (- (:EBP) 24) :EAX) (:JGE :ADDR) (:CMPL 2000000 (- (:EBP) 24)) (:JGE :ADDR) (:LEA \"\n%d  %ld\" :EAX) (:MOV (- (:EBP) 8) :ECX) (:IMUL (- (:EBP) 12) :ECX) (:MOV (- (:EBP) 24) :EDX) (:MOV \"\n%d  %ld\" (:ESP)) (:MOV :ECX (+ (:ESP) 4)) (:MOV :EDX (+ (:ESP) 8)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:MOV \"\n%d  %ld\" (- (:EBP) 28)) (:CMPL 2000000 (- (:EBP) 24)) (:JLE :ADDR) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 12) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 12)) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 8) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 8)) (:JMP :ADDR) (:LEA \"\n\n  %d\" :EAX))", "types": [-6857659793473511817], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -9097869674115309759, "ast_class": "UnaryOperator", "random": 0.003483109476235313, "src_text": "-1", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -3716943328795471916, "ast_class": "IntegerLiteral", "random": 0.00349212872939364, "src_text": "869", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 8467359555358076930, "ast_class": "DeclRefExpr", "random": 0.003495547351439754, "src_text": "(|a77|)", "unbound_vals": [["(|a77|)", 86]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -4694762747337260746, "ast_class": "BinaryOperator", "random": 0.0035003264041252313, "src_text": "(|a0|) +\n                                                                                                                                                                                    (|a1|) +\n                                                                                                                                                                                    (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) +\n                                                                                                                                                                                    (|a17|) +\n                                                                                                                                                                                    (|a18|) +\n                                                                                                                                                                                    (|a19|) +\n                                                                                                                                                                                    (|a20|)", "unbound_vals": [["(|a0|)", 82], ["(|a1|)", 82], ["(|a2|)", 82], ["(|a3|)", 82], ["(|a4|)", 82], ["(|a5|)", 82], ["(|a6|)", 82], ["(|a7|)", 82], ["(|a8|)", 82], ["(|a9|)", 82], ["(|a10|)", 82], ["(|a11|)", 82], ["(|a12|)", 82], ["(|a13|)", 82], ["(|a14|)", 82], ["(|a15|)", 82], ["(|a16|)", 82], ["(|a17|)", 82], ["(|a18|)", 82], ["(|a19|)", 82], ["(|a20|)", 82]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "8b 4d f8 89 04 24 89 4c 24 04 e8 a7 fd ff ff 31 c9", "hash": 1188450683255281928, "ast_class": "CallExpr", "random": 0.0035120042723482126, "src_text": "printf(\"%d\\n\", (|primes|)[SIZE - 1])", "unbound_vals": [["(|primes|)", 0]], "includes": ["<stdio.h>"], "unbound_funs": null, "macros": [["SIZE", "SIZE 10001"]], "disasm": "((:MOV (- (:EBP) 8) :ECX) (:MOV \"%d\n\" (:ESP)) (:MOV :ECX (+ (:ESP) 4)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:XOR :ECX :ECX))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": "a1 8c a0 04 08 8b 0d 88 a0 04 08 83 c1 3c 83 d0 00 89 0d 88 a0 04 08 a3 8c a0 04 08", "hash": -310206176372419413, "ast_class": "CompoundAssignOperator", "random": 0.0035292819191180547, "src_text": "(|num|) += 60", "unbound_vals": [["(|num|)", 3]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV 134520972 :EAX) (:MOV 134520968 :ECX) (:ADD 60 :ECX) (:ADC 0 :EAX) (:MOV :ECX 134520968) (:MOV :EAX 134520972))", "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "55 89 e5 83 ec 28 c7 45 fc 00 00 00 00 c7 05 d0 26 06 08 02 00 00 00 a1 d0 26 06 08 0f af 05 d0 26 06 08 3d a0 86 01 00 0f 8d 72 00 00 00 a1 d0 26 06 08 80 3c 05 28 a0 04 08 00 0f 85 48 00 00 00 a1 d0 26 06 08 0f af 05 d0 26 06 08 a3 c8 26 06 08 81 3d c8 26 06 08 a0 86 01 00 0f 8d 22 00 00 00 a1 c8 26 06 08 c6 04 05 28 a0 04 08 01 a1 d0 26 06 08 03 05 c8 26 06 08 a3 c8 26 06 08 e9 ce ff ff ff e9 00 00 00 00 e9 00 00 00 00 a1 d0 26 06 08 83 c0 01 a3 d0 26 06 08 e9 77 ff ff ff c7 05 cc 26 06 08 07 00 00 00 81 3d cc 26 06 08 a0 86 01 00 0f 8d 33 01 00 00 a1 cc 26 06 08 80 3c 05 28 a0 04 08 00 0f 85 09 01 00 00 c7 05 d0 26 06 08 00 00 00 00 c7 05 c8 26 06 08 01 00 00 00 a1 d0 26 06 08 83 c0 01 a3 d0 26 06 08 6b 05 c8 26 06 08 0a 99 f7 3d cc 26 06 08 89 15 c8 26 06 08 83 3d c8 26 06 08 01 0f 85 d2 ff ff ff e9 00 00 00 00 b8 02 00 00 00 8b 0d d0 26 06 08 89 45 f8 89 c8 99 8b 4d f8 f7 f9 83 fa 00 0f 85 20 00 00 00 b8 02 00 00 00 8b 0d d0 26 06 08 89 45 f4 89 c8 99 8b 4d f4 f7 f9 a3 d0 26 06 08 e9 c1 ff ff ff e9 00 00 00 00 b8 05 00 00 00 8b 0d d0 26 06 08 89 45 f0 89 c8 99 8b 4d f0 f7 f9 83 fa 00 0f 85 20 00 00 00 b8 05 00 00 00 8b 0d d0 26 06 08 89 45 ec 89 c8 99 8b 4d ec f7 f9 a3 d0 26 06 08 e9 c1 ff ff ff 83 3d d0 26 06 08 01 0f 8e 2d 00 00 00 8d 05 50 87 04 08 8b 0d cc 26 06 08 89 04 24 89 4c 24 04 e8 14 fd ff ff 8b 0d cc 26 06 08 03 0d 20 a0 04 08 89 0d 20 a0 04 08 89 45 e8 e9 00 00 00 00 e9 00 00 00 00 a1 cc 26 06 08 83 c0 01 a3 cc 26 06 08 e9 bd fe ff ff 8d 05 58 87 04 08 8b 0d 20 a0 04 08 89 04 24 89 4c 24 04 e8 cb fc ff ff 8b 4d fc 89 45 e4 89 c8 83 c4 28 5d c3", "hash": 1691556810721871182, "ast_class": "CompoundStmt", "random": 0.003530822435682923, "src_text": "{\n  for ((|i|) = 2; (|i|) * (|i|) < N; (|i|)++)\n    if (!(|comp|)[(|i|)])\n      for ((|j|) = (|i|) * (|i|); (|j|) < N; (|j|) += (|i|))\n        (|comp|)[(|j|)] = 1;\n\n  for ((|p|) = 7; (|p|) < N; (|p|)++)\n    if (!(|comp|)[(|p|)]) {\n      (|i|) = 0;\n      (|j|) = 1;\n      do {\n        (|i|)++;\n        (|j|) = 10 * (|j|) % (|p|);\n      } while ((|j|) != 1);\n      while ((|i|) % 2 == 0)\n        (|i|) /= 2;\n      while ((|i|) % 5 == 0)\n        (|i|) /= 5;\n      if ((|i|) > 1) {\n        printf(\"  p=%d\\n\", (|p|));\n        (|sum|) += (|p|);\n      }\n    }\n  printf(\"sum=%d\\n\", (|sum|));\n}", "unbound_vals": [["(|comp|)", 2], ["(|i|)", 2], ["(|j|)", 2], ["(|p|)", 2], ["(|sum|)", 2]], "includes": ["<stdio.h>"], "unbound_funs": null, "macros": [["N", "N 100000"]], "disasm": "((:PUSH :EBP) (:MOV :ESP :EBP) (:SUB 40 :ESP) (:MOVL 0 (- (:EBP) 4)) (:MOVL 2 134620880) (:MOV 134620880 :EAX) (:IMUL 134620880 :EAX) (:CMP 100000 :EAX) (:JGE :ADDR) (:MOV 134620880 :EAX) (:CMPB 0 (+ (:EAX) 134520872)) (:JNE :ADDR) (:MOV 134620880 :EAX) (:IMUL 134620880 :EAX) (:MOV :EAX 134620872) (:CMPL 100000 134620872) (:JGE :ADDR) (:MOV 134620872 :EAX) (:MOVB 1 (+ (:EAX) 134520872)) (:MOV 134620880 :EAX) (:ADD 134620872 :EAX) (:MOV :EAX 134620872) (:JMP :ADDR) (:JMP :ADDR) (:JMP :ADDR) (:MOV 134620880 :EAX) (:ADD 1 :EAX) (:MOV :EAX 134620880) (:JMP :ADDR) (:MOVL 7 134620876) (:CMPL 100000 134620876) (:JGE :ADDR) (:MOV 134620876 :EAX) (:CMPB 0 (+ (:EAX) 134520872)) (:JNE :ADDR) (:MOVL 0 134620880) (:MOVL 1 134620872) (:MOV 134620880 :EAX) (:ADD 1 :EAX) (:MOV :EAX 134620880) (:IMUL 10 134620872 :EAX) (:CLTD) (:IDIVL 134620876) (:MOV :EDX 134620872) (:CMPL 1 134620872) (:JNE :ADDR) (:JMP :ADDR) (:MOV 2 :EAX) (:MOV 134620880 :ECX) (:MOV 2 (- (:EBP) 8)) (:MOV 134620880 :EAX) (:CLTD) (:MOV (- (:EBP) 8) :ECX) (:IDIV :ECX) (:CMP 0 :EDX) (:JNE :ADDR) (:MOV 2 :EAX) (:MOV 134620880 :ECX) (:MOV 2 (- (:EBP) 12)) (:MOV 134620880 :EAX) (:CLTD) (:MOV (- (:EBP) 12) :ECX) (:IDIV :ECX) (:MOV :EAX 134620880) (:JMP :ADDR) (:JMP :ADDR) (:MOV 5 :EAX) (:MOV 134620880 :ECX) (:MOV 5 (- (:EBP) 16)) (:MOV 134620880 :EAX) (:CLTD) (:MOV (- (:EBP) 16) :ECX) (:IDIV :ECX) (:CMP 0 :EDX) (:JNE :ADDR) (:MOV 5 :EAX) (:MOV 134620880 :ECX) (:MOV 5 (- (:EBP) 20)) (:MOV 134620880 :EAX) (:CLTD) (:MOV (- (:EBP) 20) :ECX) (:IDIV :ECX) (:MOV :EAX 134620880) (:JMP :ADDR) (:CMPL 1 134620880) (:JLE :ADDR) (:LEA \"  p=%d\n\" :EAX) (:MOV 134620876 :ECX) (:MOV \"  p=%d\n\" (:ESP)) (:MOV 134620876 (+ (:ESP) 4)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:MOV 134620876 :ECX) (:ADD 134520864 :ECX) (:MOV :ECX 134520864) (:MOV \"  p=%d\n\" (- (:EBP) 24)) (:JMP :ADDR) (:JMP :ADDR) (:MOV 134620876 :EAX) (:ADD 1 :EAX) (:MOV :EAX 134620876) (:JMP :ADDR) (:LEA \"sum=%d\n\" :EAX) (:MOV 134520864 :ECX) (:MOV \"sum=%d\n\" (:ESP)) (:MOV 134520864 (+ (:ESP) 4)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:MOV (- (:EBP) 4) :ECX) (:MOV \"sum=%d\n\" (- (:EBP) 28)) (:MOV :ECX :EAX) (:ADD 40 :ESP) (:POP :EBP) (:RET))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 2175177108492705825, "ast_class": "BinaryOperator", "random": 0.003534130579099015, "src_text": "(|a|)[(|j|)] = 1", "unbound_vals": [["(|a|)", 4], ["(|j|)", 2]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "83 7d f8 02 0f 85 0c 00 00 00 c7 45 fc 01 00 00 00 e9 d5 00 00 00", "hash": -2207985708508307473, "ast_class": "IfStmt", "random": 0.0035802615534868965, "src_text": "if ((|n|) == 2)\n    return 1", "unbound_vals": [["(|n|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:CMPL 2 (- (:EBP) 8)) (:JNE :ADDR) (:MOVL 1 (- (:EBP) 4)) (:JMP :ADDR))", "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": null, "hash": -2719420964956877098, "ast_class": "Var", "random": 0.003607975111246886, "src_text": "sodom", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [-6857659793473511817], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": 3673955773771239876, "ast_class": "IntegerLiteral", "random": 0.0036179647610722343, "src_text": "6091", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -3922855629752113104, "ast_class": "BinaryOperator", "random": 0.003625921309847291, "src_text": "(|a2|) * 1000 + (|a1|) * 100 + (|a0|) * 10", "unbound_vals": [["(|a0|)", 0], ["(|a1|)", 0], ["(|a2|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -6735188449960771212, "ast_class": "IntegerLiteral", "random": 0.0036426146255930103, "src_text": "max", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": [["max", "max 10005"]], "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -4063224771930238085, "ast_class": "BinaryOperator", "random": 0.0036480689173652436, "src_text": "(|a0|) +\n                                                                                                                                     (|a1|) +\n                                                                                                                                     (|a2|) +\n                                                                                                                                     (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|)", "unbound_vals": [["(|a0|)", 59], ["(|a1|)", 59], ["(|a2|)", 59], ["(|a3|)", 59], ["(|a4|)", 59], ["(|a5|)", 59], ["(|a6|)", 59], ["(|a7|)", 59], ["(|a8|)", 59], ["(|a9|)", 59], ["(|a10|)", 59], ["(|a11|)", 59], ["(|a12|)", 59], ["(|a13|)", 59], ["(|a14|)", 59], ["(|a15|)", 59], ["(|a16|)", 59], ["(|a17|)", 59], ["(|a18|)", 59], ["(|a19|)", 59], ["(|a20|)", 59]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 4864518603449349718, "ast_class": "ImplicitCastExpr", "random": 0.003650221929247688, "src_text": "3079", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -2450169694555943118, "ast_class": "Var", "random": 0.0036650954820094395, "src_text": "char perm[] = E", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [["E", "E \"0123456789\" "]], "disasm": null, "types": [5753727017960068073], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": -5576780461172311181, "ast_class": "Var", "random": 0.0036768821457692225, "src_text": "int c = ((|x1|) - (|x2|)) * ((|x1|) - (|x2|)) + ((|y1|) - (|y2|)) * ((|y1|) - (|y2|))", "unbound_vals": [["(|x1|)", 0], ["(|x2|)", 0], ["(|y1|)", 0], ["(|y2|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [-5849325953548989793], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": -9133947304705944991, "ast_class": "Var", "random": 0.0036799944011272068, "src_text": "unsigned top = ((|n|) - (|r|)) + 1", "unbound_vals": [["(|n|)", 1], ["(|r|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [6059612999785877620], "is_decl": true},
{"full_stmt": true, "binary_contents": "8b 45 e0 8b 4d e4 83 f0 07 09 c8 89 45 bc 0f 85 1f 00 00 00 e9 00 00 00 00 83 7d d0 05 0f 85 10 00 00 00 c7 45 cc 01 00 00 00 8b 45 cc 83 c0 01 89 45 cc", "hash": 8912512367378648450, "ast_class": "IfStmt", "random": 0.003693926253676927, "src_text": "if ((|i|) == 7 && (|j|) == 5) {\n        int a = 1;\n        a++;\n      }", "unbound_vals": [["(|i|)", 2], ["(|j|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 32) :EAX) (:MOV (- (:EBP) 28) :ECX) (:XOR 7 :EAX) (:OR :ECX :EAX) (:MOV :EAX (- (:EBP) 68)) (:JNE :ADDR) (:JMP :ADDR) (:CMPL 5 (- (:EBP) 48)) (:JNE :ADDR) (:MOVL 1 (- (:EBP) 52)) (:MOV (- (:EBP) 52) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 52)))", "types": [-5849325953548989793], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -8541373715191464146, "ast_class": "ImplicitCastExpr", "random": 0.0036942611697238226, "src_text": "341", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -1015184829429715377, "ast_class": "BinaryOperator", "random": 0.003707558631021124, "src_text": "(|a0|) + (|a1|) + (|a2|) + (|a3|) + (|a4|) + (|a5|) +\n                                                (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) +\n                                                (|a12|) + (|a13|)", "unbound_vals": [["(|a0|)", 17], ["(|a1|)", 17], ["(|a2|)", 17], ["(|a3|)", 17], ["(|a4|)", 17], ["(|a5|)", 17], ["(|a6|)", 17], ["(|a7|)", 17], ["(|a8|)", 17], ["(|a9|)", 17], ["(|a10|)", 17], ["(|a11|)", 17], ["(|a12|)", 17], ["(|a13|)", 17]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -5560612023722717144, "ast_class": "DeclRefExpr", "random": 0.003727049787044079, "src_text": "(|a41|)", "unbound_vals": [["(|a41|)", 45]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 6808803361971667508, "ast_class": "ImplicitCastExpr", "random": 0.003747037558137545, "src_text": "(|P|)->q", "unbound_vals": [["(|P|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 1862014763515374326, "ast_class": "IntegerLiteral", "random": 0.003768967613195562, "src_text": "625673", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 7317175788430192454, "ast_class": "ImplicitCastExpr", "random": 0.003776812528078266, "src_text": "969939", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 2594768028363377758, "ast_class": "ImplicitCastExpr", "random": 0.0037797851767673585, "src_text": "60086", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 4722626559357087667, "ast_class": "ImplicitCastExpr", "random": 0.0037839641549654024, "src_text": "(|a48|)", "unbound_vals": [["(|a48|)", 49]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 619870447911557929, "ast_class": "BinaryOperator", "random": 0.0038366787108077283, "src_text": "(|m|) + 1", "unbound_vals": [["(|m|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -1976565243118202817, "ast_class": "DeclRefExpr", "random": 0.003850999758535645, "src_text": "(|a13|)", "unbound_vals": [["(|a13|)", 85]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -8026972485293404461, "ast_class": "ArraySubscriptExpr", "random": 0.0038696041067379783, "src_text": "(|temp2|)[3]", "unbound_vals": [["(|temp2|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 632830965231673697, "ast_class": "DeclRefExpr", "random": 0.0038828091842657564, "src_text": "(|a10|)", "unbound_vals": [["(|a10|)", 88]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 3699113880374090888, "ast_class": "DeclRefExpr", "random": 0.0038881002779767027, "src_text": "(|a9|)", "unbound_vals": [["(|a9|)", 76]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -3482443585141013865, "ast_class": "ImplicitCastExpr", "random": 0.003906763531148938, "src_text": "(|hm|)[(|i|)]", "unbound_vals": [["(|hm|)", 2], ["(|i|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 6459395286243942715, "ast_class": "UnaryOperator", "random": 0.003940093840524184, "src_text": "-684", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "55 89 e5 83 ec 18 c7 45 fc 00 00 00 00 c7 45 f4 00 00 00 00 c7 45 f8 02 00 00 00 81 7d f8 e0 93 04 00 0f 8d 66 00 00 00 8b 45 f8 89 04 24 e8 2d ff ff ff 83 f8 04 0f 85 0e 00 00 00 8b 45 f4 83 c0 01 89 45 f4 e9 07 00 00 00 c7 45 f4 00 00 00 00 83 7d f4 04 0f 85 20 00 00 00 8d 05 70 86 04 08 8b 4d f8 83 e9 03 89 04 24 89 4c 24 04 e8 bd fd ff ff 89 45 f0 e9 13 00 00 00 e9 00 00 00 00 8b 45 f8 83 c0 01 89 45 f8 e9 8d ff ff ff 31 c0 83 c4 18 5d c3", "hash": -4147873892323868860, "ast_class": "Function", "random": 0.003943201415159359, "src_text": "int main() {\n  int i, rowCount = 0;\n\n  for (i = 2; i < 300000; i++) {\n    if ((|primeFactors|)(i) == 4) {\n      rowCount++;\n    } else {\n      rowCount = 0;\n    }\n    if (rowCount == 4) {\n      printf(\"The answer for 047 is %d\", i - 3);\n      break;\n    }\n  }\n\n  return 0;\n}", "unbound_vals": null, "includes": ["<stdio.h>"], "unbound_funs": [["(|primeFactors|)", null, null, 1]], "macros": null, "disasm": "((:PUSH :EBP) (:MOV :ESP :EBP) (:SUB 24 :ESP) (:MOVL 0 (- (:EBP) 4)) (:MOVL 0 (- (:EBP) 12)) (:MOVL 2 (- (:EBP) 8)) (:CMPL 300000 (- (:EBP) 8)) (:JGE :ADDR) (:MOV (- (:EBP) 8) :EAX) (:MOV :EAX (:ESP)) (:CALL :PRIMEFACTORS) (:CMP 4 :EAX) (:JNE :ADDR) (:MOV (- (:EBP) 12) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 12)) (:JMP :ADDR) (:MOVL 0 (- (:EBP) 12)) (:CMPL 4 (- (:EBP) 12)) (:JNE :ADDR) (:LEA \"The answer for 047 is %d\" :EAX) (:MOV (- (:EBP) 8) :ECX) (:SUB 3 :ECX) (:MOV \"The answer for 047 is %d\" (:ESP)) (:MOV :ECX (+ (:ESP) 4)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:MOV \"The answer for 047 is %d\" (- (:EBP) 16)) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 8) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 8)) (:JMP :ADDR) (:XOR :EAX :EAX) (:ADD 24 :ESP) (:POP :EBP) (:RET))", "types": [-5849325953548989793], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": -1241775799422078818, "ast_class": "ImplicitCastExpr", "random": 0.003963660479840314, "src_text": "612235", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -3305842999209706208, "ast_class": "IntegerLiteral", "random": 0.0039641214516983325, "src_text": "568382", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 8579534884469561993, "ast_class": "ImplicitCastExpr", "random": 0.0039702577609139755, "src_text": "(|res|)[(|k|)]", "unbound_vals": [["(|res|)", 1], ["(|k|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -8199439107966466340, "ast_class": "BinaryOperator", "random": 0.003975852629688692, "src_text": "(|a0|) +\n                                                                                                                         (|a1|) +\n                                                                                                                         (|a2|) +\n                                                                                                                         (|a3|) +\n                                                                                                                         (|a4|) +\n                                                                                                                         (|a5|) +\n                                                                                                                         (|a6|) +\n                                                                                                                         (|a7|) +\n                                                                                                                         (|a8|) +\n                                                                                                                         (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|)", "unbound_vals": [["(|a0|)", 54], ["(|a1|)", 54], ["(|a2|)", 54], ["(|a3|)", 54], ["(|a4|)", 54], ["(|a5|)", 54], ["(|a6|)", 54], ["(|a7|)", 54], ["(|a8|)", 54], ["(|a9|)", 54], ["(|a10|)", 54], ["(|a11|)", 54], ["(|a12|)", 54], ["(|a13|)", 54], ["(|a14|)", 54]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 8171650228364194574, "ast_class": "ImplicitCastExpr", "random": 0.003975956832054095, "src_text": "(|a10|)", "unbound_vals": [["(|a10|)", 37]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "89 14 24 c7 44 24 04 00 00 00 00 c7 44 24 08 d1 a1 10 00 89 85 20 5e ef ff 89 8d 1c 5e ef ff e8 98 fe ff ff 8d 85 27 5e ef ff", "hash": 8058215016387466005, "ast_class": "DeclStmt", "random": 0.003980033153747509, "src_text": "char den[MEM_LIMIT + 1] = {0}", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": [["MEM_LIMIT", "MEM_LIMIT 1090000"]], "disasm": "((:MOV :EDX (:ESP)) (:MOVL 0 (+ (:ESP) 4)) (:MOVL 1090001 (+ (:ESP) 8)) (:MOV :EAX (- (:EBP) 1090016)) (:MOV 1090001 (- (:EBP) 1090020)) (:CALL :__LIBC_START_MAIN) (:LEA (- (:EBP) 1090009) :EAX))", "types": [5753727017960068073], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -1568045996375617565, "ast_class": "BinaryOperator", "random": 0.003993177429857275, "src_text": "(|u|)[(|l|)] != -1", "unbound_vals": [["(|l|)", 2], ["(|u|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 6177320519134482394, "ast_class": "ImplicitCastExpr", "random": 0.004001083120995341, "src_text": "2801", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 1481935445874686599, "ast_class": "BinaryOperator", "random": 0.004022846616386522, "src_text": "(|a0|) + (|a1|)", "unbound_vals": [["(|a0|)", 2], ["(|a1|)", 2]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "8b 45 f4 8b 4d e8 99 f7 3c 8d 28 a0 04 08 83 fa 00 0f 85 4d 00 00 00 8b 45 e8 8b 04 85 28 a0 04 08 0f af 45 f0 89 45 f0 8b 45 f4 8b 4d e8 99 f7 3c 8d 28 a0 04 08 83 fa 00 0f 85 20 00 00 00 8b 45 e8 8b 04 85 28 a0 04 08 8b 4d f4 89 45 cc 89 c8 99 8b 4d cc f7 f9 89 45 f4 e9 c9 ff ff ff e9 00 00 00 00", "hash": -4037630422289711593, "ast_class": "IfStmt", "random": 0.0040552921183046875, "src_text": "if ((|j|) % (|p|)[(|l|)] == 0) {\n        (|sum|) *= (|p|)[(|l|)];\n        while ((|j|) % (|p|)[(|l|)] == 0)\n          (|j|) /= (|p|)[(|l|)];\n      }", "unbound_vals": [["(|l|)", 2], ["(|p|)", 4], ["(|j|)", 2], ["(|sum|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 12) :EAX) (:MOV (- (:EBP) 24) :ECX) (:CLTD) (:IDIVL (+ (:ECX) 134520872)) (:CMP 0 :EDX) (:JNE :ADDR) (:MOV (- (:EBP) 24) :EAX) (:MOV (+ (:EAX) 134520872) :EAX) (:IMUL (- (:EBP) 16) :EAX) (:MOV :EAX (- (:EBP) 16)) (:MOV (- (:EBP) 12) :EAX) (:MOV (- (:EBP) 24) :ECX) (:CLTD) (:IDIVL (+ (:ECX) 134520872)) (:CMP 0 :EDX) (:JNE :ADDR) (:MOV (- (:EBP) 24) :EAX) (:MOV (+ (:EAX) 134520872) :EAX) (:MOV (- (:EBP) 12) :ECX) (:MOV :EAX (- (:EBP) 52)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 52) :ECX) (:IDIV :ECX) (:MOV :EAX (- (:EBP) 12)) (:JMP :ADDR) (:JMP :ADDR))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -4558627332636698000, "ast_class": "IntegerLiteral", "random": 0.004059632009282943, "src_text": "40", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 8558008456434878080, "ast_class": "ImplicitCastExpr", "random": 0.0040630299843890105, "src_text": "assert(triangles = malloc(TRINUM * sizeof(int)))", "unbound_vals": null, "includes": null, "unbound_funs": [["(|malloc|)", null, null, 1]], "macros": null, "disasm": null, "types": [-5849325953548989793], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -7400583721584245290, "ast_class": "BinaryOperator", "random": 0.004080025098959217, "src_text": "(|a0|) +\n                                                                                                                                                                                    (|a1|) +\n                                                                                                                                                                                    (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) +\n                                                                                                                                                                                    (|a17|) +\n                                                                                                                                                                                    (|a18|) +\n                                                                                                                                                                                    (|a19|) +\n                                                                                                                                                                                    (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|)", "unbound_vals": [["(|a0|)", 82], ["(|a1|)", 82], ["(|a2|)", 82], ["(|a3|)", 82], ["(|a4|)", 82], ["(|a5|)", 82], ["(|a6|)", 82], ["(|a7|)", 82], ["(|a8|)", 82], ["(|a9|)", 82], ["(|a10|)", 82], ["(|a11|)", 82], ["(|a12|)", 82], ["(|a13|)", 82], ["(|a14|)", 82], ["(|a15|)", 82], ["(|a16|)", 82], ["(|a17|)", 82], ["(|a18|)", 82], ["(|a19|)", 82], ["(|a20|)", 82], ["(|a21|)", 82], ["(|a22|)", 82], ["(|a23|)", 82], ["(|a24|)", 82], ["(|a25|)", 82], ["(|a26|)", 82], ["(|a27|)", 82], ["(|a28|)", 82], ["(|a29|)", 82], ["(|a30|)", 82], ["(|a31|)", 82], ["(|a32|)", 82], ["(|a33|)", 82], ["(|a34|)", 82], ["(|a35|)", 82], ["(|a36|)", 82], ["(|a37|)", 82], ["(|a38|)", 82], ["(|a39|)", 82], ["(|a40|)", 82], ["(|a41|)", 82], ["(|a42|)", 82], ["(|a43|)", 82], ["(|a44|)", 82], ["(|a45|)", 82], ["(|a46|)", 82], ["(|a47|)", 82], ["(|a48|)", 82], ["(|a49|)", 82], ["(|a50|)", 82], ["(|a51|)", 82], ["(|a52|)", 82], ["(|a53|)", 82], ["(|a54|)", 82], ["(|a55|)", 82], ["(|a56|)", 82], ["(|a57|)", 82], ["(|a58|)", 82], ["(|a59|)", 82], ["(|a60|)", 82]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -4448380866491234469, "ast_class": "BinaryOperator", "random": 0.004082405541539935, "src_text": "(|j|) > (|i|)", "unbound_vals": [["(|i|)", 2], ["(|j|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 428875056161900206, "ast_class": "StringLiteral", "random": 0.004094295519520452, "src_text": "\"Generated %u primes, last %u\\n\"", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -1304977598562073451, "ast_class": "ReturnStmt", "random": 0.004106289757178638, "src_text": "return", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 3097013922068133111, "ast_class": "DeclRefExpr", "random": 0.004119944251173235, "src_text": "(|N|)", "unbound_vals": [["(|N|)", 4]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "c7 45 e0 00 00 00 00 8b 45 e0 3b 45 ec 0f 8d 1b 00 00 00 8b 45 e0 8b 4d 8c c7 04 81 01 00 00 00 8b 45 e0 83 c0 01 89 45 e0 e9 d9 ff ff ff", "hash": -4798423272987017714, "ast_class": "ForStmt", "random": 0.004131780107792471, "src_text": "for ((|i|) = 0; (|i|) < (|rootN|); (|i|)++)\n      (|count|)[(|i|)] = 1", "unbound_vals": [["(|rootN|)", 1], ["(|count|)", 1], ["(|i|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOVL 0 (- (:EBP) 32)) (:MOV (- (:EBP) 32) :EAX) (:CMP (- (:EBP) 20) :EAX) (:JGE :ADDR) (:MOV (- (:EBP) 32) :EAX) (:MOV (- (:EBP) 116) :ECX) (:MOVL 1 (:ECX)) (:MOV (- (:EBP) 32) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 32)) (:JMP :ADDR))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -6457968353235315792, "ast_class": "ImplicitCastExpr", "random": 0.004132957168083151, "src_text": "-243", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 2631017250511880488, "ast_class": "Var", "random": 0.004144397373103015, "src_text": "int totalsum = 0", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [-5849325953548989793], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": 3267546644556740413, "ast_class": "BinaryOperator", "random": 0.004161962864545399, "src_text": "2 + 2 * (|n|) * 7037", "unbound_vals": [["(|n|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "55 89 e5 53 56 81 ec a0 00 00 00 c7 45 f4 00 00 00 00 c7 45 ec 00 00 00 00 c7 45 e8 80 84 1e 00 89 e0 89 45 e4 89 e0 05 f0 ed 85 ff 89 c4 c7 45 dc 00 00 00 00 c7 45 d8 02 00 00 00 c7 45 d4 00 00 00 00 c7 45 d0 03 00 00 00 89 45 b4 8b 45 d0 8b 4d d4 8b 55 e8 8b 75 ec 29 c2 0f 92 c3 29 f1 0f 9f c7 89 55 b0 88 7d af 89 4d a8 88 5d a7 0f 84 06 00 00 00 8a 45 af 88 45 a7 8a 45 a7 84 c0 0f 85 29 00 00 00 e9 00 00 00 00 8b 45 d0 8b 4d b4 c7 04 81 01 00 00 00 8b 45 d0 8b 4d d4 83 c0 02 83 d1 00 89 45 d0 89 4d d4 e9 9e ff ff ff c7 45 cc 00 00 00 00 c7 45 c8 03 00 00 00 8b 45 c8 8b 4d cc 8b 55 e8 8b 75 ec 29 c2 0f 92 c3 29 f1 0f 9f c7 89 55 a0 88 7d 9f 89 4d 98 88 5d 97 0f 84 06 00 00 00 8a 45 9f 88 45 97 8a 45 97 84 c0 0f 85 dd 00 00 00 e9 00 00 00 00 8b 45 c8 8b 4d b4 83 3c 81 00 0f 84 ac 00 00 00 8b 45 c8 8b 4d cc 89 c2 0f af d1 89 45 90 8b 4d 90 89 55 8c f7 e1 8b 75 8c 01 f2 01 f2 89 45 c0 89 55 c4 8b 45 c0 8b 4d c4 8b 55 e8 8b 75 ec 29 c2 0f 92 c3 29 f1 0f 9f c7 89 55 88 88 7d 87 89 4d 80 88 9d 7f ff ff ff 0f 84 09 00 00 00 8a 45 87 88 85 7f ff ff ff 8a 85 7f ff ff ff 84 c0 0f 85 42 00 00 00 e9 00 00 00 00 8b 45 c0 8b 4d b4 83 3c 81 00 0f 84 0d 00 00 00 8b 45 c0 8b 4d b4 c7 04 81 00 00 00 00 e9 00 00 00 00 8b 45 c8 8b 4d cc 8b 55 c0 8b 75 c4 01 c2 11 ce 89 55 c0 89 75 c4 e9 7c ff ff ff e9 00 00 00 00 e9 00 00 00 00 8b 45 c8 8b 4d cc 83 c0 02 83 d1 00 89 45 c8 89 4d cc e9 ea fe ff ff c7 45 bc 00 00 00 00 c7 45 b8 03 00 00 00 8b 45 b8 8b 4d bc 8b 55 e8 8b 75 ec 29 c2 0f 92 c3 29 f1 0f 9f c7 89 95 78 ff ff ff 88 bd 77 ff ff ff 89 8d 70 ff ff ff 88 9d 6f ff ff ff 0f 84 0c 00 00 00 8a 85 77 ff ff ff 88 85 6f ff ff ff 8a 85 6f ff ff ff 84 c0 0f 85 47 00 00 00 e9 00 00 00 00 8b 45 b8 8b 4d b4 83 3c 81 00 0f 84 16 00 00 00 8b 45 b8 8b 4d bc 8b 55 d8 8b 75 dc 01 c2 11 ce 89 55 d8 89 75 dc e9 00 00 00 00 8b 45 b8 8b 4d bc 83 c0 02 83 d1 00 89 45 b8 89 4d bc e9 6b ff ff ff 8d 05 e0 87 04 08 83 ec 04 ff 75 dc ff 75 d8 68 e0 87 04 08 89 85 68 ff ff ff e8 3b fc ff ff 83 c4 10 8b 4d e4 89 cc 8b 4d f4 89 85 64 ff ff ff 89 c8 8d 65 f8 5e 5b 5d c3", "hash": -2012526855884991929, "ast_class": "Function", "random": 0.0041662970479610095, "src_text": "main(void) {\n  long long topValue = 2000000;\n  int array[topValue + 1];\n  long long sum = 2;\n\n  // all number are prime\n  for (long long i = 3; i <= topValue; i += 2) {\n    array[i] = 1;\n  }\n\n  for (long long prime = 3; prime <= topValue; prime += 2) {\n    if (array[prime]) {\n      for (long long multiple = prime * prime; multiple <= topValue;\n           multiple += prime) {\n        if (array[multiple])\n          array[multiple] = 0;\n      }\n    }\n  }\n\n  for (long long i = 3; i <= topValue; i += 2) {\n    if (array[i]) {\n      sum += i;\n    }\n  }\n  printf(\"Sum is %lld\\n\", sum);\n}", "unbound_vals": null, "includes": ["<stdio.h>"], "unbound_funs": null, "macros": null, "disasm": "((:PUSH :EBP) (:MOV :ESP :EBP) (:PUSH :EBX) (:PUSH :ESI) (:SUB 160 :ESP) (:MOVL 0 (- (:EBP) 12)) (:MOVL 0 (- (:EBP) 20)) (:MOVL 2000000 (- (:EBP) 24)) (:MOV :ESP :EAX) (:MOV :EAX (- (:EBP) 28)) (:MOV :ESP :EAX) (:ADD 4286967280 :EAX) (:MOV :EAX :ESP) (:MOVL 0 (- (:EBP) 36)) (:MOVL 2 (- (:EBP) 40)) (:MOVL 0 (- (:EBP) 44)) (:MOVL 3 (- (:EBP) 48)) (:MOV :EAX (- (:EBP) 76)) (:MOV (- (:EBP) 48) :EAX) (:MOV (- (:EBP) 44) :ECX) (:MOV (- (:EBP) 24) :EDX) (:MOV (- (:EBP) 20) :ESI) (:SUB :EAX :EDX) (:SETB :BL) (:SUB :ESI :ECX) (:SETG :B) (:MOV :EDX (- (:EBP) 80)) (:MOV :B (- (:EBP) 81)) (:MOV :ECX (- (:EBP) 88)) (:MOV :BL (- (:EBP) 89)) (:JE :ADDR) (:MOV (- (:EBP) 81) :AL) (:MOV :AL (- (:EBP) 89)) (:MOV (- (:EBP) 89) :AL) (:TEST :AL :AL) (:JNE :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 48) :EAX) (:MOV (- (:EBP) 76) :ECX) (:MOVL 1 (:ECX)) (:MOV (- (:EBP) 48) :EAX) (:MOV (- (:EBP) 44) :ECX) (:ADD 2 :EAX) (:ADC 0 :ECX) (:MOV :EAX (- (:EBP) 48)) (:MOV :ECX (- (:EBP) 44)) (:JMP :ADDR) (:MOVL 0 (- (:EBP) 52)) (:MOVL 3 (- (:EBP) 56)) (:MOV (- (:EBP) 56) :EAX) (:MOV (- (:EBP) 52) :ECX) (:MOV (- (:EBP) 24) :EDX) (:MOV (- (:EBP) 20) :ESI) (:SUB :EAX :EDX) (:SETB :BL) (:SUB :ESI :ECX) (:SETG :B) (:MOV :EDX (- (:EBP) 96)) (:MOV :B (- (:EBP) 97)) (:MOV :ECX (- (:EBP) 104)) (:MOV :BL (- (:EBP) 105)) (:JE :ADDR) (:MOV (- (:EBP) 97) :AL) (:MOV :AL (- (:EBP) 105)) (:MOV (- (:EBP) 105) :AL) (:TEST :AL :AL) (:JNE :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 56) :EAX) (:MOV (- (:EBP) 76) :ECX) (:CMPL 0 (:ECX)) (:JE :ADDR) (:MOV (- (:EBP) 56) :EAX) (:MOV (- (:EBP) 52) :ECX) (:MOV :EAX :EDX) (:IMUL :ECX :EDX) (:MOV :EAX (- (:EBP) 112)) (:MOV (- (:EBP) 112) :ECX) (:MOV :EDX (- (:EBP) 116)) (:MUL :ECX) (:MOV (- (:EBP) 116) :ESI) (:ADD :ESI :EDX) (:ADD :ESI :EDX) (:MOV :EAX (- (:EBP) 64)) (:MOV :EDX (- (:EBP) 60)) (:MOV (- (:EBP) 64) :EAX) (:MOV (- (:EBP) 60) :ECX) (:MOV (- (:EBP) 24) :EDX) (:MOV (- (:EBP) 20) :ESI) (:SUB :EAX :EDX) (:SETB :BL) (:SUB :ESI :ECX) (:SETG :B) (:MOV :EDX (- (:EBP) 120)) (:MOV :B (- (:EBP) 121)) (:MOV :ECX (- (:EBP) 128)) (:MOV :BL (- (:EBP) 129)) (:JE :ADDR) (:MOV (- (:EBP) 121) :AL) (:MOV :AL (- (:EBP) 129)) (:MOV (- (:EBP) 129) :AL) (:TEST :AL :AL) (:JNE :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 64) :EAX) (:MOV (- (:EBP) 76) :ECX) (:CMPL 0 (:ECX)) (:JE :ADDR) (:MOV (- (:EBP) 64) :EAX) (:MOV (- (:EBP) 76) :ECX) (:MOVL 0 (:ECX)) (:JMP :ADDR) (:MOV (- (:EBP) 56) :EAX) (:MOV (- (:EBP) 52) :ECX) (:MOV (- (:EBP) 64) :EDX) (:MOV (- (:EBP) 60) :ESI) (:ADD :EAX :EDX) (:ADC :ECX :ESI) (:MOV :EDX (- (:EBP) 64)) (:MOV :ESI (- (:EBP) 60)) (:JMP :ADDR) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 56) :EAX) (:MOV (- (:EBP) 52) :ECX) (:ADD 2 :EAX) (:ADC 0 :ECX) (:MOV :EAX (- (:EBP) 56)) (:MOV :ECX (- (:EBP) 52)) (:JMP :ADDR) (:MOVL 0 (- (:EBP) 68)) (:MOVL 3 (- (:EBP) 72)) (:MOV (- (:EBP) 72) :EAX) (:MOV (- (:EBP) 68) :ECX) (:MOV (- (:EBP) 24) :EDX) (:MOV (- (:EBP) 20) :ESI) (:SUB :EAX :EDX) (:SETB :BL) (:SUB :ESI :ECX) (:SETG :B) (:MOV :EDX (- (:EBP) 136)) (:MOV :B (- (:EBP) 137)) (:MOV :ECX (- (:EBP) 144)) (:MOV :BL (- (:EBP) 145)) (:JE :ADDR) (:MOV (- (:EBP) 137) :AL) (:MOV :AL (- (:EBP) 145)) (:MOV (- (:EBP) 145) :AL) (:TEST :AL :AL) (:JNE :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 72) :EAX) (:MOV (- (:EBP) 76) :ECX) (:CMPL 0 (:ECX)) (:JE :ADDR) (:MOV (- (:EBP) 72) :EAX) (:MOV (- (:EBP) 68) :ECX) (:MOV (- (:EBP) 40) :EDX) (:MOV (- (:EBP) 36) :ESI) (:ADD :EAX :EDX) (:ADC :ECX :ESI) (:MOV :EDX (- (:EBP) 40)) (:MOV :ESI (- (:EBP) 36)) (:JMP :ADDR) (:MOV (- (:EBP) 72) :EAX) (:MOV (- (:EBP) 68) :ECX) (:ADD 2 :EAX) (:ADC 0 :ECX) (:MOV :EAX (- (:EBP) 72)) (:MOV :ECX (- (:EBP) 68)) (:JMP :ADDR) (:LEA \"Sum is %lld\n\" :EAX) (:SUB 4 :ESP) (:PUSHL (- (:EBP) 36)) (:PUSHL (- (:EBP) 40)) (:PUSH \"Sum is %lld\n\") (:MOV \"Sum is %lld\n\" (- (:EBP) 152)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:ADD 16 :ESP) (:MOV (- (:EBP) 28) :ECX) (:MOV :ECX :ESP) (:MOV (- (:EBP) 12) :ECX) (:MOV \"Sum is %lld\n\" (- (:EBP) 156)) (:MOV :ECX :EAX) (:LEA (- (:EBP) 8) :ESP) (:POP :ESI) (:POP :EBX) (:POP :EBP) (:RET))", "types": [7945934781761998363, -6252000326173323660], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": -8489420468845080746, "ast_class": "DeclRefExpr", "random": 0.004185791379067272, "src_text": "(|d_|)", "unbound_vals": [["(|d_|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": null, "hash": 702041117676878390, "ast_class": "Function", "random": 0.0042055807854254335, "src_text": "int *split(long num)", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [-6857659793473511817], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": -4486754623623598786, "ast_class": "InitListExpr", "random": 0.004241426595714581, "src_text": "{-95, 32, -83, 337, 226, 990}", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -1489142913668290390, "ast_class": "InitListExpr", "random": 0.004257359853252596, "src_text": "{95, 64}", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -8762035945032010795, "ast_class": "DeclRefExpr", "random": 0.0042964026020229085, "src_text": "(|maxt|)", "unbound_vals": [["(|maxt|)", 3]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 2933785557880335761, "ast_class": "ImplicitCastExpr", "random": 0.004304662736009934, "src_text": "(|dc|)", "unbound_vals": [["(|dc|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -6980895070094091068, "ast_class": "ArraySubscriptExpr", "random": 0.004322881216983099, "src_text": "(|nbDiv|)[(|i|) - 1]", "unbound_vals": [["(|nbDiv|)", 2], ["(|i|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": null, "hash": 2598739223875910719, "ast_class": "BinaryOperator", "random": 0.004325523530846698, "src_text": "(|n2|)->digits[(|n2|)->len++] = 1", "unbound_vals": [["(|n2|)", 3]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 7162508378653354289, "ast_class": "MemberExpr", "random": 0.004342825136756101, "src_text": "(|nodes|)[(|i|)][(|j|)].cost", "unbound_vals": [["(|nodes|)", 2], ["(|i|)", 2], ["(|j|)", 2]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "c7 45 ec 00 00 00 00", "hash": 7783175086096816099, "ast_class": "DeclStmt", "random": 0.004344331991417039, "src_text": "int n, r, c = 0", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOVL 0 (- (:EBP) 20)))", "types": [-5849325953548989793], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -1161881788632317762, "ast_class": "ImplicitCastExpr", "random": 0.004365386474035726, "src_text": "(|lpf|)", "unbound_vals": [["(|lpf|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 9054082265646032384, "ast_class": "BinaryOperator", "random": 0.004365888930742412, "src_text": "(|i|) = 29", "unbound_vals": [["(|i|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": "c7 45 f4 0d 00 00 00 83 7d f4 00 0f 8c bb 00 00 00 c7 45 f0 00 00 00 00 8b 45 f0 3b 45 ec 0f 8d 91 00 00 00 8d 05 2c a0 04 08 8b 4d f0 8b 55 f4 83 c2 01 6b d2 3c 89 c6 01 d6 8b 0c 8e 8b 55 f0 8b 75 f4 83 c6 01 6b f6 3c 01 f0 3b 4c 90 04 0f 8e 1f 00 00 00 8d 05 2c a0 04 08 8b 4d f0 8b 55 f4 83 c2 01 6b d2 3c 01 d0 8b 04 88 89 45 e8 e9 1b 00 00 00 8d 05 2c a0 04 08 8b 4d f0 8b 55 f4 83 c2 01 6b d2 3c 01 d0 8b 44 88 04 89 45 e8 8b 45 e8 8d 0d 2c a0 04 08 8b 55 f0 6b 75 f4 3c 01 f1 03 04 91 89 04 91 8b 45 f0 83 c0 01 89 45 f0 e9 63 ff ff ff 8b 45 ec 83 c0 ff 89 45 ec 8b 45 f4 83 c0 ff 89 45 f4 e9 3b ff ff ff 8d 05 f4 86 04 08", "hash": -5066972122364826042, "ast_class": "CompoundStmt", "random": 0.004368061942183532, "src_text": "{\n    for ((|j|) = 0; (|j|) < (|lim|); (|j|)++) {\n      (|tri|)[(|i|)][(|j|)] += ((|tri|)[(|i|) + 1][(|j|)] > (|tri|)[(|i|) + 1][(|j|) + 1]) ? (|tri|)[(|i|) + 1][(|j|)]\n                                                       : (|tri|)[(|i|) + 1][(|j|) + 1];\n    }\n    (|lim|)--;\n  }", "unbound_vals": [["(|tri|)", 3], ["(|i|)", 1], ["(|j|)", 1], ["(|lim|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOVL 13 (- (:EBP) 12)) (:CMPL 0 (- (:EBP) 12)) (:JL :ADDR) (:MOVL 0 (- (:EBP) 16)) (:MOV (- (:EBP) 16) :EAX) (:CMP (- (:EBP) 20) :EAX) (:JGE :ADDR) (:LEA :ADDR :EAX) (:MOV (- (:EBP) 16) :ECX) (:MOV (- (:EBP) 12) :EDX) (:ADD 1 :EDX) (:IMUL 60 :EDX :EDX) (:MOV 134520876 :ESI) (:ADD :EDX :ESI) (:MOV (:ESI) :ECX) (:MOV (- (:EBP) 16) :EDX) (:MOV (- (:EBP) 12) :ESI) (:ADD 1 :ESI) (:IMUL 60 :ESI :ESI) (:ADD :ESI :EAX) (:CMP (+ (:EAX) 4) :ECX) (:JLE :ADDR) (:LEA :ADDR :EAX) (:MOV (- (:EBP) 16) :ECX) (:MOV (- (:EBP) 12) :EDX) (:ADD 1 :EDX) (:IMUL 60 :EDX :EDX) (:ADD :EDX :EAX) (:MOV (:EAX) :EAX) (:MOV :EAX (- (:EBP) 24)) (:JMP :ADDR) (:LEA :ADDR :EAX) (:MOV (- (:EBP) 16) :ECX) (:MOV (- (:EBP) 12) :EDX) (:ADD 1 :EDX) (:IMUL 60 :EDX :EDX) (:ADD :EDX :EAX) (:MOV (+ (:EAX) 4) :EAX) (:MOV :EAX (- (:EBP) 24)) (:MOV (- (:EBP) 24) :EAX) (:LEA :ADDR :ECX) (:MOV (- (:EBP) 16) :EDX) (:IMUL 60 (- (:EBP) 12) :ESI) (:ADD :ESI :ECX) (:ADD (:ECX) :EAX) (:MOV :EAX (:ECX)) (:MOV (- (:EBP) 16) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 16)) (:JMP :ADDR) (:MOV (- (:EBP) 20) :EAX) (:ADD 4294967295 :EAX) (:MOV :EAX (- (:EBP) 20)) (:MOV (- (:EBP) 12) :EAX) (:ADD 4294967295 :EAX) (:MOV :EAX (- (:EBP) 12)) (:JMP :ADDR) (:LEA \"%i\n\" :EAX))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -4624843623068614529, "ast_class": "CallExpr", "random": 0.004368231313173654, "src_text": "(|pow|)((|lower|), (|y|))", "unbound_vals": [["(|y|)", 1], ["(|lower|)", 1]], "includes": null, "unbound_funs": [["(|pow|)", null, null, 2]], "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -5475887832127641732, "ast_class": "ImplicitCastExpr", "random": 0.004383265498136835, "src_text": "5227", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -6009142521364369528, "ast_class": "DeclRefExpr", "random": 0.004412331544312753, "src_text": "(|a1|)", "unbound_vals": [["(|a1|)", 84]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 5163558919656996257, "ast_class": "ParenExpr", "random": 0.004413138214341195, "src_text": "((|a0|) +\n                                                                                                                                                                                    (|a1|) +\n                                                                                                                                                                                    (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) +\n                                                                                                                                                                                    (|a17|) +\n                                                                                                                                                                                    (|a18|) +\n                                                                                                                                                                                    (|a19|) +\n                                                                                                                                                                                    (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|) + (|a61|) + (|a62|) + (|a63|) + (|a64|) + (|a65|) + (|a66|) + (|a67|) + (|a68|) +\n                                                                                                                                                                                    (|a69|) +\n                                                                                                                                                                                    (|a70|) +\n                                                                                                                                                                                    (|a71|) +\n                                                                                                                                                                                    (|a72|) +\n                                                                                                                                                                                    (|a73|) +\n                                                                                                                                                                                    (|a74|) +\n                                                                                                                                                                                    (|a75|) +\n                                                                                                                                                                                    (|a76|) +\n                                                                                                                                                                                    (|a77|) +\n                                                                                                                                                                                    (|a78|) +\n                                                                                                                                                                                    (|a79|) +\n                                                                                                                                                                                    (|a80|) +\n                                                                                                                                                                                    (|a81|) +\n                                                                                                                                                                                    (|a82|))", "unbound_vals": [["(|a0|)", 83], ["(|a1|)", 83], ["(|a2|)", 83], ["(|a3|)", 83], ["(|a4|)", 83], ["(|a5|)", 83], ["(|a6|)", 83], ["(|a7|)", 83], ["(|a8|)", 83], ["(|a9|)", 83], ["(|a10|)", 83], ["(|a11|)", 83], ["(|a12|)", 83], ["(|a13|)", 83], ["(|a14|)", 83], ["(|a15|)", 83], ["(|a16|)", 83], ["(|a17|)", 83], ["(|a18|)", 83], ["(|a19|)", 83], ["(|a20|)", 83], ["(|a21|)", 83], ["(|a22|)", 83], ["(|a23|)", 83], ["(|a24|)", 83], ["(|a25|)", 83], ["(|a26|)", 83], ["(|a27|)", 83], ["(|a28|)", 83], ["(|a29|)", 83], ["(|a30|)", 83], ["(|a31|)", 83], ["(|a32|)", 83], ["(|a33|)", 83], ["(|a34|)", 83], ["(|a35|)", 83], ["(|a36|)", 83], ["(|a37|)", 83], ["(|a38|)", 83], ["(|a39|)", 83], ["(|a40|)", 83], ["(|a41|)", 83], ["(|a42|)", 83], ["(|a43|)", 83], ["(|a44|)", 83], ["(|a45|)", 83], ["(|a46|)", 83], ["(|a47|)", 83], ["(|a48|)", 83], ["(|a49|)", 83], ["(|a50|)", 83], ["(|a51|)", 83], ["(|a52|)", 83], ["(|a53|)", 83], ["(|a54|)", 83], ["(|a55|)", 83], ["(|a56|)", 83], ["(|a57|)", 83], ["(|a58|)", 83], ["(|a59|)", 83], ["(|a60|)", 83], ["(|a61|)", 83], ["(|a62|)", 83], ["(|a63|)", 83], ["(|a64|)", 83], ["(|a65|)", 83], ["(|a66|)", 83], ["(|a67|)", 83], ["(|a68|)", 83], ["(|a69|)", 83], ["(|a70|)", 83], ["(|a71|)", 83], ["(|a72|)", 83], ["(|a73|)", 83], ["(|a74|)", 83], ["(|a75|)", 83], ["(|a76|)", 83], ["(|a77|)", 83], ["(|a78|)", 83], ["(|a79|)", 83], ["(|a80|)", 83], ["(|a81|)", 83], ["(|a82|)", 83]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -4977637274581242687, "ast_class": "ImplicitCastExpr", "random": 0.004457966399468161, "src_text": "(|diff|)", "unbound_vals": [["(|diff|)", 4]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "55 89 e5 83 ec 18 8b 45 08 89 45 f8 c7 45 f4 00 00 00 00 8b 45 f8 89 04 24 e8 82 ff ff ff 89 45 f4 8b 45 f8 3b 45 f4 0f 85 0c 00 00 00 c7 45 fc 01 00 00 00 e9 07 00 00 00 c7 45 fc 00 00 00 00 8b 45 fc 83 c4 18 5d c3 0f 1f 84 00 00 00 00 00", "hash": -8314367020671145366, "ast_class": "Function", "random": 0.004458861127485947, "src_text": "int isPalindrome(long int input) {\n  long int reversed = 0;\n  reversed = (|reverseInt|)(input);\n\n  if (input == reversed)\n    return 1;\n  else\n    return 0;\n\n  // herp derp, we don't need to do ANY of this!\n  /*while (reversed && input)\n  {\n          if (popDigit(&input;) != popDigit(&reversed;))\n          {\n                  return 0;\n          }\n  }\n  return 1; //they never differed, so it's palindromatic.*/\n}", "unbound_vals": null, "includes": null, "unbound_funs": [["(|reverseInt|)", null, null, 1]], "macros": null, "disasm": "((:PUSH :EBP) (:MOV :ESP :EBP) (:SUB 24 :ESP) (:MOV (+ (:EBP) 8) :EAX) (:MOV :EAX (- (:EBP) 8)) (:MOVL 0 (- (:EBP) 12)) (:MOV (- (:EBP) 8) :EAX) (:MOV :EAX (:ESP)) (:CALL :REVERSEINT) (:MOV :EAX (- (:EBP) 12)) (:MOV (- (:EBP) 8) :EAX) (:CMP (- (:EBP) 12) :EAX) (:JNE :ADDR) (:MOVL 1 (- (:EBP) 4)) (:JMP :ADDR) (:MOVL 0 (- (:EBP) 4)) (:MOV (- (:EBP) 4) :EAX) (:ADD 24 :ESP) (:POP :EBP) (:RET) (:NOPL (+ (:EAX) 0)))", "types": [-6857659793473511817], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": -1418663430672532414, "ast_class": "ImplicitCastExpr", "random": 0.00448627817260816, "src_text": "534197", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 2913195688051808426, "ast_class": "ImplicitCastExpr", "random": 0.0045179926584749674, "src_text": "(|a71|)", "unbound_vals": [["(|a71|)", 88]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 1545180909522296160, "ast_class": "IntegerLiteral", "random": 0.004522086080558818, "src_text": "1427", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -5374631537724578404, "ast_class": "ArraySubscriptExpr", "random": 0.004541806042052898, "src_text": "(|primes|)[(|len|)++]", "unbound_vals": [["(|primes|)", 2], ["(|len|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": null, "hash": 1647199886400525815, "ast_class": "CompoundStmt", "random": 0.004553450956647054, "src_text": "{\n  struct rusage r;\n  if (getrusage(RUSAGE_SELF, &r;) != -1)\n    printf(\"Time taken: %ld.%06ld seconds\\n\", r.ru_utime.tv_sec,\n           r.ru_utime.tv_usec);\n}", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [-3865172650719615132], "is_decl": false},
{"full_stmt": true, "binary_contents": null, "hash": 5171028629610301788, "ast_class": "Var", "random": 0.0045621517229451625, "src_text": "i", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [-6857659793473511817], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": -8360539481818933492, "ast_class": "IntegerLiteral", "random": 0.004580679576351665, "src_text": "647359", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -6840917959441589836, "ast_class": "ImplicitCastExpr", "random": 0.004584997539398672, "src_text": "599", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": "8b 45 e8 8b 4d ec 69 c9 a8 00 00 00 8d 8c 0d 20 f2 ff ff 8b 94 c1 5c ff ff ff 8b b4 c1 58 ff ff ff 8b 7c c1 fc 8b 5c c1 f8 01 de 11 fa 89 34 c1 89 54 c1 04 8b 45 e8 83 c0 01 89 45 e8 e9 b4 ff ff ff e9 00 00 00 00", "hash": -4397987088229526075, "ast_class": "BinaryOperator", "random": 0.004599604393905721, "src_text": "(|grid|)[(|i|)][(|j|)] = (|grid|)[(|i|) - 1][(|j|)] + (|grid|)[(|i|)][(|j|) - 1]", "unbound_vals": [["(|i|)", 0], ["(|j|)", 0], ["(|grid|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 24) :EAX) (:MOV (- (:EBP) 20) :ECX) (:IMUL 168 :ECX :ECX) (:LEA (- (:EBP) 3552) :ECX) (:MOV (- (:ECX) 164) :EDX) (:MOV (- (:ECX) 168) :ESI) (:MOV (- (:ECX) 4) :EDI) (:MOV (- (:ECX) 8) :EBX) (:ADD :EBX :ESI) (:ADC :EDI :EDX) (:MOV :ESI (:ECX)) (:MOV :EDX (+ (:ECX) 4)) (:MOV (- (:EBP) 24) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 24)) (:JMP :ADDR) (:JMP :ADDR))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -6763633275261967634, "ast_class": "StringLiteral", "random": 0.004609077326697797, "src_text": "\"\\n\\n%d\"", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -7196572808691938651, "ast_class": "BinaryOperator", "random": 0.004619337696780912, "src_text": "(|a74|) < (|a75|) &&\n                                                                                                                                                                  (|a74|)", "unbound_vals": [["(|a74|)", 76], ["(|a75|)", 76]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -2695466062237582026, "ast_class": "CompoundStmt", "random": 0.004619375759171707, "src_text": "{\n    int cor;\n    /* Clumsy way to say it... */\n    cor = (!((|incrnum|)((|cur|)) || (|decrnum|)((|cur|)))) ? 1 : 0;\n    (|bnc|) += cor;\n    (|nbnc|) += 1 - cor;\n    (|cur|)++;\n  }", "unbound_vals": [["(|nbnc|)", 1], ["(|bnc|)", 1], ["(|cur|)", 1]], "includes": [], "unbound_funs": [["(|incrnum|)", false, false, 1], ["(|decrnum|)", false, false, 1]], "macros": [], "disasm": null, "types": [-5849325953548989793], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -5999023558883783426, "ast_class": "BinaryOperator", "random": 0.004624368304191329, "src_text": "(|up|) = 0", "unbound_vals": [["(|up|)", 3]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 2305005556353152259, "ast_class": "ImplicitCastExpr", "random": 0.004641595903579154, "src_text": "(|a4|)", "unbound_vals": [["(|a4|)", 10]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 3556808297932643440, "ast_class": "BinaryOperator", "random": 0.004665345759700568, "src_text": "(|a0|) +\n                                                                                                                                                        (|a1|) +\n                                                                                                                                                        (|a2|) +\n                                                                                                                                                        (|a3|) +\n                                                                                                                                                        (|a4|) +\n                                                                                                                                                        (|a5|) +\n                                                                                                                                                        (|a6|) +\n                                                                                                                                                        (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) +\n                                                                                                                                                        (|a25|) +\n                                                                                                                                                        (|a26|) +\n                                                                                                                                                        (|a27|) +\n                                                                                                                                                        (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|)", "unbound_vals": [["(|a0|)", 69], ["(|a1|)", 69], ["(|a2|)", 69], ["(|a3|)", 69], ["(|a4|)", 69], ["(|a5|)", 69], ["(|a6|)", 69], ["(|a7|)", 69], ["(|a8|)", 69], ["(|a9|)", 69], ["(|a10|)", 69], ["(|a11|)", 69], ["(|a12|)", 69], ["(|a13|)", 69], ["(|a14|)", 69], ["(|a15|)", 69], ["(|a16|)", 69], ["(|a17|)", 69], ["(|a18|)", 69], ["(|a19|)", 69], ["(|a20|)", 69], ["(|a21|)", 69], ["(|a22|)", 69], ["(|a23|)", 69], ["(|a24|)", 69], ["(|a25|)", 69], ["(|a26|)", 69], ["(|a27|)", 69], ["(|a28|)", 69], ["(|a29|)", 69], ["(|a30|)", 69], ["(|a31|)", 69], ["(|a32|)", 69], ["(|a33|)", 69], ["(|a34|)", 69], ["(|a35|)", 69], ["(|a36|)", 69], ["(|a37|)", 69], ["(|a38|)", 69], ["(|a39|)", 69], ["(|a40|)", 69], ["(|a41|)", 69], ["(|a42|)", 69], ["(|a43|)", 69], ["(|a44|)", 69], ["(|a45|)", 69], ["(|a46|)", 69], ["(|a47|)", 69], ["(|a48|)", 69], ["(|a49|)", 69], ["(|a50|)", 69], ["(|a51|)", 69], ["(|a52|)", 69], ["(|a53|)", 69], ["(|a54|)", 69], ["(|a55|)", 69], ["(|a56|)", 69], ["(|a57|)", 69], ["(|a58|)", 69], ["(|a59|)", 69]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -7442579722696650358, "ast_class": "CallExpr", "random": 0.0046728207133655, "src_text": "(|rectangles|)((|i|), (|j|))", "unbound_vals": [["(|i|)", 3], ["(|j|)", 2]], "includes": null, "unbound_funs": [["(|rectangles|)", null, null, 2]], "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "83 c4 58 5d c3", "hash": -7371389926576038665, "ast_class": "ReturnStmt", "random": 0.004711934131053752, "src_text": "return 0", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:ADD 88 :ESP) (:POP :EBP) (:RET))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -1571359980495065979, "ast_class": "UnaryOperator", "random": 0.004715354299313135, "src_text": "-816", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -5793031263659756305, "ast_class": "UnaryOperator", "random": 0.004721953948457314, "src_text": "-332", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 8725901741071880785, "ast_class": "BinaryOperator", "random": 0.004748042309200229, "src_text": "(|a0|) +\n                                                                                                                                                                                                               (|a1|) +\n                                                                                                                                                                                                               (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) +\n                                                                                                                                                                                                               (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) +\n                                                                                                                                                                                                               (|a39|) +\n                                                                                                                                                                                                               (|a40|) +\n                                                                                                                                                                                                               (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) +\n                                                                                                                                                                                                               (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|) + (|a61|) + (|a62|) + (|a63|) + (|a64|)", "unbound_vals": [["(|a0|)", 95], ["(|a1|)", 95], ["(|a2|)", 95], ["(|a3|)", 95], ["(|a4|)", 95], ["(|a5|)", 95], ["(|a6|)", 95], ["(|a7|)", 95], ["(|a8|)", 95], ["(|a9|)", 95], ["(|a10|)", 95], ["(|a11|)", 95], ["(|a12|)", 95], ["(|a13|)", 95], ["(|a14|)", 95], ["(|a15|)", 95], ["(|a16|)", 95], ["(|a17|)", 95], ["(|a18|)", 95], ["(|a19|)", 95], ["(|a20|)", 95], ["(|a21|)", 95], ["(|a22|)", 95], ["(|a23|)", 95], ["(|a24|)", 95], ["(|a25|)", 95], ["(|a26|)", 95], ["(|a27|)", 95], ["(|a28|)", 95], ["(|a29|)", 95], ["(|a30|)", 95], ["(|a31|)", 95], ["(|a32|)", 95], ["(|a33|)", 95], ["(|a34|)", 95], ["(|a35|)", 95], ["(|a36|)", 95], ["(|a37|)", 95], ["(|a38|)", 95], ["(|a39|)", 95], ["(|a40|)", 95], ["(|a41|)", 95], ["(|a42|)", 95], ["(|a43|)", 95], ["(|a44|)", 95], ["(|a45|)", 95], ["(|a46|)", 95], ["(|a47|)", 95], ["(|a48|)", 95], ["(|a49|)", 95], ["(|a50|)", 95], ["(|a51|)", 95], ["(|a52|)", 95], ["(|a53|)", 95], ["(|a54|)", 95], ["(|a55|)", 95], ["(|a56|)", 95], ["(|a57|)", 95], ["(|a58|)", 95], ["(|a59|)", 95], ["(|a60|)", 95], ["(|a61|)", 95], ["(|a62|)", 95], ["(|a63|)", 95], ["(|a64|)", 95]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -5379424018360812328, "ast_class": "IntegerLiteral", "random": 0.004760532033819764, "src_text": "539656", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 4389594272979773877, "ast_class": "UnaryOperator", "random": 0.004766833388566094, "src_text": "-746", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": "8b 45 f8 83 e0 01 83 f8 00 0f 84 12 00 00 00 31 c0 88 c1 f6 c1 01 0f 85 14 00 00 00 e9 1d 00 00 00 b0 01 a8 01 0f 85 05 00 00 00 e9 0e 00 00 00 8b 45 f8 c1 e8 01 89 45 f8 e9 10 00 00 00", "hash": -5056359656237981735, "ast_class": "CompoundStmt", "random": 0.004778669667509616, "src_text": "{\n        (|x|) /= 2;\n      }", "unbound_vals": [["(|x|)", 3]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 8) :EAX) (:AND 1 :EAX) (:CMP 0 :EAX) (:JE :ADDR) (:XOR :EAX :EAX) (:MOV :AL :CL) (:TEST 1 :CL) (:JNE :ADDR) (:JMP :ADDR) (:MOV 1 :AL) (:TEST 1 :AL) (:JNE :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 8) :EAX) (:SHR 1 :EAX) (:MOV :EAX (- (:EBP) 8)) (:JMP :ADDR))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 6384998487381720761, "ast_class": "DeclRefExpr", "random": 0.0047823900861359014, "src_text": "(|smallest|)", "unbound_vals": [["(|smallest|)", 2]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 1494051912686021957, "ast_class": "BinaryOperator", "random": 0.004836028922579616, "src_text": "(|j|) % 2 == 0", "unbound_vals": [["(|j|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 5202645831807836246, "ast_class": "ImplicitCastExpr", "random": 0.004867092349210789, "src_text": "(|a55|)", "unbound_vals": [["(|a55|)", 94]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -7211277753346409680, "ast_class": "BinaryOperator", "random": 0.004867306423036122, "src_text": "((|i|) >> 1) << 1", "unbound_vals": [["(|i|)", 2]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 8066050322528452868, "ast_class": "ImplicitCastExpr", "random": 0.004870513493066442, "src_text": "7517", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -7862833437519523595, "ast_class": "UnaryOperator", "random": 0.004873090468370034, "src_text": "-412", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 796144849065224484, "ast_class": "DeclRefExpr", "random": 0.004873659827744015, "src_text": "(|a82|)", "unbound_vals": [["(|a82|)", 96]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 7323495844840049320, "ast_class": "BinaryOperator", "random": 0.004892990547233467, "src_text": "(|a0|) +\n                                                                                                                                                                                                      (|a1|) +\n                                                                                                                                                                                                      (|a2|) +\n                                                                                                                                                                                                      (|a3|) +\n                                                                                                                                                                                                      (|a4|) +\n                                                                                                                                                                                                      (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|)", "unbound_vals": [["(|a0|)", 92], ["(|a1|)", 92], ["(|a2|)", 92], ["(|a3|)", 92], ["(|a4|)", 92], ["(|a5|)", 92], ["(|a6|)", 92], ["(|a7|)", 92], ["(|a8|)", 92], ["(|a9|)", 92], ["(|a10|)", 92], ["(|a11|)", 92], ["(|a12|)", 92], ["(|a13|)", 92], ["(|a14|)", 92], ["(|a15|)", 92], ["(|a16|)", 92], ["(|a17|)", 92], ["(|a18|)", 92], ["(|a19|)", 92], ["(|a20|)", 92], ["(|a21|)", 92], ["(|a22|)", 92], ["(|a23|)", 92], ["(|a24|)", 92], ["(|a25|)", 92], ["(|a26|)", 92], ["(|a27|)", 92], ["(|a28|)", 92], ["(|a29|)", 92], ["(|a30|)", 92], ["(|a31|)", 92], ["(|a32|)", 92], ["(|a33|)", 92], ["(|a34|)", 92], ["(|a35|)", 92]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -8143095325530849422, "ast_class": "DeclRefExpr", "random": 0.0049136720137042955, "src_text": "(|list|)", "unbound_vals": [["(|list|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 4789960495555938740, "ast_class": "ImplicitCastExpr", "random": 0.004914075443498311, "src_text": "(|sum_down|)", "unbound_vals": [["(|sum_down|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -4210613381183966446, "ast_class": "ImplicitCastExpr", "random": 0.004995320217564214, "src_text": "9787", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 6056953746444168714, "ast_class": "ImplicitCastExpr", "random": 0.0049990069575012175, "src_text": "(|a46|)", "unbound_vals": [["(|a46|)", 86]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 3796430526216553570, "ast_class": "Var", "random": 0.005018317580305687, "src_text": "int first2 = 1", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [-5849325953548989793], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": 5986212291852888676, "ast_class": "ImplicitCastExpr", "random": 0.005022119851660345, "src_text": "9397", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 5368525113815303027, "ast_class": "DeclRefExpr", "random": 0.005043658804757323, "src_text": "(|pos|)", "unbound_vals": [["(|pos|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -8709763150478769700, "ast_class": "ImplicitCastExpr", "random": 0.005072284483723211, "src_text": "(|a34|)", "unbound_vals": [["(|a34|)", 49]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 2198161660098260976, "ast_class": "DeclRefExpr", "random": 0.005114860412526956, "src_text": "(|a34|)", "unbound_vals": [["(|a34|)", 37]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 4914376177970057627, "ast_class": "ImplicitCastExpr", "random": 0.005136834848391114, "src_text": "(|a3|)", "unbound_vals": [["(|a3|)", 69]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 9056691096660773902, "ast_class": "BinaryOperator", "random": 0.005156894162520853, "src_text": "(|a0|) +\n                                                                                                                                                         (|a1|) +\n                                                                                                                                                         (|a2|) +\n                                                                                                                                                         (|a3|) +\n                                                                                                                                                         (|a4|) +\n                                                                                                                                                         (|a5|) +\n                                                                                                                                                         (|a6|) +\n                                                                                                                                                         (|a7|) +\n                                                                                                                                                         (|a8|) +\n                                                                                                                                                         (|a9|) +\n                                                                                                                                                         (|a10|) +\n                                                                                                                                                         (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|)", "unbound_vals": [["(|a0|)", 68], ["(|a1|)", 68], ["(|a2|)", 68], ["(|a3|)", 68], ["(|a4|)", 68], ["(|a5|)", 68], ["(|a6|)", 68], ["(|a7|)", 68], ["(|a8|)", 68], ["(|a9|)", 68], ["(|a10|)", 68], ["(|a11|)", 68], ["(|a12|)", 68], ["(|a13|)", 68], ["(|a14|)", 68], ["(|a15|)", 68], ["(|a16|)", 68], ["(|a17|)", 68], ["(|a18|)", 68], ["(|a19|)", 68], ["(|a20|)", 68], ["(|a21|)", 68], ["(|a22|)", 68], ["(|a23|)", 68], ["(|a24|)", 68], ["(|a25|)", 68], ["(|a26|)", 68], ["(|a27|)", 68], ["(|a28|)", 68], ["(|a29|)", 68], ["(|a30|)", 68], ["(|a31|)", 68], ["(|a32|)", 68], ["(|a33|)", 68], ["(|a34|)", 68], ["(|a35|)", 68], ["(|a36|)", 68], ["(|a37|)", 68], ["(|a38|)", 68], ["(|a39|)", 68], ["(|a40|)", 68], ["(|a41|)", 68], ["(|a42|)", 68], ["(|a43|)", 68], ["(|a44|)", 68], ["(|a45|)", 68], ["(|a46|)", 68], ["(|a47|)", 68], ["(|a48|)", 68], ["(|a49|)", 68], ["(|a50|)", 68], ["(|a51|)", 68]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -2897814840626818428, "ast_class": "CallExpr", "random": 0.005157558186096978, "src_text": "strlen((|buf|))", "unbound_vals": [["(|buf|)", 1]], "includes": ["<string.h>"], "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -6601335135561098019, "ast_class": "DeclRefExpr", "random": 0.005170545862295817, "src_text": "(|maxPrimes|)", "unbound_vals": [["(|maxPrimes|)", 2]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 639530191978733688, "ast_class": "BinaryOperator", "random": 0.0051818623048416335, "src_text": "(|sieve|)[(|i|)] == UNCLASSIFIED", "unbound_vals": [["(|sieve|)", 3], ["(|i|)", 1]], "includes": null, "unbound_funs": null, "macros": [["UNCLASSIFIED", "UNCLASSIFIED (char)0x0"]], "disasm": null, "types": [342363981814211588], "is_decl": null},
{"full_stmt": true, "binary_contents": "8b 45 e0 8b 4d e4 ba 11 6f 00 00 f7 e2 69 c9 11 6f 00 00 01 ca 89 45 e0 89 55 e4", "hash": -1243221354826483530, "ast_class": "CompoundAssignOperator", "random": 0.005189544768797516, "src_text": "(|product|) *= 28433", "unbound_vals": [["(|product|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 32) :EAX) (:MOV (- (:EBP) 28) :ECX) (:MOV 28433 :EDX) (:MUL 28433) (:IMUL 28433 :ECX :ECX) (:ADD :ECX :EDX) (:MOV :EAX (- (:EBP) 32)) (:MOV :EDX (- (:EBP) 28)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -7370520617293026658, "ast_class": "ArraySubscriptExpr", "random": 0.005198304014721877, "src_text": "(|arr|)[(|p|) * ((|j|)++)]", "unbound_vals": [["(|arr|)", 3], ["(|p|)", 3], ["(|j|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -531793930833141018, "ast_class": "IntegerLiteral", "random": 0.005199326725493614, "src_text": "521481", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": null, "hash": -3781302453186268836, "ast_class": "DeclStmt", "random": 0.005212595757609018, "src_text": "FILE *fp = NULL", "unbound_vals": [], "includes": ["<string.h>"], "unbound_funs": [], "macros": [], "disasm": null, "types": [8502242885860122414, -6534947291467637091], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -5859456556318724650, "ast_class": "BinaryOperator", "random": 0.005215777738068694, "src_text": "0 - (|Tri|)[(|i|)].PointB.y", "unbound_vals": [["(|i|)", 1], ["(|Tri|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 2578036462463775958, "ast_class": "ImplicitCastExpr", "random": 0.0052187161762886625, "src_text": "578551", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -5147560967519027540, "ast_class": "ImplicitCastExpr", "random": 0.005222952085128685, "src_text": "722", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "89 04 24 89 4c 24 04 e8 95 fa ff ff 89 85 6c fd ff ff", "hash": -3580515879687099363, "ast_class": "CallExpr", "random": 0.005224415262567006, "src_text": "printf(\" %s\\n\", (|a|))", "unbound_vals": [["(|a|)", 1]], "includes": ["<stdio.h>"], "unbound_funs": null, "macros": null, "disasm": "((:MOV \" %s\n\" (:ESP)) (:MOV :ECX (+ (:ESP) 4)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:MOV \" %s\n\" (- (:EBP) 660)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 5766676426934725562, "ast_class": "IntegerLiteral", "random": 0.005243817103736115, "src_text": "516122", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "89 45 e8 89 c8 83 c4 28 5d c3 0f 1f 00", "hash": -8673920361858198629, "ast_class": "ReturnStmt", "random": 0.005250072162904407, "src_text": "return 0", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV \"%d\n\" (- (:EBP) 24)) (:MOV :ECX :EAX) (:ADD 40 :ESP) (:POP :EBP) (:RET) (:NOPL (:EAX)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -1538739181406037560, "ast_class": "Var", "random": 0.005268369472302137, "src_text": "int year = 1900", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [-5849325953548989793], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": -6135092802302113782, "ast_class": "ArraySubscriptExpr", "random": 0.005276159635902999, "src_text": "GET((p - 1) >> 1)", "unbound_vals": [["(|sieve|)", 2], ["(|p|)", 1]], "includes": null, "unbound_funs": null, "macros": [["GET", "GET(b) ((sieve[(b) >> 5] >> ((b)&31)) & 1)"]], "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 7262815046077032067, "ast_class": "ImplicitCastExpr", "random": 0.005282853933953668, "src_text": "(|row|)", "unbound_vals": [["(|row|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -7861057859475284715, "ast_class": "UnaryOperator", "random": 0.005296555376120837, "src_text": "-434", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -8888400755593197839, "ast_class": "ImplicitCastExpr", "random": 0.005334021066651595, "src_text": "(|A|)[(|l|)]", "unbound_vals": [["(|l|)", 0], ["(|A|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 60302562134613775, "ast_class": "ImplicitCastExpr", "random": 0.005355335726013655, "src_text": "(|a7|)", "unbound_vals": [["(|a7|)", 53]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": null, "hash": 6272756223727893747, "ast_class": "CompoundAssignOperator", "random": 0.005357228848991591, "src_text": "(|np1|).sl += (|n|).sl", "unbound_vals": [["(|n|)", 1], ["(|np1|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 4535967347344594938, "ast_class": "ParmVar", "random": 0.005359375530930355, "src_text": "int num", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [-5849325953548989793], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": -8071062514239049138, "ast_class": "ImplicitCastExpr", "random": 0.0053635534412855845, "src_text": "\"Number 1: %d     Number 2: %d     Number 3: %d     Number 4: %d\\n\"", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "c7 45 e0 00 00 00 00", "hash": 1247496985567900891, "ast_class": "DeclStmt", "random": 0.005375991807672342, "src_text": "int i, j, k, val, count = 0", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOVL 0 (- (:EBP) 32)))", "types": [-5849325953548989793], "is_decl": null},
{"full_stmt": true, "binary_contents": "8b 45 f4 3b 45 f8 0f 8d 57 00 00 00 8b 45 f8 2b 45 f4 83 3c 85 24 a0 04 08 00 0f 84 0c 00 00 00 c7 45 fc 00 00 00 00 e9 3d 00 00 00 8b 45 f4 83 c0 01 89 45 f4 8b 45 f4 83 3c 85 24 a0 04 08 00 0f 84 05 00 00 00 e9 13 00 00 00 e9 00 00 00 00 8b 45 f4 83 c0 01 89 45 f4 e9 d7 ff ff ff e9 9d ff ff ff", "hash": -4997612498347540212, "ast_class": "WhileStmt", "random": 0.005376760089236043, "src_text": "while ((|i|) < (|j|)) {\n    if ((|abund_cache|)[(|j|) - (|i|)])\n      return 0;\n    /* set i to the next abundant number */\n    for ((|i|)++;; (|i|)++)\n      if ((|abund_cache|)[(|i|)])\n        break;\n  }", "unbound_vals": [["(|abund_cache|)", 2], ["(|j|)", 1], ["(|i|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 12) :EAX) (:CMP (- (:EBP) 8) :EAX) (:JGE :ADDR) (:MOV (- (:EBP) 8) :EAX) (:SUB (- (:EBP) 12) :EAX) (:CMPL 0 (+ (:EAX) 134520868)) (:JE :ADDR) (:MOVL 0 (- (:EBP) 4)) (:JMP :ADDR) (:MOV (- (:EBP) 12) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 12)) (:MOV (- (:EBP) 12) :EAX) (:CMPL 0 (+ (:EAX) 134520868)) (:JE :ADDR) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 12) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 12)) (:JMP :ADDR) (:JMP :ADDR))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -7124068713548261314, "ast_class": "IntegerLiteral", "random": 0.005388205997175932, "src_text": "499", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 4203492082879287193, "ast_class": "ImplicitCastExpr", "random": 0.005392501179344533, "src_text": "(|d|)", "unbound_vals": [["(|d|)", 16]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -4932899717368012310, "ast_class": "BinaryOperator", "random": 0.005396447653611691, "src_text": "(|number|) * 4", "unbound_vals": [["(|number|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -4015861112628779847, "ast_class": "ImplicitCastExpr", "random": 0.005410913836289999, "src_text": "(|a40|)", "unbound_vals": [["(|a40|)", 63]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "e9 00 00 00 00 b8 05 00 00 00 8b 0d d0 26 06 08 89 45 f0 89 c8 99 8b 4d f0 f7 f9 83 fa 00 0f 85 20 00 00 00 b8 05 00 00 00 8b 0d d0 26 06 08 89 45 ec 89 c8 99 8b 4d ec f7 f9 a3 d0 26 06 08 e9 c1 ff ff ff", "hash": 3139721759982098369, "ast_class": "WhileStmt", "random": 0.005466042599228116, "src_text": "while ((|i|) % 5 == 0)\n        (|i|) /= 5", "unbound_vals": [["(|i|)", 3]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:JMP :ADDR) (:MOV 5 :EAX) (:MOV 134620880 :ECX) (:MOV 5 (- (:EBP) 16)) (:MOV 134620880 :EAX) (:CLTD) (:MOV (- (:EBP) 16) :ECX) (:IDIV :ECX) (:CMP 0 :EDX) (:JNE :ADDR) (:MOV 5 :EAX) (:MOV 134620880 :ECX) (:MOV 5 (- (:EBP) 20)) (:MOV 134620880 :EAX) (:CLTD) (:MOV (- (:EBP) 20) :ECX) (:IDIV :ECX) (:MOV :EAX 134620880) (:JMP :ADDR))", "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "c7 45 e8 01 00 00 00 83 7d e4 07 0f 8d c2 00 00 00 f2 0f 2a 45 e8 f2 0f 11 04 24 e8 5b fe ff ff dd 5d a8 f2 0f 10 45 a8 f2 0f 10 0d 10 87 04 08 f2 0f 58 c1 f2 0f 2a 4d c0 f2 0f 58 c8 f2 0f 2c c1 89 45 c0 8b 45 c0 8b 4d e4 3b 44 8d c4 0f 8c 6c 00 00 00 8b 45 c0 8b 4d e4 89 ca 83 c2 01 89 55 e4 2b 44 8d c4 89 45 b8 8b 45 e8 89 45 b4 c7 45 e0 00 00 00 00 8b 45 e0 3b 45 b8 0f 8d 24 00 00 00 b8 0a 00 00 00 8b 4d b4 89 45 a0 89 c8 99 8b 4d a0 f7 f9 89 45 b4 8b 45 e0 83 c0 01 89 45 e0 e9 d0 ff ff ff b8 0a 00 00 00 8b 4d b4 89 45 9c 89 c8 99 8b 4d 9c f7 f9 0f af 55 bc 89 55 bc e9 00 00 00 00 8b 45 e8 83 c0 01 89 45 e8 e9 34 ff ff ff 8d 05 34 87 04 08", "hash": 328394289282720974, "ast_class": "ForStmt", "random": 0.005475858617651097, "src_text": "for ((|i|) = 1; (|j|) < MAX; ++(|i|)) {\n    (|counter|) += (|log10|)((|i|)) + 1;\n    if ((|counter|) >= (|counts|)[(|j|)]) {\n      int limit = (|counter|) - (|counts|)[(|j|)++], temp = (|i|);\n      for ((|k|) = 0; (|k|) < limit; ++(|k|))\n        temp /= 10;\n      (|prod|) *= temp % 10;\n    }\n  }", "unbound_vals": [["(|i|)", 0], ["(|j|)", 0], ["(|k|)", 0], ["(|counts|)", 0], ["(|counter|)", 0], ["(|prod|)", 0]], "includes": null, "unbound_funs": [["(|log10|)", null, null, 1]], "macros": [["MAX", "MAX 7"]], "disasm": "((:MOVL 1 (- (:EBP) 24)) (:CMPL 7 (- (:EBP) 28)) (:JGE :ADDR) (:CVTSI2SDL (- (:EBP) 24) :XMM0) (:MOVSD :XMM0 (:ESP)) (:CALL :MEMCPY) (:FSTPL (- (:EBP) 88)) (:MOVSD (- (:EBP) 88) :XMM0) (:MOVSD 1.0D0 :XMM1) (:ADDSD 1.0D0 :XMM0) (:CVTSI2SDL (- (:EBP) 64) :XMM1) (:ADDSD :XMM0 :XMM1) (:CVTTSD2SI :XMM1 :EAX) (:MOV :EAX (- (:EBP) 64)) (:MOV (- (:EBP) 64) :EAX) (:MOV (- (:EBP) 28) :ECX) (:CMP (- (:EBP) 60) :EAX) (:JL :ADDR) (:MOV (- (:EBP) 64) :EAX) (:MOV (- (:EBP) 28) :ECX) (:MOV :ECX :EDX) (:ADD 1 :EDX) (:MOV :EDX (- (:EBP) 28)) (:SUB (- (:EBP) 60) :EAX) (:MOV :EAX (- (:EBP) 72)) (:MOV (- (:EBP) 24) :EAX) (:MOV :EAX (- (:EBP) 76)) (:MOVL 0 (- (:EBP) 32)) (:MOV (- (:EBP) 32) :EAX) (:CMP (- (:EBP) 72) :EAX) (:JGE :ADDR) (:MOV 10 :EAX) (:MOV (- (:EBP) 76) :ECX) (:MOV 10 (- (:EBP) 96)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 96) :ECX) (:IDIV :ECX) (:MOV :EAX (- (:EBP) 76)) (:MOV (- (:EBP) 32) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 32)) (:JMP :ADDR) (:MOV 10 :EAX) (:MOV (- (:EBP) 76) :ECX) (:MOV 10 (- (:EBP) 100)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 100) :ECX) (:IDIV :ECX) (:IMUL (- (:EBP) 68) :EDX) (:MOV :EDX (- (:EBP) 68)) (:JMP :ADDR) (:MOV (- (:EBP) 24) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 24)) (:JMP :ADDR) (:LEA \"%d\n\" :EAX))", "types": [-5849325953548989793], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 7179822168368042183, "ast_class": "DeclRefExpr", "random": 0.005485217154353572, "src_text": "(|bico|)", "unbound_vals": [["(|bico|)", 2]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": null, "hash": 940576708339719232, "ast_class": "Function", "random": 0.005492509166019954, "src_text": "void main() {\n  double start, finish;\n  long long unsigned h, i, j, k, l, m, n;\n  printf(\"input : \");\n  scanf(\"%llu\", &h;);\n  start = clock();\n  //----------------------\n  long long unsigned a[2000], b, c, d, e, f, g;\n  a[0] = 2;\n  a[1] = 3;\n  e = 2;\n  g = 4;\n  for (c = 5; c <= 10008; c += g) {\n    f = 1;\n    for (d = 0; a[d] * a[d] <= c; d++) {\n      if (c % a[d] == 0) {\n        f = 0;\n        break;\n      }\n    }\n    if (f == 1) {\n      if (e < 2000) {\n        a[e] = c;\n      }\n      e++;\n    }\n    g = 6 - g;\n  }\n  //----------------------\n  j = 0;\n  for (i = 1; i < h; i++) {\n    if ((|prfc|)(a, i) == 2) {\n      printf(\"\\r%llu\", i);\n      //\t\t\tprintf(\"|%llu|\",i);\n      j++;\n    }\n  }\n  printf(\"\\rsolution : %llu\\n\", j);\n  finish = clock();\n  printf(\"running time : %.2lf seconds.\\n\", (finish - start) / CLOCKS_PER_SEC);\n}", "unbound_vals": [], "includes": ["<stdio.h>", "<time.h>"], "unbound_funs": [["(|prfc|)", false, false, 2]], "macros": [], "disasm": null, "types": [735379148409540298, 3456822550903822590, -4605258830889951363], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": 658080773965355029, "ast_class": "ParmVar", "random": 0.005508880539828898, "src_text": "const char *s", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [342363981814211589], "is_decl": true},
{"full_stmt": true, "binary_contents": "8b 45 f8 89 45 f0", "hash": -7656512096176513159, "ast_class": "BinaryOperator", "random": 0.005529267350273037, "src_text": "(|s|) = (|i|)", "unbound_vals": [["(|s|)", 4], ["(|i|)", 4]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 8) :EAX) (:MOV :EAX (- (:EBP) 16)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 8693376686294669451, "ast_class": "ImplicitCastExpr", "random": 0.005542672404828752, "src_text": "(|gcd|)", "unbound_vals": [], "includes": [], "unbound_funs": [["(|gcd|)", false, false, 2]], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 1904778528341092463, "ast_class": "BinaryOperator", "random": 0.00555014411980681, "src_text": "(|a0|) +\n                                                                                                                                                                                          (|a1|) +\n                                                                                                                                                                                          (|a2|) +\n                                                                                                                                                                                          (|a3|) +\n                                                                                                                                                                                          (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) +\n                                                                                                                                                                                          (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|)", "unbound_vals": [["(|a0|)", 85], ["(|a1|)", 85], ["(|a2|)", 85], ["(|a3|)", 85], ["(|a4|)", 85], ["(|a5|)", 85], ["(|a6|)", 85], ["(|a7|)", 85], ["(|a8|)", 85], ["(|a9|)", 85], ["(|a10|)", 85], ["(|a11|)", 85], ["(|a12|)", 85], ["(|a13|)", 85], ["(|a14|)", 85], ["(|a15|)", 85], ["(|a16|)", 85], ["(|a17|)", 85], ["(|a18|)", 85], ["(|a19|)", 85], ["(|a20|)", 85], ["(|a21|)", 85], ["(|a22|)", 85], ["(|a23|)", 85], ["(|a24|)", 85]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -2850767220583777708, "ast_class": "ImplicitCastExpr", "random": 0.005561898365586071, "src_text": "305426", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -6195719187637007117, "ast_class": "ArraySubscriptExpr", "random": 0.005570776942994793, "src_text": "(|digits1|)[(|p1|)[(|i|)] - '0']", "unbound_vals": [["(|i|)", 1], ["(|p1|)", 2], ["(|digits1|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -7208810930202939858, "ast_class": "ImplicitCastExpr", "random": 0.005575439962855144, "src_text": "(|a9|)", "unbound_vals": [["(|a9|)", 18]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -2867064192300147136, "ast_class": "ImplicitCastExpr", "random": 0.005575492108613078, "src_text": "(|cp|)", "unbound_vals": [["(|cp|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 406158265490317882, "ast_class": "IntegerLiteral", "random": 0.005586810511042817, "src_text": "609017", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -3915594598100003385, "ast_class": "BinaryOperator", "random": 0.005635070532392761, "src_text": "(|b|) = -999", "unbound_vals": [["(|b|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 3574197563750795501, "ast_class": "BinaryOperator", "random": 0.005639252669042416, "src_text": "(|a0|) +\n                                                                                                                                                        (|a1|) +\n                                                                                                                                                        (|a2|) +\n                                                                                                                                                        (|a3|) +\n                                                                                                                                                        (|a4|) +\n                                                                                                                                                        (|a5|) +\n                                                                                                                                                        (|a6|) +\n                                                                                                                                                        (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) +\n                                                                                                                                                        (|a25|) +\n                                                                                                                                                        (|a26|) +\n                                                                                                                                                        (|a27|) +\n                                                                                                                                                        (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|) + (|a61|) +\n                                                                                                                                                        (|a62|) +\n                                                                                                                                                        (|a63|) +\n                                                                                                                                                        (|a64|) +\n                                                                                                                                                        (|a65|)", "unbound_vals": [["(|a0|)", 69], ["(|a1|)", 69], ["(|a2|)", 69], ["(|a3|)", 69], ["(|a4|)", 69], ["(|a5|)", 69], ["(|a6|)", 69], ["(|a7|)", 69], ["(|a8|)", 69], ["(|a9|)", 69], ["(|a10|)", 69], ["(|a11|)", 69], ["(|a12|)", 69], ["(|a13|)", 69], ["(|a14|)", 69], ["(|a15|)", 69], ["(|a16|)", 69], ["(|a17|)", 69], ["(|a18|)", 69], ["(|a19|)", 69], ["(|a20|)", 69], ["(|a21|)", 69], ["(|a22|)", 69], ["(|a23|)", 69], ["(|a24|)", 69], ["(|a25|)", 69], ["(|a26|)", 69], ["(|a27|)", 69], ["(|a28|)", 69], ["(|a29|)", 69], ["(|a30|)", 69], ["(|a31|)", 69], ["(|a32|)", 69], ["(|a33|)", 69], ["(|a34|)", 69], ["(|a35|)", 69], ["(|a36|)", 69], ["(|a37|)", 69], ["(|a38|)", 69], ["(|a39|)", 69], ["(|a40|)", 69], ["(|a41|)", 69], ["(|a42|)", 69], ["(|a43|)", 69], ["(|a44|)", 69], ["(|a45|)", 69], ["(|a46|)", 69], ["(|a47|)", 69], ["(|a48|)", 69], ["(|a49|)", 69], ["(|a50|)", 69], ["(|a51|)", 69], ["(|a52|)", 69], ["(|a53|)", 69], ["(|a54|)", 69], ["(|a55|)", 69], ["(|a56|)", 69], ["(|a57|)", 69], ["(|a58|)", 69], ["(|a59|)", 69], ["(|a60|)", 69], ["(|a61|)", 69], ["(|a62|)", 69], ["(|a63|)", 69], ["(|a64|)", 69], ["(|a65|)", 69]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 4848963105743211186, "ast_class": "IntegerLiteral", "random": 0.0056442434663532826, "src_text": "300000", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "8b 4d e0 89 45 b8 89 c8 99 8b 4d b8 f7 f9 83 fa 00 0f 85 24 00 00 00 b8 02 00 00 00 8b 4d e0 89 45 b4 89 c8 99 8b 4d b4 f7 f9 89 45 e0 8b 45 e4 83 c0 01 89 45 e4 e9 c0 ff ff ff", "hash": 1045331709055922561, "ast_class": "WhileStmt", "random": 0.0056795250429100275, "src_text": "while ((|u|) % 2 == 0) {\n    (|u|) /= 2;\n    (|t|)++;\n  }", "unbound_vals": [["(|t|)", 0], ["(|u|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 32) :ECX) (:MOV 2 (- (:EBP) 72)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 72) :ECX) (:IDIV :ECX) (:CMP 0 :EDX) (:JNE :ADDR) (:MOV 2 :EAX) (:MOV (- (:EBP) 32) :ECX) (:MOV 2 (- (:EBP) 76)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 76) :ECX) (:IDIV :ECX) (:MOV :EAX (- (:EBP) 32)) (:MOV (- (:EBP) 28) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 28)) (:JMP :ADDR))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -288730555085053124, "ast_class": "ImplicitCastExpr", "random": 0.005687245613976377, "src_text": "\"there are %lli different ways can one hundred be written as a sum \"\n          \"of at least two positive integers\\n\"", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 3042083340466385496, "ast_class": "Var", "random": 0.005706068053756619, "src_text": "last", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [-5849325953548989793], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": 8509717573099624087, "ast_class": "IntegerLiteral", "random": 0.005712674828031172, "src_text": "N", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": [["N", "N 1998000"]], "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": null, "hash": 2670765522114736495, "ast_class": "BinaryOperator", "random": 0.0057185333857621146, "src_text": "(|k|) = (|i|)", "unbound_vals": [["(|i|)", 2], ["(|k|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -3963804332334038629, "ast_class": "ImplicitCastExpr", "random": 0.0057515019749486695, "src_text": "(|calc|)[(|k|) - 1 - (|point|)]", "unbound_vals": [["(|calc|)", 1], ["(|k|)", 1], ["(|point|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 1316008579589994445, "ast_class": "BinaryOperator", "random": 0.005754240233826979, "src_text": "(|buf|)[1] - 48", "unbound_vals": [["(|buf|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 7858935157187680340, "ast_class": "ImplicitCastExpr", "random": 0.005766668467300118, "src_text": "-414", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -6697315253060118441, "ast_class": "ParenExpr", "random": 0.005769823312864464, "src_text": "((|primes|) + (|ct_2|))", "unbound_vals": [["(|primes|)", 5], ["(|ct_2|)", 3]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 1598829263295352062, "ast_class": "IntegerLiteral", "random": 0.005774760762244924, "src_text": "6317", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -1572247486024570621, "ast_class": "UnaryOperator", "random": 0.0057861237753957795, "src_text": "-860", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 8867754626053361061, "ast_class": "BinaryOperator", "random": 0.005815869019418107, "src_text": "120 * (|b|)[5]", "unbound_vals": [["(|b|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -8131313357321178844, "ast_class": "ImplicitCastExpr", "random": 0.0058541426577859434, "src_text": "(|a22|)", "unbound_vals": [["(|a22|)", 30]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 3424147107195309265, "ast_class": "BinaryOperator", "random": 0.005855819226105119, "src_text": "(|a0|) +\n                                                                                                     (|a1|)", "unbound_vals": [["(|a0|)", 45], ["(|a1|)", 45]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "8b 85 10 f8 ff ff 83 c0 01 89 85 10 f8 ff ff", "hash": -1393719731781453792, "ast_class": "UnaryOperator", "random": 0.005859791444537299, "src_text": "(|c|)++", "unbound_vals": [["(|c|)", 3]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 2032) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 2032)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -5431599899753485654, "ast_class": "IntegerLiteral", "random": 0.005863150393890182, "src_text": "677", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 7871770297834317729, "ast_class": "DeclRefExpr", "random": 0.00586475479562365, "src_text": "(|a57|)", "unbound_vals": [["(|a57|)", 71]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 8007422633607098433, "ast_class": "BinaryOperator", "random": 0.00587032143002475, "src_text": "(|a0|) +\n                                                                                                                                                        (|a1|) +\n                                                                                                                                                        (|a2|) +\n                                                                                                                                                        (|a3|) +\n                                                                                                                                                        (|a4|) +\n                                                                                                                                                        (|a5|) +\n                                                                                                                                                        (|a6|) +\n                                                                                                                                                        (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) +\n                                                                                                                                                        (|a25|) +\n                                                                                                                                                        (|a26|) +\n                                                                                                                                                        (|a27|) +\n                                                                                                                                                        (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|)", "unbound_vals": [["(|a0|)", 69], ["(|a1|)", 69], ["(|a2|)", 69], ["(|a3|)", 69], ["(|a4|)", 69], ["(|a5|)", 69], ["(|a6|)", 69], ["(|a7|)", 69], ["(|a8|)", 69], ["(|a9|)", 69], ["(|a10|)", 69], ["(|a11|)", 69], ["(|a12|)", 69], ["(|a13|)", 69], ["(|a14|)", 69], ["(|a15|)", 69], ["(|a16|)", 69], ["(|a17|)", 69], ["(|a18|)", 69], ["(|a19|)", 69], ["(|a20|)", 69], ["(|a21|)", 69], ["(|a22|)", 69], ["(|a23|)", 69], ["(|a24|)", 69], ["(|a25|)", 69], ["(|a26|)", 69], ["(|a27|)", 69], ["(|a28|)", 69], ["(|a29|)", 69], ["(|a30|)", 69], ["(|a31|)", 69], ["(|a32|)", 69], ["(|a33|)", 69], ["(|a34|)", 69], ["(|a35|)", 69], ["(|a36|)", 69], ["(|a37|)", 69], ["(|a38|)", 69], ["(|a39|)", 69], ["(|a40|)", 69], ["(|a41|)", 69], ["(|a42|)", 69], ["(|a43|)", 69], ["(|a44|)", 69], ["(|a45|)", 69], ["(|a46|)", 69], ["(|a47|)", 69], ["(|a48|)", 69], ["(|a49|)", 69]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "c7 45 ec 00 00 00 00 89 85 8c b4 b3 ff 81 7d ec 40 42 0f 00 0f 8d 3c 00 00 00 8b 45 ec 0f be 84 05 a8 bd f0 ff 83 f8 02 0f 85 15 00 00 00 8b 45 ec 8b 4d e8 89 ca 83 c2 01 89 55 e8 89 84 8d a8 b4 b3 ff e9 00 00 00 00 8b 45 ec 83 c0 01 89 45 ec e9 b7 ff ff ff", "hash": 6147613482653746825, "ast_class": "ForStmt", "random": 0.005878530738190557, "src_text": "for ((|i|) = 0; (|i|) < NUMBERS; ++(|i|)) {\n    if ((|numbers|)[(|i|)] == 2)\n      (|primes|)[(|pos|)++] = (|i|);\n  }", "unbound_vals": [["(|numbers|)", 0], ["(|i|)", 0], ["(|pos|)", 0], ["(|primes|)", 0]], "includes": null, "unbound_funs": null, "macros": [["NUMBERS", "NUMBERS 1000000"]], "disasm": "((:MOVL 0 (- (:EBP) 20)) (:MOV :EAX (- (:EBP) 5000052)) (:CMPL 1000000 (- (:EBP) 20)) (:JGE :ADDR) (:MOV (- (:EBP) 20) :EAX) (:MOVSBL (- (:EBP) 1000024) :EAX) (:CMP 2 :EAX) (:JNE :ADDR) (:MOV (- (:EBP) 20) :EAX) (:MOV (- (:EBP) 24) :ECX) (:MOV :ECX :EDX) (:ADD 1 :EDX) (:MOV :EDX (- (:EBP) 24)) (:MOV :EAX (- (:EBP) 5000024)) (:JMP :ADDR) (:MOV (- (:EBP) 20) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 20)) (:JMP :ADDR))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 3419973905872914138, "ast_class": "ImplicitCastExpr", "random": 0.005879492864047653, "src_text": "307838", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -5361974035040879954, "ast_class": "BinaryOperator", "random": 0.00592855450118146, "src_text": "(|a0|) > 0", "unbound_vals": [["(|a0|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 6892063697948250869, "ast_class": "DeclRefExpr", "random": 0.0059506516271992105, "src_text": "(|a40|)", "unbound_vals": [["(|a40|)", 91]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -3424425980850607748, "ast_class": "IntegerLiteral", "random": 0.005961401997395255, "src_text": "546304", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 7264077157813851168, "ast_class": "IntegerLiteral", "random": 0.005971788114815912, "src_text": "563093", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -3891026903311881681, "ast_class": "ImplicitCastExpr", "random": 0.00597246326230827, "src_text": "(|increase|)", "unbound_vals": null, "includes": null, "unbound_funs": [["(|increase|)", true, null, 1]], "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -1451140476663850945, "ast_class": "ImplicitCastExpr", "random": 0.0060241443344388745, "src_text": "(|d|)[5 - (|i|)]", "unbound_vals": [["(|d|)", 3], ["(|i|)", 3]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": null, "hash": 6211814579719595003, "ast_class": "DeclStmt", "random": 0.006032443727150172, "src_text": "register int i, count, flag", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [-5849325953548989793], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 4024757439286511586, "ast_class": "ImplicitCastExpr", "random": 0.00603557593828552, "src_text": "(|currentPrime|)", "unbound_vals": [["(|currentPrime|)", 2]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -1784176889068520010, "ast_class": "Var", "random": 0.0060374621592327316, "src_text": "el *b = (el *)(|_b|)", "unbound_vals": [["(|_b|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [5953258789645446873], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": 6591641758596923546, "ast_class": "BinaryOperator", "random": 0.006040366720489687, "src_text": "(|a1|) * 1000000000", "unbound_vals": [["(|a1|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 7751371526810941636, "ast_class": "InitListExpr", "random": 0.006054394673158492, "src_text": "{-294, 365, -41, 342, 74, -892}", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 130807335625302538, "ast_class": "BinaryOperator", "random": 0.006069949960076482, "src_text": "(|a0|) +\n                                                                                                                                                                      (|a1|) +\n                                                                                                                                                                      (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|)", "unbound_vals": [["(|a0|)", 77], ["(|a1|)", 77], ["(|a2|)", 77], ["(|a3|)", 77], ["(|a4|)", 77], ["(|a5|)", 77], ["(|a6|)", 77], ["(|a7|)", 77], ["(|a8|)", 77]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -4352055900588508522, "ast_class": "BinaryOperator", "random": 0.006075209537056647, "src_text": "(|counter|) < 10001", "unbound_vals": [["(|counter|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -9171170868422455116, "ast_class": "ImplicitCastExpr", "random": 0.006085129526433031, "src_text": "884833", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -6281893230034410607, "ast_class": "BinaryOperator", "random": 0.006088518638584173, "src_text": "(|a0|) + (|a1|) + (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|)", "unbound_vals": [["(|a0|)", 65], ["(|a1|)", 65], ["(|a2|)", 65], ["(|a3|)", 65], ["(|a4|)", 65], ["(|a5|)", 65], ["(|a6|)", 65], ["(|a7|)", 65], ["(|a8|)", 65], ["(|a9|)", 65], ["(|a10|)", 65], ["(|a11|)", 65], ["(|a12|)", 65], ["(|a13|)", 65], ["(|a14|)", 65], ["(|a15|)", 65], ["(|a16|)", 65], ["(|a17|)", 65], ["(|a18|)", 65], ["(|a19|)", 65], ["(|a20|)", 65], ["(|a21|)", 65], ["(|a22|)", 65], ["(|a23|)", 65], ["(|a24|)", 65], ["(|a25|)", 65], ["(|a26|)", 65], ["(|a27|)", 65], ["(|a28|)", 65], ["(|a29|)", 65], ["(|a30|)", 65], ["(|a31|)", 65], ["(|a32|)", 65], ["(|a33|)", 65], ["(|a34|)", 65], ["(|a35|)", 65], ["(|a36|)", 65], ["(|a37|)", 65], ["(|a38|)", 65], ["(|a39|)", 65], ["(|a40|)", 65], ["(|a41|)", 65]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -2492968681640223262, "ast_class": "BinaryOperator", "random": 0.006100160308807334, "src_text": "(|a0|) +\n                                                                                                                                     (|a1|) +\n                                                                                                                                     (|a2|) +\n                                                                                                                                     (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) +\n                                                                                                                                     (|a34|)", "unbound_vals": [["(|a0|)", 58], ["(|a1|)", 58], ["(|a2|)", 58], ["(|a3|)", 58], ["(|a4|)", 58], ["(|a5|)", 58], ["(|a6|)", 58], ["(|a7|)", 58], ["(|a8|)", 58], ["(|a9|)", 58], ["(|a10|)", 58], ["(|a11|)", 58], ["(|a12|)", 58], ["(|a13|)", 58], ["(|a14|)", 58], ["(|a15|)", 58], ["(|a16|)", 58], ["(|a17|)", 58], ["(|a18|)", 58], ["(|a19|)", 58], ["(|a20|)", 58], ["(|a21|)", 58], ["(|a22|)", 58], ["(|a23|)", 58], ["(|a24|)", 58], ["(|a25|)", 58], ["(|a26|)", 58], ["(|a27|)", 58], ["(|a28|)", 58], ["(|a29|)", 58], ["(|a30|)", 58], ["(|a31|)", 58], ["(|a32|)", 58], ["(|a33|)", 58], ["(|a34|)", 58]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "8b 45 e0 83 c0 01 89 45 e4", "hash": -2930585628809393216, "ast_class": "BinaryOperator", "random": 0.006139582127407506, "src_text": "(|n|) = (|m|) + 1", "unbound_vals": [["(|n|)", 1], ["(|m|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 32) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 28)))", "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": null, "hash": 3046381624335764475, "ast_class": "BinaryOperator", "random": 0.006158571617542408, "src_text": "(|i|) = (|off|) - 1", "unbound_vals": [["(|i|)", 0], ["(|off|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -915108990546314768, "ast_class": "ArraySubscriptExpr", "random": 0.006162389605847807, "src_text": "(|prime|)[0]", "unbound_vals": [["(|prime|)", 2]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": null, "hash": -1638842153981902063, "ast_class": "ForStmt", "random": 0.006188008301701076, "src_text": "for ((|i|) = 0; fgets((|buf|), 1024, (|fp|)); (|i|)++) {\n    (|bp|) = strtok((|buf|), \",\");\n    for ((|j|) = 0; (|bp|) != NULL; (|j|)++) {\n      (|nodes|)[(|i|)][(|j|)].val = (|atoi|)((|bp|));\n      (|nodes|)[(|i|)][(|j|)].cost = inf;\n\n      if ((|j|) != MAX_WIDTH - 1)\n        (|nodes|)[(|i|)][(|j|)].right = &(|nodes|);\n      [i][j + 1];\n\n      if ((|i|) != MAX_HEIGHT - 1)\n        (|nodes|)[(|i|)][(|j|)].down = &(|nodes|);\n      [i + 1][j];\n\n      (|bp|) = strtok(NULL, \",\");\n    }\n  }", "unbound_vals": [["(|nodes|)", 0], ["(|buf|)", 0], ["(|bp|)", 0], ["(|i|)", 0], ["(|j|)", 0], ["(|fp|)", 0]], "includes": ["<stdio.h>", "<string.h>"], "unbound_funs": [["(|atoi|)", false, false, 0]], "macros": [["MAX_HEIGHT", "MAX_HEIGHT 80"], ["MAX_WIDTH", "MAX_WIDTH 80"]], "disasm": null, "types": [-6534947291467637091], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -6643621421244812718, "ast_class": "ImplicitCastExpr", "random": 0.006192774902280873, "src_text": "(|i|)", "unbound_vals": [["(|i|)", 6]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 6452295172782543503, "ast_class": "UnaryOperator", "random": 0.006201708930081762, "src_text": "-606", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 6765219745759804982, "ast_class": "BinaryOperator", "random": 0.006229158924250355, "src_text": "4 * (|x|)", "unbound_vals": [["(|x|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 8548545493938205073, "ast_class": "UnaryOperator", "random": 0.0062319748954630105, "src_text": "(|cycle_size|)--", "unbound_vals": [["(|cycle_size|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 852126337582228116, "ast_class": "ImplicitCastExpr", "random": 0.00623406899395107, "src_text": "(|set|)[(|p|) - 1 + (|k|)]", "unbound_vals": [["(|set|)", 1], ["(|p|)", 1], ["(|k|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -6240637232092622173, "ast_class": "ParenExpr", "random": 0.006238066575581014, "src_text": "((|num_cntr|) + 1)", "unbound_vals": [["(|num_cntr|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 214217994444709311, "ast_class": "ImplicitCastExpr", "random": 0.0062527822875720895, "src_text": "(|primes|)", "unbound_vals": [["(|primes|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 3736187879950197447, "ast_class": "Var", "random": 0.006275925006270722, "src_text": "area_b", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [3529751552447467760], "is_decl": true},
{"full_stmt": true, "binary_contents": "c7 45 e8 00 00 00 00", "hash": 1049069331357934688, "ast_class": "DeclStmt", "random": 0.006279143714823965, "src_text": "int sum = 0", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOVL 0 (- (:EBP) 24)))", "types": [-5849325953548989793], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -4431524213492149270, "ast_class": "DeclRefExpr", "random": 0.006297115102819162, "src_text": "(|reverse|)", "unbound_vals": [], "includes": [], "unbound_funs": [["(|reverse|)", false, false, 1]], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "55 89 e5 83 ec 38 8d 05 28 a0 04 08 c7 45 fc 00 00 00 00 c7 45 f0 00 00 00 00 89 04 24 e8 be 00 00 00 89 45 f8 83 7d f8 00 0f 8e 49 00 00 00 8d 05 28 a0 04 08 89 04 24 e8 23 01 00 00 8d 0d 28 a0 04 08 89 45 f4 89 0c 24 89 45 ec e8 8f 00 00 00 8b 4d ec 39 c1 0f 85 09 00 00 00 8b 45 f4 03 45 f0 89 45 f0 e8 d6 01 00 00 8b 45 f8 83 c0 ff 89 45 f8 e9 ad ff ff ff 8d 05 64 88 04 08 8b 4d f0 83 e9 01 89 04 24 89 4c 24 04 e8 20 fe ff ff 89 45 e8 e8 38 fe ff ff 8d 0d 69 88 04 08 f3 0f 10 05 60 88 04 08 f3 0f 2a c8 f3 0f 5e c8 f3 0f 5a c1 89 0c 24 f2 0f 11 44 24 04 e8 f0 fd ff ff 8d 0d 70 88 04 08 89 0c 24 89 45 e4 e8 ef fd ff ff 8b 4d fc 89 45 e0 89 c8 83 c4 38 5d c3 66 90", "hash": 8380711088276208397, "ast_class": "Function", "random": 0.006297536963840278, "src_text": "int main() {\n  int i, sum;\n  int total = 0;\n  for (i = (|convert|)((|digits|)); i > 0; i--) {\n    if ((sum = (|digitsum|)((|digits|))) == (|convert|)((|digits|)))\n      total += sum;\n    (|decrement|)();\n  }\n  printf(\"%i\\n\\n\", total - 1);\n  printf(\"%0.3f\\n\", ((float)clock()) / CLOCKS_PER_SEC);\n  (|system|)(\"pause\");\n}", "unbound_vals": [["(|digits|)", 1]], "includes": ["<stdio.h>", "<time.h>"], "unbound_funs": [["(|convert|)", null, null, 1], ["(|digitsum|)", null, null, 1], ["(|decrement|)", true, null, 0], ["(|system|)", null, null, 0]], "macros": null, "disasm": "((:PUSH :EBP) (:MOV :ESP :EBP) (:SUB 56 :ESP) (:LEA :ADDR :EAX) (:MOVL 0 (- (:EBP) 4)) (:MOVL 0 (- (:EBP) 16)) (:MOV 134520872 (:ESP)) (:CALL :CONVERT) (:MOV 134520872 (- (:EBP) 8)) (:CMPL 0 (- (:EBP) 8)) (:JLE :ADDR) (:LEA :ADDR :EAX) (:MOV 134520872 (:ESP)) (:CALL :DIGITSUM) (:LEA :ADDR :ECX) (:MOV 134520872 (- (:EBP) 12)) (:MOV 134520872 (:ESP)) (:MOV 134520872 (- (:EBP) 20)) (:CALL :CONVERT) (:MOV (- (:EBP) 20) :ECX) (:CMP 134520872 :ECX) (:JNE :ADDR) (:MOV (- (:EBP) 12) :EAX) (:ADD (- (:EBP) 16) :EAX) (:MOV :EAX (- (:EBP) 16)) (:CALL :DECREMENT) (:MOV (- (:EBP) 8) :EAX) (:ADD 4294967295 :EAX) (:MOV :EAX (- (:EBP) 8)) (:JMP :ADDR) (:LEA \"%i\n\n\" :EAX) (:MOV (- (:EBP) 16) :ECX) (:SUB 1 :ECX) (:MOV \"%i\n\n\" (:ESP)) (:MOV :ECX (+ (:ESP) 4)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:MOV \"%i\n\n\" (- (:EBP) 24)) (:CALL :SYSTEM) (:LEA \"%0.3f\n\" :ECX) (:MOVSS 1000000.0 :XMM0) (:CVTSI2SS \"%i\n\n\" :XMM1) (:DIVSS 1000000.0 :XMM1) (:CVTSS2SD :XMM1 :XMM0) (:MOV \"%0.3f\n\" (:ESP)) (:MOVSD :XMM0 (+ (:ESP) 4)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:LEA \"pause\" :ECX) (:MOV \"pause\" (:ESP)) (:MOV \"%i\n\n\" (- (:EBP) 28)) (:CALL :PRINTF) (:MOV (- (:EBP) 4) :ECX) (:MOV \"%i\n\n\" (- (:EBP) 32)) (:MOV :ECX :EAX) (:ADD 56 :ESP) (:POP :EBP) (:RET) (:XCHG :AX :AX))", "types": [3529751552447467760, -5849325953548989793], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": 374117057535971458, "ast_class": "ArraySubscriptExpr", "random": 0.006319149118012124, "src_text": "(|row|)[(|j|)]", "unbound_vals": [["(|row|)", 1], ["(|j|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 1977259291153569213, "ast_class": "UnaryOperator", "random": 0.006319434992445472, "src_text": "isdigit(ch = fgetc(fp))", "unbound_vals": null, "includes": ["<ctype.h>"], "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": null, "hash": 3150459250508618341, "ast_class": "IfStmt", "random": 0.0063274885826175575, "src_text": "if ((|an|) == 2 * (|a0|) && (((|r|) % 2) || (|first|)++))\n        break", "unbound_vals": [["(|r|)", 1], ["(|a0|)", 2], ["(|an|)", 2], ["(|first|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 6761011942120860231, "ast_class": "ImplicitCastExpr", "random": 0.006354507602281401, "src_text": "(|pow10|)((|digit|)) - 1", "unbound_vals": [["(|digit|)", 1]], "includes": null, "unbound_funs": [["(|pow10|)", null, null, 0]], "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": null, "hash": -8421150302434500255, "ast_class": "BinaryOperator", "random": 0.006355696107312125, "src_text": "(|u|) = (|u|) >> 1", "unbound_vals": [["(|u|)", 5]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": null, "hash": -5023711715720267991, "ast_class": "Var", "random": 0.0063586888624121984, "src_text": "int k", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [-5849325953548989793], "is_decl": true},
{"full_stmt": true, "binary_contents": "c7 45 f0 e8 03 00 00 81 7d f0 10 27 00 00 0f 8d d0 01 00 00 8b 45 f0 89 04 24 e8 58 ff ff ff 83 f8 00 0f 85 05 00 00 00 e9 a9 01 00 00 8d 05 20 89 04 08 8d 4d a8 8b 55 f0 89 0c 24 89 44 24 04 89 54 24 08 e8 0e fe ff ff 8d 0d 41 89 04 08 8d 55 a8 89 14 24 89 4c 24 04 89 45 98 e8 96 fd ff ff 31 c9 ba 10 27 00 00 89 45 a4 8b 45 a0 89 04 24 c7 44 24 04 00 00 00 00 c7 44 24 08 10 27 00 00 89 55 94 89 4d 90 e8 bb fd ff ff b8 40 00 00 00 8d 4d a8 8b 55 a4 89 0c 24 c7 44 24 04 40 00 00 00 89 54 24 08 89 45 8c e8 39 fd ff ff 83 f8 00 0f 85 05 00 00 00 e9 9d 00 00 00 31 c0 b9 0a 00 00 00 8d 55 a8 89 14 24 c7 44 24 04 00 00 00 00 c7 44 24 08 0a 00 00 00 89 45 88 89 4d 84 e8 83 fd ff ff 89 45 ec 8b 45 ec 3b 45 f0 0f 85 05 00 00 00 e9 94 ff ff ff 8b 45 ec 89 04 24 e8 74 fe ff ff 83 f8 00 0f 84 48 00 00 00 8b 45 ec 3b 45 f0 0f 8d 05 00 00 00 e9 6f ff ff ff b8 02 00 00 00 8b 4d ec 2b 4d f0 89 4d e8 8b 4d e8 8b 55 a0 8a 1c 0a 80 c3 01 88 1c 0a 8b 4d e8 89 45 80 89 c8 99 8b 4d 80 f7 f9 8b 75 a0 8a 1c 06 80 c3 01 88 1c 06 e9 33 ff ff ff c7 45 ec 00 00 00 00 81 7d ec 10 27 00 00 0f 8d 58 00 00 00 8b 45 ec 8b 4d a0 0f be 04 01 83 f8 02 0f 8c 32 00 00 00 8d 05 43 89 04 08 8b 4d f0 8b 55 f0 03 55 ec 8b 75 f0 03 75 ec 03 75 ec 89 04 24 89 4c 24 04 89 54 24 08 89 74 24 0c e8 2b fc ff ff 89 85 7c ff ff ff e9 00 00 00 00 8b 45 ec 83 c0 01 89 45 ec e9 9b ff ff ff 8b 45 a4 89 04 24 e8 57 fc ff ff 89 85 78 ff ff ff 8b 45 f0 83 c0 01 89 45 f0 e9 23 fe ff ff 31 c0", "hash": -1092543207927701509, "ast_class": "ForStmt", "random": 0.0063639368447987454, "src_text": "for ((|i|) = 1000; (|i|) < 10000; (|i|)++) {\n    if (!(|isprime|)((|i|)))\n      continue;\n    sprintf((|s|), \"../../obs/permutate %d | sort -u\", (|i|));\n    (|p|) = popen((|s|), \"r\");\n    memset((|a|), 0, 10000);\n    while (1) {\n      if (!fgets((|s|), sizeof((|s|)), (|p|)))\n        break;\n      (|n|) = strtol((|s|), 0, 10);\n      if ((|n|) == (|i|))\n        continue;\n      if ((|isprime|)((|n|))) {\n        if ((|n|) < (|i|))\n          continue;\n        (|d|) = (|n|) - (|i|);\n        (|a|)[(|d|)]++;\n        (|a|)[(|d|) / 2]++;\n      }\n    }\n    for ((|n|) = 0; (|n|) < 10000; (|n|)++) {\n      if ((|a|)[(|n|)] >= 2) {\n        printf(\"MATCH %d %d %d\\n\", (|i|), (|i|) + (|n|), (|i|) + (|n|) + (|n|));\n      }\n    }\n    pclose((|p|));\n  }", "unbound_vals": [["(|a|)", 0], ["(|d|)", 0], ["(|s|)", 0], ["(|n|)", 0], ["(|i|)", 0], ["(|p|)", 0]], "includes": ["<stdio.h>", "<stdlib.h>", "<string.h>"], "unbound_funs": [["(|isprime|)", null, null, 1]], "macros": null, "disasm": "((:MOVL 1000 (- (:EBP) 16)) (:CMPL 10000 (- (:EBP) 16)) (:JGE :ADDR) (:MOV (- (:EBP) 16) :EAX) (:MOV :EAX (:ESP)) (:CALL :ISPRIME) (:CMP 0 :EAX) (:JNE :ADDR) (:JMP :ADDR) (:LEA \"../../obs/permutate %d | sort -u\" :EAX) (:LEA (- (:EBP) 88) :ECX) (:MOV (- (:EBP) 16) :EDX) (:MOV :ECX (:ESP)) (:MOV \"../../obs/permutate %d | sort -u\" (+ (:ESP) 4)) (:MOV :EDX (+ (:ESP) 8)) (:CALL :MEMSET) (:LEA \"r\" :ECX) (:LEA (- (:EBP) 88) :EDX) (:MOV :EDX (:ESP)) (:MOV \"r\" (+ (:ESP) 4)) (:MOV \"../../obs/permutate %d | sort -u\" (- (:EBP) 104)) (:CALL :FGETS) (:XOR \"r\" :ECX) (:MOV 10000 :EDX) (:MOV \"../../obs/permutate %d | sort -u\" (- (:EBP) 92)) (:MOV (- (:EBP) 96) :EAX) (:MOV :EAX (:ESP)) (:MOVL 0 (+ (:ESP) 4)) (:MOVL 10000 (+ (:ESP) 8)) (:MOV 10000 (- (:EBP) 108)) (:MOV :ECX (- (:EBP) 112)) (:CALL :__LIBC_START_MAIN) (:MOV 64 :EAX) (:LEA (- (:EBP) 88) :ECX) (:MOV (- (:EBP) 92) :EDX) (:MOV :ECX (:ESP)) (:MOVL 64 (+ (:ESP) 4)) (:MOV :EDX (+ (:ESP) 8)) (:MOV 64 (- (:EBP) 116)) (:CALL :PRINTF) (:CMP 0 :EAX) (:JNE :ADDR) (:JMP :ADDR) (:XOR :EAX :EAX) (:MOV 10 :ECX) (:LEA (- (:EBP) 88) :EDX) (:MOV :EDX (:ESP)) (:MOVL 0 (+ (:ESP) 4)) (:MOVL 10 (+ (:ESP) 8)) (:MOV :EAX (- (:EBP) 120)) (:MOV 10 (- (:EBP) 124)) (:CALL :_JV_REGISTERCLASSES) (:MOV :EAX (- (:EBP) 20)) (:MOV (- (:EBP) 20) :EAX) (:CMP (- (:EBP) 16) :EAX) (:JNE :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 20) :EAX) (:MOV :EAX (:ESP)) (:CALL :ISPRIME) (:CMP 0 :EAX) (:JE :ADDR) (:MOV (- (:EBP) 20) :EAX) (:CMP (- (:EBP) 16) :EAX) (:JGE :ADDR) (:JMP :ADDR) (:MOV 2 :EAX) (:MOV (- (:EBP) 20) :ECX) (:SUB (- (:EBP) 16) :ECX) (:MOV :ECX (- (:EBP) 24)) (:MOV (- (:EBP) 24) :ECX) (:MOV (- (:EBP) 96) :EDX) (:MOV (:EDX) :BL) (:ADD 1 :BL) (:MOV :BL (:EDX)) (:MOV (- (:EBP) 24) :ECX) (:MOV 2 (- (:EBP) 128)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 128) :ECX) (:IDIV :ECX) (:MOV (- (:EBP) 96) :ESI) (:MOV (:ESI) :BL) (:ADD 1 :BL) (:MOV :BL (:ESI)) (:JMP :ADDR) (:MOVL 0 (- (:EBP) 20)) (:CMPL 10000 (- (:EBP) 20)) (:JGE :ADDR) (:MOV (- (:EBP) 20) :EAX) (:MOV (- (:EBP) 96) :ECX) (:MOVSBL (:ECX) :EAX) (:CMP 2 :EAX) (:JL :ADDR) (:LEA \"MATCH %d %d %d\n\" :EAX) (:MOV (- (:EBP) 16) :ECX) (:MOV (- (:EBP) 16) :EDX) (:ADD (- (:EBP) 20) :EDX) (:MOV (- (:EBP) 16) :ESI) (:ADD (- (:EBP) 20) :ESI) (:ADD (- (:EBP) 20) :ESI) (:MOV \"MATCH %d %d %d\n\" (:ESP)) (:MOV :ECX (+ (:ESP) 4)) (:MOV :EDX (+ (:ESP) 8)) (:MOV :ESI (+ (:ESP) 12)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:MOV \"MATCH %d %d %d\n\" (- (:EBP) 132)) (:JMP :ADDR) (:MOV (- (:EBP) 20) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 20)) (:JMP :ADDR) (:MOV (- (:EBP) 92) :EAX) (:MOV :EAX (:ESP)) (:CALL :__GMON_START__) (:MOV :EAX (- (:EBP) 136)) (:MOV (- (:EBP) 16) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 16)) (:JMP :ADDR) (:XOR :EAX :EAX))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -3855474010915093560, "ast_class": "BinaryOperator", "random": 0.006367195849970031, "src_text": "(|a0|) +\n                                                                                                                                                                                                (|a1|) + (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) +\n                                                                                                                                                                                                (|a15|) +\n                                                                                                                                                                                                (|a16|) +\n                                                                                                                                                                                                (|a17|) +\n                                                                                                                                                                                                (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) +\n                                                                                                                                                                                                (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) +\n                                                                                                                                                                                                (|a53|) +\n                                                                                                                                                                                                (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|)", "unbound_vals": [["(|a0|)", 88], ["(|a1|)", 88], ["(|a2|)", 88], ["(|a3|)", 88], ["(|a4|)", 88], ["(|a5|)", 88], ["(|a6|)", 88], ["(|a7|)", 88], ["(|a8|)", 88], ["(|a9|)", 88], ["(|a10|)", 88], ["(|a11|)", 88], ["(|a12|)", 88], ["(|a13|)", 88], ["(|a14|)", 88], ["(|a15|)", 88], ["(|a16|)", 88], ["(|a17|)", 88], ["(|a18|)", 88], ["(|a19|)", 88], ["(|a20|)", 88], ["(|a21|)", 88], ["(|a22|)", 88], ["(|a23|)", 88], ["(|a24|)", 88], ["(|a25|)", 88], ["(|a26|)", 88], ["(|a27|)", 88], ["(|a28|)", 88], ["(|a29|)", 88], ["(|a30|)", 88], ["(|a31|)", 88], ["(|a32|)", 88], ["(|a33|)", 88], ["(|a34|)", 88], ["(|a35|)", 88], ["(|a36|)", 88], ["(|a37|)", 88], ["(|a38|)", 88], ["(|a39|)", 88], ["(|a40|)", 88], ["(|a41|)", 88], ["(|a42|)", 88], ["(|a43|)", 88], ["(|a44|)", 88], ["(|a45|)", 88], ["(|a46|)", 88], ["(|a47|)", 88], ["(|a48|)", 88], ["(|a49|)", 88], ["(|a50|)", 88], ["(|a51|)", 88], ["(|a52|)", 88], ["(|a53|)", 88], ["(|a54|)", 88], ["(|a55|)", 88], ["(|a56|)", 88], ["(|a57|)", 88], ["(|a58|)", 88], ["(|a59|)", 88], ["(|a60|)", 88]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -7862213771816530351, "ast_class": "BinaryOperator", "random": 0.006381155453437315, "src_text": "(|a0|) +\n                                                                                                                                                                                                (|a1|) + (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) +\n                                                                                                                                                                                                (|a15|) +\n                                                                                                                                                                                                (|a16|) +\n                                                                                                                                                                                                (|a17|) +\n                                                                                                                                                                                                (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) +\n                                                                                                                                                                                                (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) +\n                                                                                                                                                                                                (|a53|) +\n                                                                                                                                                                                                (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|) + (|a61|) + (|a62|)", "unbound_vals": [["(|a0|)", 88], ["(|a1|)", 88], ["(|a2|)", 88], ["(|a3|)", 88], ["(|a4|)", 88], ["(|a5|)", 88], ["(|a6|)", 88], ["(|a7|)", 88], ["(|a8|)", 88], ["(|a9|)", 88], ["(|a10|)", 88], ["(|a11|)", 88], ["(|a12|)", 88], ["(|a13|)", 88], ["(|a14|)", 88], ["(|a15|)", 88], ["(|a16|)", 88], ["(|a17|)", 88], ["(|a18|)", 88], ["(|a19|)", 88], ["(|a20|)", 88], ["(|a21|)", 88], ["(|a22|)", 88], ["(|a23|)", 88], ["(|a24|)", 88], ["(|a25|)", 88], ["(|a26|)", 88], ["(|a27|)", 88], ["(|a28|)", 88], ["(|a29|)", 88], ["(|a30|)", 88], ["(|a31|)", 88], ["(|a32|)", 88], ["(|a33|)", 88], ["(|a34|)", 88], ["(|a35|)", 88], ["(|a36|)", 88], ["(|a37|)", 88], ["(|a38|)", 88], ["(|a39|)", 88], ["(|a40|)", 88], ["(|a41|)", 88], ["(|a42|)", 88], ["(|a43|)", 88], ["(|a44|)", 88], ["(|a45|)", 88], ["(|a46|)", 88], ["(|a47|)", 88], ["(|a48|)", 88], ["(|a49|)", 88], ["(|a50|)", 88], ["(|a51|)", 88], ["(|a52|)", 88], ["(|a53|)", 88], ["(|a54|)", 88], ["(|a55|)", 88], ["(|a56|)", 88], ["(|a57|)", 88], ["(|a58|)", 88], ["(|a59|)", 88], ["(|a60|)", 88], ["(|a61|)", 88], ["(|a62|)", 88]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -6626176801109681383, "ast_class": "Var", "random": 0.006416781771863556, "src_text": "cur", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [-6857659793473511817], "is_decl": true},
{"full_stmt": true, "binary_contents": "55 89 e5 56 83 ec 34 8b 45 14 8b 4d 10 8b 55 0c 8b 75 08 89 75 f4 89 55 f0 89 4d ec 89 45 e8 8b 45 e8 8b 4d ec 69 c9 40 01 00 00 03 4d f0 83 3c 81 00 0f 84 1a 00 00 00 8b 45 e8 8b 4d ec 69 c9 40 01 00 00 03 4d f0 8b 04 81 89 45 f8 e9 ec 00 00 00 83 7d e8 4f 0f 8d 2b 00 00 00 8b 45 f4 8b 4d f0 8b 55 ec 8b 75 e8 83 c6 01 89 04 24 89 4c 24 04 89 54 24 08 89 74 24 0c e8 81 ff ff ff 89 45 e4 e9 07 00 00 00 c7 45 e4 ff ff ff 7f 83 7d ec 4f 0f 8d 2b 00 00 00 8b 45 f4 8b 4d f0 8b 55 ec 83 c2 01 8b 75 e8 89 04 24 89 4c 24 04 89 54 24 08 89 74 24 0c e8 45 ff ff ff 89 45 e0 e9 07 00 00 00 c7 45 e0 ff ff ff 7f 8b 45 e4 3b 45 e0 0f 8d 2c 00 00 00 8b 45 e8 8b 4d ec 69 c9 40 01 00 00 03 4d f4 8b 04 81 03 45 e4 8b 4d e8 8b 55 ec 69 d2 40 01 00 00 03 55 f0 89 04 8a e9 27 00 00 00 8b 45 e8 8b 4d ec 69 c9 40 01 00 00 03 4d f4 8b 04 81 03 45 e0 8b 4d e8 8b 55 ec 69 d2 40 01 00 00 03 55 f0 89 04 8a 8b 45 e8 8b 4d ec 69 c9 40 01 00 00 03 4d f0 8b 04 81 89 45 f8 8b 45 f8 83 c4 34 5e 5d c3 66 0f 1f 84 00 00 00 00 00", "hash": -736501035390328462, "ast_class": "Function", "random": 0.006424139666487694, "src_text": "int minimal_path_sum(int matrix[80][80], int path_sums[80][80], int y, int x) {\n  int sum_right, sum_down;\n  if (path_sums[y][x])\n    return path_sums[y][x];\n\n  if (x < 79)\n    sum_right = (|minimal_path_sum|)(matrix, path_sums, y, x + 1);\n  else\n    sum_right = INT_MAX;\n\n  if (y < 79)\n    sum_down = (|minimal_path_sum|)(matrix, path_sums, y + 1, x);\n  else\n    sum_down = INT_MAX;\n\n  if (sum_right < sum_down)\n    path_sums[y][x] = matrix[y][x] + sum_right;\n  else\n    path_sums[y][x] = matrix[y][x] + sum_down;\n  return path_sums[y][x];\n}", "unbound_vals": null, "includes": null, "unbound_funs": [["(|minimal_path_sum|)", null, null, 4]], "macros": null, "disasm": "((:PUSH :EBP) (:MOV :ESP :EBP) (:PUSH :ESI) (:SUB 52 :ESP) (:MOV (+ (:EBP) 20) :EAX) (:MOV (+ (:EBP) 16) :ECX) (:MOV (+ (:EBP) 12) :EDX) (:MOV (+ (:EBP) 8) :ESI) (:MOV :ESI (- (:EBP) 12)) (:MOV :EDX (- (:EBP) 16)) (:MOV :ECX (- (:EBP) 20)) (:MOV :EAX (- (:EBP) 24)) (:MOV (- (:EBP) 24) :EAX) (:MOV (- (:EBP) 20) :ECX) (:IMUL 320 :ECX :ECX) (:ADD (- (:EBP) 16) :ECX) (:CMPL 0 (:ECX)) (:JE :ADDR) (:MOV (- (:EBP) 24) :EAX) (:MOV (- (:EBP) 20) :ECX) (:IMUL 320 :ECX :ECX) (:ADD (- (:EBP) 16) :ECX) (:MOV (:ECX) :EAX) (:MOV :EAX (- (:EBP) 8)) (:JMP :ADDR) (:CMPL 79 (- (:EBP) 24)) (:JGE :ADDR) (:MOV (- (:EBP) 12) :EAX) (:MOV (- (:EBP) 16) :ECX) (:MOV (- (:EBP) 20) :EDX) (:MOV (- (:EBP) 24) :ESI) (:ADD 1 :ESI) (:MOV :EAX (:ESP)) (:MOV :ECX (+ (:ESP) 4)) (:MOV :EDX (+ (:ESP) 8)) (:MOV :ESI (+ (:ESP) 12)) (:CALL :MINIMAL_PATH_SUM) (:MOV :EAX (- (:EBP) 28)) (:JMP :ADDR) (:MOVL 2147483647 (- (:EBP) 28)) (:CMPL 79 (- (:EBP) 20)) (:JGE :ADDR) (:MOV (- (:EBP) 12) :EAX) (:MOV (- (:EBP) 16) :ECX) (:MOV (- (:EBP) 20) :EDX) (:ADD 1 :EDX) (:MOV (- (:EBP) 24) :ESI) (:MOV :EAX (:ESP)) (:MOV :ECX (+ (:ESP) 4)) (:MOV :EDX (+ (:ESP) 8)) (:MOV :ESI (+ (:ESP) 12)) (:CALL :MINIMAL_PATH_SUM) (:MOV :EAX (- (:EBP) 32)) (:JMP :ADDR) (:MOVL 2147483647 (- (:EBP) 32)) (:MOV (- (:EBP) 28) :EAX) (:CMP (- (:EBP) 32) :EAX) (:JGE :ADDR) (:MOV (- (:EBP) 24) :EAX) (:MOV (- (:EBP) 20) :ECX) (:IMUL 320 :ECX :ECX) (:ADD (- (:EBP) 12) :ECX) (:MOV (:ECX) :EAX) (:ADD (- (:EBP) 28) :EAX) (:MOV (- (:EBP) 24) :ECX) (:MOV (- (:EBP) 20) :EDX) (:IMUL 320 :EDX :EDX) (:ADD (- (:EBP) 16) :EDX) (:MOV :EAX (:EDX)) (:JMP :ADDR) (:MOV (- (:EBP) 24) :EAX) (:MOV (- (:EBP) 20) :ECX) (:IMUL 320 :ECX :ECX) (:ADD (- (:EBP) 12) :ECX) (:MOV (:ECX) :EAX) (:ADD (- (:EBP) 32) :EAX) (:MOV (- (:EBP) 24) :ECX) (:MOV (- (:EBP) 20) :EDX) (:IMUL 320 :EDX :EDX) (:ADD (- (:EBP) 16) :EDX) (:MOV :EAX (:EDX)) (:MOV (- (:EBP) 24) :EAX) (:MOV (- (:EBP) 20) :ECX) (:IMUL 320 :ECX :ECX) (:ADD (- (:EBP) 16) :ECX) (:MOV (:ECX) :EAX) (:MOV :EAX (- (:EBP) 8)) (:MOV (- (:EBP) 8) :EAX) (:ADD 52 :ESP) (:POP :ESI) (:POP :EBP) (:RET) (:NOPW (+ (:EAX) 0)))", "types": [-5849325953548989793], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": -4065161138645708628, "ast_class": "BinaryOperator", "random": 0.006427977673379992, "src_text": "3 * 2", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -2088140091003763328, "ast_class": "BinaryOperator", "random": 0.006470814373955247, "src_text": "(|mask|) == (|limit|)", "unbound_vals": [["(|mask|)", 0], ["(|limit|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "8b 45 f4 03 45 ec 89 45 ec", "hash": 3149647392923571228, "ast_class": "CompoundAssignOperator", "random": 0.006482020469705918, "src_text": "(|sum|) += (|a|)", "unbound_vals": [["(|a|)", 2], ["(|sum|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 12) :EAX) (:ADD (- (:EBP) 20) :EAX) (:MOV :EAX (- (:EBP) 20)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -7280463003427578332, "ast_class": "IntegerLiteral", "random": 0.006511776220447407, "src_text": "580377", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -4315177160560390990, "ast_class": "BinaryOperator", "random": 0.006562304849400125, "src_text": "(|a79|) < (|a80|) &&\n                                                                                                                                                                            (|a79|)", "unbound_vals": [["(|a79|)", 81], ["(|a80|)", 81]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 4393144274685185679, "ast_class": "UnaryOperator", "random": 0.006573135203265856, "src_text": "-787", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -3021311722199427366, "ast_class": "BinaryOperator", "random": 0.006589583246207065, "src_text": "(|a0|) +\n                                                                          (|a1|) +\n                                                                          (|a2|) +\n                                                                          (|a3|)", "unbound_vals": [["(|a0|)", 30], ["(|a1|)", 30], ["(|a2|)", 30], ["(|a3|)", 30]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 833528316136811085, "ast_class": "Field", "random": 0.006603682744132144, "src_text": "int digits[MAXDIGITS];", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [["MAXDIGITS", "MAXDIGITS 200"]], "disasm": null, "types": [], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": 9086804946518279577, "ast_class": "ArraySubscriptExpr", "random": 0.0066071767144101345, "src_text": "(|s|)[1]", "unbound_vals": [["(|s|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": null, "hash": 6684561476779907046, "ast_class": "Function", "random": 0.006629308651441068, "src_text": "inline int next_prime(int n) {\n  while ((|psieve|)[++n] == 1)\n    ;\n  return n;\n}", "unbound_vals": [["(|psieve|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [-5849325953548989793], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": 4820026037070407410, "ast_class": "Var", "random": 0.006658585754534818, "src_text": "long largest = 0", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [-6857659793473511817], "is_decl": true},
{"full_stmt": true, "binary_contents": "8b 45 f8 0f af 45 f8 89 04 24 e8 05 ff ff ff 83 f8 00 0f 84 09 00 00 00 8b 45 f0 83 c0 01 89 45 f0", "hash": 6209890841067239667, "ast_class": "IfStmt", "random": 0.00666831168733506, "src_text": "if ((|is_prime|)((|side|) * (|side|)))\n      (|primes|)++", "unbound_vals": [["(|side|)", 1], ["(|primes|)", 1]], "includes": null, "unbound_funs": [["(|is_prime|)", null, null, 1]], "macros": null, "disasm": "((:MOV (- (:EBP) 8) :EAX) (:IMUL (- (:EBP) 8) :EAX) (:MOV :EAX (:ESP)) (:CALL :IS_PRIME) (:CMP 0 :EAX) (:JE :ADDR) (:MOV (- (:EBP) 16) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 16)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 4373480421161210919, "ast_class": "BinaryOperator", "random": 0.006671008104915388, "src_text": "(|a3|) * 100 + (|a4|) * 10", "unbound_vals": [["(|a3|)", 0], ["(|a4|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -5276836919274464649, "ast_class": "BinaryOperator", "random": 0.006679855147637914, "src_text": "(|a68|) >=\n                                                                                                                                              0", "unbound_vals": [["(|a68|)", 68]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 3270091165216634567, "ast_class": "BinaryOperator", "random": 0.00669499805336593, "src_text": "(|b|)[(|l|)] - 0x30", "unbound_vals": [["(|b|)", 2], ["(|l|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -7118743029960567518, "ast_class": "IntegerLiteral", "random": 0.0067323449319633966, "src_text": "475", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 2553177932849951839, "ast_class": "ImplicitCastExpr", "random": 0.006734322082247446, "src_text": "(|arr|)[(|i|)][(|j|) + 2]", "unbound_vals": [["(|arr|)", 2], ["(|i|)", 2], ["(|j|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -6890394409143450804, "ast_class": "ImplicitCastExpr", "random": 0.006744540782794184, "src_text": "(|a12|)", "unbound_vals": [["(|a12|)", 33]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -3143898040633399028, "ast_class": "ImplicitCastExpr", "random": 0.006762093327479124, "src_text": "\"%d in %.4f secs\\n\"", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -5560612023722717095, "ast_class": "DeclRefExpr", "random": 0.0068054168408855364, "src_text": "(|a41|)", "unbound_vals": [["(|a41|)", 94]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -9217680686468820250, "ast_class": "IntegerLiteral", "random": 0.0068067123425754605, "src_text": "507333", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -8582722991495971986, "ast_class": "BinaryOperator", "random": 0.00681362931483076, "src_text": "(|a0|) +\n                                                                                                                                                                   (|a1|) +\n                                                                                                                                                                   (|a2|) +\n                                                                                                                                                                   (|a3|) +\n                                                                                                                                                                   (|a4|) +\n                                                                                                                                                                   (|a5|) +\n                                                                                                                                                                   (|a6|) +\n                                                                                                                                                                   (|a7|) +\n                                                                                                                                                                   (|a8|) +\n                                                                                                                                                                   (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) +\n                                                                                                                                                                   (|a33|) +\n                                                                                                                                                                   (|a34|) +\n                                                                                                                                                                   (|a35|) +\n                                                                                                                                                                   (|a36|) +\n                                                                                                                                                                   (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|) + (|a61|) + (|a62|) + (|a63|)", "unbound_vals": [["(|a0|)", 75], ["(|a1|)", 75], ["(|a2|)", 75], ["(|a3|)", 75], ["(|a4|)", 75], ["(|a5|)", 75], ["(|a6|)", 75], ["(|a7|)", 75], ["(|a8|)", 75], ["(|a9|)", 75], ["(|a10|)", 75], ["(|a11|)", 75], ["(|a12|)", 75], ["(|a13|)", 75], ["(|a14|)", 75], ["(|a15|)", 75], ["(|a16|)", 75], ["(|a17|)", 75], ["(|a18|)", 75], ["(|a19|)", 75], ["(|a20|)", 75], ["(|a21|)", 75], ["(|a22|)", 75], ["(|a23|)", 75], ["(|a24|)", 75], ["(|a25|)", 75], ["(|a26|)", 75], ["(|a27|)", 75], ["(|a28|)", 75], ["(|a29|)", 75], ["(|a30|)", 75], ["(|a31|)", 75], ["(|a32|)", 75], ["(|a33|)", 75], ["(|a34|)", 75], ["(|a35|)", 75], ["(|a36|)", 75], ["(|a37|)", 75], ["(|a38|)", 75], ["(|a39|)", 75], ["(|a40|)", 75], ["(|a41|)", 75], ["(|a42|)", 75], ["(|a43|)", 75], ["(|a44|)", 75], ["(|a45|)", 75], ["(|a46|)", 75], ["(|a47|)", 75], ["(|a48|)", 75], ["(|a49|)", 75], ["(|a50|)", 75], ["(|a51|)", 75], ["(|a52|)", 75], ["(|a53|)", 75], ["(|a54|)", 75], ["(|a55|)", 75], ["(|a56|)", 75], ["(|a57|)", 75], ["(|a58|)", 75], ["(|a59|)", 75], ["(|a60|)", 75], ["(|a61|)", 75], ["(|a62|)", 75], ["(|a63|)", 75]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -1979759297143934685, "ast_class": "BinaryOperator", "random": 0.006822008060361706, "src_text": "(|abundants|)[(|j|)] && (|i|) + (|j|) < MAX", "unbound_vals": [["(|abundants|)", 3], ["(|i|)", 3], ["(|j|)", 3]], "includes": null, "unbound_funs": null, "macros": [["MAX", "MAX (28123 + 1)"]], "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 5611456632874929255, "ast_class": "Var", "random": 0.006826432259576909, "src_text": "bool isFound = false", "unbound_vals": null, "includes": ["<stdbool.h>"], "unbound_funs": null, "macros": null, "disasm": null, "types": [-5864957900383334482], "is_decl": true},
{"full_stmt": true, "binary_contents": "8b 45 f0 8b 4d e0 c1 e1 01 39 c8 0f 84 5f 00 00 00 8b 45 f4 0f af 45 f0 2b 45 f8 89 45 f8 8b 45 ec 8b 4d f8 0f af 4d f8 29 c8 99 f7 7d f4 89 45 f4 f2 0f 2a 45 ec 89 e0 f2 0f 11 00 e8 e4 fd ff ff dd 5d c8 f2 0f 10 45 c8 f2 0f 2a 4d f8 f2 0f 58 c1 f2 0f 2a 4d f4 f2 0f 5e c1 f2 0f 2c c0 89 45 f0 8b 45 e4 83 c0 01 89 45 e4 e9 90 ff ff ff b8 02 00 00 00", "hash": 7271687911714327090, "ast_class": "WhileStmt", "random": 0.006838657032216644, "src_text": "while ((|a|) != 2 * (|t|)) {\n      (|m|) = (|d|) * (|a|) - (|m|);\n      (|d|) = ((|i|) - (|m|) * (|m|)) / (|d|);\n      (|a|) = ((|sqrt|)((|i|)) + (|m|)) / (|d|);\n      (|q|)++;\n    }", "unbound_vals": [["(|a|)", 1], ["(|d|)", 1], ["(|m|)", 1], ["(|i|)", 1], ["(|q|)", 1], ["(|t|)", 1]], "includes": null, "unbound_funs": [["(|sqrt|)", null, null, 1]], "macros": null, "disasm": "((:MOV (- (:EBP) 16) :EAX) (:MOV (- (:EBP) 32) :ECX) (:SHL 1 :ECX) (:CMP :ECX :EAX) (:JE :ADDR) (:MOV (- (:EBP) 12) :EAX) (:IMUL (- (:EBP) 16) :EAX) (:SUB (- (:EBP) 8) :EAX) (:MOV :EAX (- (:EBP) 8)) (:MOV (- (:EBP) 20) :EAX) (:MOV (- (:EBP) 8) :ECX) (:IMUL (- (:EBP) 8) :ECX) (:SUB :ECX :EAX) (:CLTD) (:IDIVL (- (:EBP) 12)) (:MOV :EAX (- (:EBP) 12)) (:CVTSI2SDL (- (:EBP) 20) :XMM0) (:MOV :ESP :EAX) (:MOVSD :XMM0 (:EAX)) (:CALL :__LIBC_START_MAIN) (:FSTPL (- (:EBP) 56)) (:MOVSD (- (:EBP) 56) :XMM0) (:CVTSI2SDL (- (:EBP) 8) :XMM1) (:ADDSD :XMM1 :XMM0) (:CVTSI2SDL (- (:EBP) 12) :XMM1) (:DIVSD :XMM1 :XMM0) (:CVTTSD2SI :XMM0 :EAX) (:MOV :EAX (- (:EBP) 16)) (:MOV (- (:EBP) 28) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 28)) (:JMP :ADDR) (:MOV 2 :EAX))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -3845041577567596290, "ast_class": "BinaryOperator", "random": 0.00684876001284862, "src_text": "(|k|) < 10", "unbound_vals": [["(|k|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -7208810930202939831, "ast_class": "ImplicitCastExpr", "random": 0.006905367707016996, "src_text": "(|a9|)", "unbound_vals": [["(|a9|)", 45]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -7600906937942278566, "ast_class": "BinaryOperator", "random": 0.006911059247477591, "src_text": "(|a50|) =\n                                                                                                              (|d|) -\n                                                                                                              ((|a0|) +\n                                                                                                               (|a1|) +\n                                                                                                               (|a2|) +\n                                                                                                               (|a3|) +\n                                                                                                               (|a4|) +\n                                                                                                               (|a5|) +\n                                                                                                               (|a6|) +\n                                                                                                               (|a7|) +\n                                                                                                               (|a8|) +\n                                                                                                               (|a9|) +\n                                                                                                               (|a10|) +\n                                                                                                               (|a11|) +\n                                                                                                               (|a12|) +\n                                                                                                               (|a13|) +\n                                                                                                               (|a14|) +\n                                                                                                               (|a15|) +\n                                                                                                               (|a16|) +\n                                                                                                               (|a17|) +\n                                                                                                               (|a18|) +\n                                                                                                               (|a19|) +\n                                                                                                               (|a20|) +\n                                                                                                               (|a21|) +\n                                                                                                               (|a22|) +\n                                                                                                               (|a23|) +\n                                                                                                               (|a24|) +\n                                                                                                               (|a25|) +\n                                                                                                               (|a26|) +\n                                                                                                               (|a27|) +\n                                                                                                               (|a28|) +\n                                                                                                               (|a29|) +\n                                                                                                               (|a30|) +\n                                                                                                               (|a31|) +\n                                                                                                               (|a32|) +\n                                                                                                               (|a33|) +\n                                                                                                               (|a34|) +\n                                                                                                               (|a35|) +\n                                                                                                               (|a36|) +\n                                                                                                               (|a37|) +\n                                                                                                               (|a38|) +\n                                                                                                               (|a39|) +\n                                                                                                               (|a40|) +\n                                                                                                               (|a41|) +\n                                                                                                               (|a42|) +\n                                                                                                               (|a43|) +\n                                                                                                               (|a44|) +\n                                                                                                               (|a45|) +\n                                                                                                               (|a46|) +\n                                                                                                               (|a47|) +\n                                                                                                               (|a48|) +\n                                                                                                               (|a49|))", "unbound_vals": [["(|d|)", 50], ["(|a0|)", 50], ["(|a1|)", 50], ["(|a2|)", 50], ["(|a3|)", 50], ["(|a4|)", 50], ["(|a5|)", 50], ["(|a6|)", 50], ["(|a7|)", 50], ["(|a8|)", 50], ["(|a9|)", 50], ["(|a10|)", 50], ["(|a11|)", 50], ["(|a12|)", 50], ["(|a13|)", 50], ["(|a14|)", 50], ["(|a15|)", 50], ["(|a16|)", 50], ["(|a17|)", 50], ["(|a18|)", 50], ["(|a19|)", 50], ["(|a20|)", 50], ["(|a21|)", 50], ["(|a22|)", 50], ["(|a23|)", 50], ["(|a24|)", 50], ["(|a25|)", 50], ["(|a26|)", 50], ["(|a27|)", 50], ["(|a28|)", 50], ["(|a29|)", 50], ["(|a30|)", 50], ["(|a31|)", 50], ["(|a32|)", 50], ["(|a33|)", 50], ["(|a34|)", 50], ["(|a35|)", 50], ["(|a36|)", 50], ["(|a37|)", 50], ["(|a38|)", 50], ["(|a39|)", 50], ["(|a40|)", 50], ["(|a41|)", 50], ["(|a42|)", 50], ["(|a43|)", 50], ["(|a44|)", 50], ["(|a45|)", 50], ["(|a46|)", 50], ["(|a47|)", 50], ["(|a48|)", 50], ["(|a49|)", 50], ["(|a50|)", 50]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": null, "hash": 4754438035999286675, "ast_class": "DeclStmt", "random": 0.0069227233919925135, "src_text": "long int solution", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [-6857659793473511817], "is_decl": null},
{"full_stmt": true, "binary_contents": null, "hash": 4898305648412524691, "ast_class": "ForStmt", "random": 0.006935494365399308, "src_text": "for ((|i|) = 0; (|i|) <= (|count|); (|i|)++)\n    for ((|j|) = (|i|) + (|terms|); (|j|) <= (|count|); (|j|)++) {\n      (|n|) = (|SumPrimes|)[(|j|)] - (|SumPrimes|)[(|i|)];\n      if ((|j|) - (|i|) > (|terms|) && (|is_prime|)((|n|))) {\n        (|terms|) = (|j|) - (|i|);\n        (|max_prime|) = (|n|);\n      }\n    }", "unbound_vals": [["(|SumPrimes|)", 2], ["(|i|)", 0], ["(|j|)", 0], ["(|count|)", 0], ["(|terms|)", 0], ["(|n|)", 0], ["(|max_prime|)", 0]], "includes": [], "unbound_funs": [["(|is_prime|)", false, false, 1]], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -1276099814138022721, "ast_class": "BinaryOperator", "random": 0.006939240272301861, "src_text": "(|sum|) <= 2 * (|z|)", "unbound_vals": [["(|z|)", 1], ["(|sum|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 8643030930609731169, "ast_class": "FloatingLiteral", "random": 0.006954317993445591, "src_text": ".0", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -6463940111109709503, "ast_class": "ImplicitCastExpr", "random": 0.00695740120372601, "src_text": "(|isp|)[(|i|)]", "unbound_vals": [["(|isp|)", 2], ["(|i|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -2906374476223273339, "ast_class": "ImplicitCastExpr", "random": 0.006978785592437475, "src_text": "(|psieve|)[(|i|) * (|i|) + (|a|) * (|i|) + (|b|)]", "unbound_vals": [["(|a|)", 2], ["(|b|)", 2], ["(|psieve|)", 3], ["(|i|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -3621850814207194447, "ast_class": "BinaryOperator", "random": 0.0070124014699662895, "src_text": "(|a0|) +\n                                                                                                                                     (|a1|) +\n                                                                                                                                     (|a2|) +\n                                                                                                                                     (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|)", "unbound_vals": [["(|a0|)", 59], ["(|a1|)", 59], ["(|a2|)", 59], ["(|a3|)", 59], ["(|a4|)", 59], ["(|a5|)", 59], ["(|a6|)", 59], ["(|a7|)", 59], ["(|a8|)", 59], ["(|a9|)", 59], ["(|a10|)", 59], ["(|a11|)", 59], ["(|a12|)", 59], ["(|a13|)", 59], ["(|a14|)", 59], ["(|a15|)", 59], ["(|a16|)", 59], ["(|a17|)", 59], ["(|a18|)", 59], ["(|a19|)", 59], ["(|a20|)", 59], ["(|a21|)", 59]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 2843738190689191729, "ast_class": "BinaryOperator", "random": 0.007021354494278764, "src_text": "(|a0|) +\n                                                                                                                 (|a1|) +\n                                                                                                                 (|a2|) +\n                                                                                                                 (|a3|) +\n                                                                                                                 (|a4|) +\n                                                                                                                 (|a5|) +\n                                                                                                                 (|a6|) +\n                                                                                                                 (|a7|) +\n                                                                                                                 (|a8|) +\n                                                                                                                 (|a9|)", "unbound_vals": [["(|a0|)", 51], ["(|a1|)", 51], ["(|a2|)", 51], ["(|a3|)", 51], ["(|a4|)", 51], ["(|a5|)", 51], ["(|a6|)", 51], ["(|a7|)", 51], ["(|a8|)", 51], ["(|a9|)", 51]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": null, "hash": -1853650384682251145, "ast_class": "Var", "random": 0.007021627766541361, "src_text": "char comp[N] = {0}", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": [["N", "N 100000"]], "disasm": null, "types": [5753727017960068073], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": -1646084306738320096, "ast_class": "ImplicitCastExpr", "random": 0.007034839523159753, "src_text": "(|total|)", "unbound_vals": [["(|total|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 1483309704212279898, "ast_class": "ArraySubscriptExpr", "random": 0.007041143082429313, "src_text": "(|dec|).str[3]", "unbound_vals": [["(|dec|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 7443251947099699912, "ast_class": "BinaryOperator", "random": 0.0070463665778538465, "src_text": "(|p|) < 2", "unbound_vals": [["(|p|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 4903312494827799602, "ast_class": "ImplicitCastExpr", "random": 0.007046570625890425, "src_text": "(|vet|)[(|a|)++]", "unbound_vals": [["(|a|)", 0], ["(|vet|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "8b 4d a8 8b 7d ac 29 c8 19 fa 89 45 c8 89 55 cc", "hash": 7867380815241085113, "ast_class": "BinaryOperator", "random": 0.007063135291149769, "src_text": "(|s3|) = (|s2|) - (|length|)", "unbound_vals": [["(|s2|)", 1], ["(|s3|)", 1], ["(|length|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 88) :ECX) (:MOV (- (:EBP) 84) :EDI) (:SUB :ECX :EAX) (:SBB :EDI :EDX) (:MOV :EAX (- (:EBP) 56)) (:MOV :EDX (- (:EBP) 52)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 8764446922857027994, "ast_class": "IntegerLiteral", "random": 0.007085833823121335, "src_text": "145", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "c7 45 fc 01 00 00 00 81 7d fc 20 a1 07 00 0f 8f 6d 00 00 00 8b 45 fc c1 e0 01 89 45 f8 81 7d f8 40 42 0f 00 0f 8f 44 00 00 00 8b 45 fc 8b 4d f8 03 04 8d 30 a0 04 08 89 04 8d 30 a0 04 08 8b 45 f8 81 3c 85 30 a0 04 08 40 42 0f 00 0f 8e 0e 00 00 00 8b 45 f8 c7 04 85 30 a0 04 08 41 42 0f 00 8b 45 fc 03 45 f8 89 45 f8 e9 af ff ff ff e9 00 00 00 00 8b 45 fc 83 c0 01 89 45 fc e9 86 ff ff ff", "hash": 8851409037712250922, "ast_class": "ForStmt", "random": 0.007087100035971239, "src_text": "for ((|i|) = 1; (|i|) <= 500000; ++(|i|)) {\n    int j = 2 * (|i|);\n    while (j <= 1000000) {\n      (|sumDivisorsTab|)[j] += (|i|);\n      if ((|sumDivisorsTab|)[j] > 1000000) {\n        (|sumDivisorsTab|)[j] = 1000001;\n      }\n      j += (|i|);\n    }\n  }", "unbound_vals": [["(|sumDivisorsTab|)", 2], ["(|i|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOVL 1 (- (:EBP) 4)) (:CMPL 500000 (- (:EBP) 4)) (:JG :ADDR) (:MOV (- (:EBP) 4) :EAX) (:SHL 1 :EAX) (:MOV :EAX (- (:EBP) 8)) (:CMPL 1000000 (- (:EBP) 8)) (:JG :ADDR) (:MOV (- (:EBP) 4) :EAX) (:MOV (- (:EBP) 8) :ECX) (:ADD (+ (:ECX) 134520880) :EAX) (:MOV :EAX (+ (:ECX) 134520880)) (:MOV (- (:EBP) 8) :EAX) (:CMPL 1000000 (+ (:EAX) 134520880)) (:JLE :ADDR) (:MOV (- (:EBP) 8) :EAX) (:MOVL 1000001 (+ (:EAX) 134520880)) (:MOV (- (:EBP) 4) :EAX) (:ADD (- (:EBP) 8) :EAX) (:MOV :EAX (- (:EBP) 8)) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 4) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 4)) (:JMP :ADDR))", "types": [-5849325953548989793], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 7987231112847143805, "ast_class": "DeclRefExpr", "random": 0.007088835704562424, "src_text": "(|a66|)", "unbound_vals": [["(|a66|)", 79]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -9023385540757218828, "ast_class": "ImplicitCastExpr", "random": 0.007094797506518757, "src_text": "(|ceil|)", "unbound_vals": [], "includes": [], "unbound_funs": [["(|ceil|)", false, false, 1]], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -1166007558843124184, "ast_class": "BinaryOperator", "random": 0.00710286762135981, "src_text": "(|num|)[1] = (|j|) % 10", "unbound_vals": [["(|j|)", 2], ["(|num|)", 2]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 7830522620750106050, "ast_class": "ImplicitCastExpr", "random": 0.007104297013843519, "src_text": "628892", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "89 45 dc e8 f6 fb ff ff 31 c9", "hash": 4482589298318840722, "ast_class": "CallExpr", "random": 0.007104556106251936, "src_text": "getchar()", "unbound_vals": null, "includes": ["<stdio.h>"], "unbound_funs": null, "macros": null, "disasm": "((:MOV \"\n\n%d\" (- (:EBP) 36)) (:CALL :PRINTF) (:XOR :ECX :ECX))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 733883407101937850, "ast_class": "Var", "random": 0.007129507580424188, "src_text": "long long unsigned h[] = {\n      2,    3,    5,    7,    11,   13,   17,   19,   23,   29,   31,   37,\n      41,   43,   47,   53,   59,   61,   67,   71,   73,   79,   83,   89,\n      97,   101,  103,  107,  109,  113,  127,  131,  137,  139,  149,  151,\n      157,  163,  167,  173,  179,  181,  191,  193,  197,  199,  211,  223,\n      227,  229,  233,  239,  241,  251,  257,  263,  269,  271,  277,  281,\n      283,  293,  307,  311,  313,  317,  331,  337,  347,  349,  353,  359,\n      367,  373,  379,  383,  389,  397,  401,  409,  419,  421,  431,  433,\n      439,  443,  449,  457,  461,  463,  467,  479,  487,  491,  499,  503,\n      509,  521,  523,  541,  547,  557,  563,  569,  571,  577,  587,  593,\n      599,  601,  607,  613,  617,  619,  631,  641,  643,  647,  653,  659,\n      661,  673,  677,  683,  691,  701,  709,  719,  727,  733,  739,  743,\n      751,  757,  761,  769,  773,  787,  797,  809,  811,  821,  823,  827,\n      829,  839,  853,  857,  859,  863,  877,  881,  883,  887,  907,  911,\n      919,  929,  937,  941,  947,  953,  967,  971,  977,  983,  991,  997,\n      1009, 1013, 1019, 1021, 1031, 1033, 1039, 1049, 1051, 1061, 1063, 1069,\n      1087, 1091, 1093, 1097, 1103, 1109, 1117, 1123, 1129, 1151, 1153, 1163,\n      1171, 1181, 1187, 1193, 1201, 1213, 1217, 1223, 1229, 1231, 1237, 1249,\n      1259, 1277, 1279, 1283, 1289, 1291, 1297, 1301, 1303, 1307, 1319, 1321,\n      1327, 1361, 1367, 1373, 1381, 1399, 1409, 1423, 1427, 1429, 1433, 1439,\n      1447, 1451, 1453, 1459, 1471, 1481, 1483, 1487, 1489, 1493, 1499, 1511,\n      1523, 1531, 1543, 1549, 1553, 1559, 1567, 1571, 1579, 1583, 1597, 1601,\n      1607, 1609, 1613, 1619, 1621, 1627, 1637, 1657, 1663, 1667, 1669, 1693,\n      1697, 1699, 1709, 1721, 1723, 1733, 1741, 1747, 1753, 1759, 1777, 1783,\n      1787, 1789, 1801, 1811, 1823, 1831, 1847, 1861, 1867, 1871, 1873, 1877,\n      1879, 1889, 1901, 1907, 1913, 1931, 1933, 1949, 1951, 1973, 1979, 1987,\n      1993, 1997, 1999, 2003, 2011, 2017, 2027, 2029, 2039, 2053, 2063, 2069,\n      2081, 2083, 2087, 2089, 2099, 2111, 2113, 2129, 2131, 2137, 2141, 2143,\n      2153, 2161, 2179, 2203, 2207, 2213, 2221, 2237, 2239, 2243, 2251, 2267,\n      2269, 2273, 2281, 2287, 2293, 2297, 2309, 2311, 2333, 2339, 2341, 2347,\n      2351, 2357, 2371, 2377, 2381, 2383, 2389, 2393, 2399, 2411, 2417, 2423,\n      2437, 2441, 2447, 2459, 2467, 2473, 2477, 2503, 2521, 2531, 2539, 2543,\n      2549, 2551, 2557, 2579, 2591, 2593, 2609, 2617, 2621, 2633, 2647, 2657,\n      2659, 2663, 2671, 2677, 2683, 2687, 2689, 2693, 2699, 2707, 2711, 2713,\n      2719, 2729, 2731, 2741, 2749, 2753, 2767, 2777, 2789, 2791, 2797, 2801,\n      2803, 2819, 2833, 2837, 2843, 2851, 2857, 2861, 2879, 2887, 2897, 2903,\n      2909, 2917, 2927, 2939, 2953, 2957, 2963, 2969, 2971, 2999, 3001, 3011,\n      3019, 3023, 3037, 3041, 3049, 3061, 3067, 3079, 3083, 3089, 3109, 3119,\n      3121, 3137, 3163, 3167, 3169, 3181, 3187, 3191, 3203, 3209, 3217, 3221,\n      3229, 3251, 3253, 3257, 3259, 3271, 3299, 3301, 3307, 3313, 3319, 3323,\n      3329, 3331, 3343, 3347, 3359, 3361, 3371, 3373, 3389, 3391, 3407, 3413,\n      3433, 3449, 3457, 3461, 3463, 3467, 3469, 3491, 3499, 3511, 3517, 3527,\n      3529, 3533, 3539, 3541, 3547, 3557, 3559, 3571, 3581, 3583, 3593, 3607,\n      3613, 3617, 3623, 3631, 3637, 3643, 3659, 3671, 3673, 3677, 3691, 3697,\n      3701, 3709, 3719, 3727, 3733, 3739, 3761, 3767, 3769, 3779, 3793, 3797,\n      3803, 3821, 3823, 3833, 3847, 3851, 3853, 3863, 3877, 3881, 3889, 3907,\n      3911, 3917, 3919, 3923, 3929, 3931, 3943, 3947, 3967, 3989, 4001, 4003,\n      4007, 4013, 4019, 4021, 4027, 4049, 4051, 4057, 4073, 4079, 4091, 4093,\n      4099, 4111, 4127, 4129, 4133, 4139, 4153, 4157, 4159, 4177, 4201, 4211,\n      4217, 4219, 4229, 4231, 4241, 4243, 4253, 4259, 4261, 4271, 4273, 4283,\n      4289, 4297, 4327, 4337, 4339, 4349, 4357, 4363, 4373, 4391, 4397, 4409,\n      4421, 4423, 4441, 4447, 4451, 4457, 4463, 4481, 4483, 4493, 4507, 4513,\n      4517, 4519, 4523, 4547, 4549, 4561, 4567, 4583, 4591, 4597, 4603, 4621,\n      4637, 4639, 4643, 4649, 4651, 4657, 4663, 4673, 4679, 4691, 4703, 4721,\n      4723, 4729, 4733, 4751, 4759, 4783, 4787, 4789, 4793, 4799, 4801, 4813,\n      4817, 4831, 4861, 4871, 4877, 4889, 4903, 4909, 4919, 4931, 4933, 4937,\n      4943, 4951, 4957, 4967, 4969, 4973, 4987, 4993, 4999, 5003, 5009, 5011,\n      5021, 5023, 5039, 5051, 5059, 5077, 5081, 5087, 5099, 5101, 5107, 5113,\n      5119, 5147, 5153, 5167, 5171, 5179, 5189, 5197, 5209, 5227, 5231, 5233,\n      5237, 5261, 5273, 5279, 5281, 5297, 5303, 5309, 5323, 5333, 5347, 5351,\n      5381, 5387, 5393, 5399, 5407, 5413, 5417, 5419, 5431, 5437, 5441, 5443,\n      5449, 5471, 5477, 5479, 5483, 5501, 5503, 5507, 5519, 5521, 5527, 5531,\n      5557, 5563, 5569, 5573, 5581, 5591, 5623, 5639, 5641, 5647, 5651, 5653,\n      5657, 5659, 5669, 5683, 5689, 5693, 5701, 5711, 5717, 5737, 5741, 5743,\n      5749, 5779, 5783, 5791, 5801, 5807, 5813, 5821, 5827, 5839, 5843, 5849,\n      5851, 5857, 5861, 5867, 5869, 5879, 5881, 5897, 5903, 5923, 5927, 5939,\n      5953, 5981, 5987, 6007, 6011, 6029, 6037, 6043, 6047, 6053, 6067, 6073,\n      6079, 6089, 6091, 6101, 6113, 6121, 6131, 6133, 6143, 6151, 6163, 6173,\n      6197, 6199, 6203, 6211, 6217, 6221, 6229, 6247, 6257, 6263, 6269, 6271,\n      6277, 6287, 6299, 6301, 6311, 6317, 6323, 6329, 6337, 6343, 6353, 6359,\n      6361, 6367, 6373, 6379, 6389, 6397, 6421, 6427, 6449, 6451, 6469, 6473,\n      6481, 6491, 6521, 6529, 6547, 6551, 6553, 6563, 6569, 6571, 6577, 6581,\n      6599, 6607, 6619, 6637, 6653, 6659, 6661, 6673, 6679, 6689, 6691, 6701,\n      6703, 6709, 6719, 6733, 6737, 6761, 6763, 6779, 6781, 6791, 6793, 6803,\n      6823, 6827, 6829, 6833, 6841, 6857, 6863, 6869, 6871, 6883, 6899, 6907,\n      6911, 6917, 6947, 6949, 6959, 6961, 6967, 6971, 6977, 6983, 6991, 6997,\n      7001, 7013, 7019, 7027, 7039, 7043, 7057, 7069, 7079, 7103, 7109, 7121,\n      7127, 7129, 7151, 7159, 7177, 7187, 7193, 7207, 7211, 7213, 7219, 7229,\n      7237, 7243, 7247, 7253, 7283, 7297, 7307, 7309, 7321, 7331, 7333, 7349,\n      7351, 7369, 7393, 7411, 7417, 7433, 7451, 7457, 7459, 7477, 7481, 7487,\n      7489, 7499, 7507, 7517, 7523, 7529, 7537, 7541, 7547, 7549, 7559, 7561,\n      7573, 7577, 7583, 7589, 7591, 7603, 7607, 7621, 7639, 7643, 7649, 7669,\n      7673, 7681, 7687, 7691, 7699, 7703, 7717, 7723, 7727, 7741, 7753, 7757,\n      7759, 7789, 7793, 7817, 7823, 7829, 7841, 7853, 7867, 7873, 7877, 7879,\n      7883, 7901, 7907, 7919, 7927, 7933, 7937, 7949, 7951, 7963, 7993, 8009,\n      8011, 8017, 8039, 8053, 8059, 8069, 8081, 8087, 8089, 8093, 8101, 8111,\n      8117, 8123, 8147, 8161, 8167, 8171, 8179, 8191, 8209, 8219, 8221, 8231,\n      8233, 8237, 8243, 8263, 8269, 8273, 8287, 8291, 8293, 8297, 8311, 8317,\n      8329, 8353, 8363, 8369, 8377, 8387, 8389, 8419, 8423, 8429, 8431, 8443,\n      8447, 8461, 8467, 8501, 8513, 8521, 8527, 8537, 8539, 8543, 8563, 8573,\n      8581, 8597, 8599, 8609, 8623, 8627, 8629, 8641, 8647, 8663, 8669, 8677,\n      8681, 8689, 8693, 8699, 8707, 8713, 8719, 8731, 8737, 8741, 8747, 8753,\n      8761, 8779, 8783, 8803, 8807, 8819, 8821, 8831, 8837, 8839, 8849, 8861,\n      8863, 8867, 8887, 8893, 8923, 8929, 8933, 8941, 8951, 8963, 8969, 8971,\n      8999, 9001, 9007, 9011, 9013, 9029, 9041, 9043, 9049, 9059, 9067, 9091,\n      9103, 9109, 9127, 9133, 9137, 9151, 9157, 9161, 9173, 9181, 9187, 9199,\n      9203, 9209, 9221, 9227, 9239, 9241, 9257, 9277, 9281, 9283, 9293, 9311,\n      9319, 9323, 9337, 9341, 9343, 9349, 9371, 9377, 9391, 9397, 9403, 9413,\n      9419, 9421, 9431, 9433, 9437, 9439, 9461, 9463, 9467, 9473, 9479, 9491,\n      9497, 9511, 9521, 9533, 9539, 9547, 9551, 9587, 9601, 9613, 9619, 9623,\n      9629, 9631, 9643, 9649, 9661, 9677, 9679, 9689, 9697, 9719, 9721, 9733,\n      9739, 9743, 9749, 9767, 9769, 9781, 9787, 9791, 9803, 9811, 9817, 9829,\n      9833, 9839, 9851, 9857, 9859, 9871, 9883, 9887, 9901, 9907, 9923, 9929,\n      9931, 9941, 9949, 9967, 9973}", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [735379148409540298], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": -3719605272186223752, "ast_class": "IntegerLiteral", "random": 0.0071478542990202065, "src_text": "830", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 3313859703560627928, "ast_class": "BinaryOperator", "random": 0.007151185079925182, "src_text": "(|x|) + 1", "unbound_vals": [["(|x|)", 3]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "55 89 e5 83 ec 18 c7 45 fc 00 00 00 00 c7 45 f8 00 00 00 00 c7 45 f4 02 00 00 00 81 7d f4 10 27 00 00 0f 8f 33 00 00 00 8b 45 f4 89 04 24 e8 8d fe ff ff 83 e0 01 83 f8 00 0f 84 09 00 00 00 8b 45 f8 83 c0 01 89 45 f8 e9 00 00 00 00 8b 45 f4 83 c0 01 89 45 f4 e9 c0 ff ff ff 8d 05 40 87 04 08 8b 4d f8 89 04 24 89 4c 24 04 e8 10 fd ff ff 31 c9 89 45 f0 89 c8 83 c4 18 5d c3", "hash": 4397105775673968334, "ast_class": "Function", "random": 0.007172249738054526, "src_text": "int main() {\n  int num_odd_periods = 0;\n  for (int i = 2; i <= 10000; ++i)\n    if ((|period_size|)(i) & 1)\n      ++num_odd_periods;\n\n  printf(\"Answer: %d\\n\", num_odd_periods);\n  return 0;\n}", "unbound_vals": null, "includes": ["<stdio.h>"], "unbound_funs": [["(|period_size|)", null, null, 1]], "macros": null, "disasm": "((:PUSH :EBP) (:MOV :ESP :EBP) (:SUB 24 :ESP) (:MOVL 0 (- (:EBP) 4)) (:MOVL 0 (- (:EBP) 8)) (:MOVL 2 (- (:EBP) 12)) (:CMPL 10000 (- (:EBP) 12)) (:JG :ADDR) (:MOV (- (:EBP) 12) :EAX) (:MOV :EAX (:ESP)) (:CALL :PERIOD_SIZE) (:AND 1 :EAX) (:CMP 0 :EAX) (:JE :ADDR) (:MOV (- (:EBP) 8) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 8)) (:JMP :ADDR) (:MOV (- (:EBP) 12) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 12)) (:JMP :ADDR) (:LEA \"Answer: %d\n\" :EAX) (:MOV (- (:EBP) 8) :ECX) (:MOV \"Answer: %d\n\" (:ESP)) (:MOV :ECX (+ (:ESP) 4)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:XOR :ECX :ECX) (:MOV \"Answer: %d\n\" (- (:EBP) 16)) (:MOV :ECX :EAX) (:ADD 24 :ESP) (:POP :EBP) (:RET))", "types": [-5849325953548989793], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": -1703844675841624651, "ast_class": "ImplicitCastExpr", "random": 0.007180762486545644, "src_text": "(|ips|)", "unbound_vals": [["(|ips|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -7341533752091735756, "ast_class": "BinaryOperator", "random": 0.007240498500333592, "src_text": "(|n|) - (|r|)", "unbound_vals": [["(|n|)", 2], ["(|r|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 3109477641456947066, "ast_class": "IntegerLiteral", "random": 0.007263754006036405, "src_text": "524215", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": null, "hash": -5613099457468678875, "ast_class": "BinaryOperator", "random": 0.007279135570297912, "src_text": "(|t|) = (|l|)", "unbound_vals": [["(|l|)", 2], ["(|t|)", 2]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "8b 4d f8 89 04 24 89 4c 24 04 e8 c4 fd ff ff", "hash": 3128490463931601698, "ast_class": "CallExpr", "random": 0.007286421394847253, "src_text": "printf(\"%d\\n\", (|sum1|))", "unbound_vals": [["(|sum1|)", 0]], "includes": ["<stdio.h>"], "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 8) :ECX) (:MOV \"%d\n\" (:ESP)) (:MOV :ECX (+ (:ESP) 4)) (:CALL :_ITM_DEREGISTERTMCLONETABLE))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 4394031208791937515, "ast_class": "UnaryOperator", "random": 0.007290545153611605, "src_text": "-796", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 4061342359821142589, "ast_class": "BinaryOperator", "random": 0.007292782331723591, "src_text": "++(|diff|), (|add|) += 3", "unbound_vals": [["(|diff|)", 0], ["(|add|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -5801906396167706579, "ast_class": "UnaryOperator", "random": 0.00729673890060567, "src_text": "-391", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": "8b 45 ec 3b 45 d8 0f 8e 10 00 00 00 6b 45 d8 0a 89 45 d8 8b 45 d4 83 c0 01 89 45 d4", "hash": -6236221836345824631, "ast_class": "CompoundStmt", "random": 0.007300248002312992, "src_text": "{\n      (|level|) *= 10;\n      (|lcount|)++;\n    }", "unbound_vals": [["(|level|)", 2], ["(|lcount|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 20) :EAX) (:CMP (- (:EBP) 40) :EAX) (:JLE :ADDR) (:IMUL 10 (- (:EBP) 40) :EAX) (:MOV :EAX (- (:EBP) 40)) (:MOV (- (:EBP) 44) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 44)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 1422725381244385622, "ast_class": "DeclRefExpr", "random": 0.00730351557538611, "src_text": "(|a37|)", "unbound_vals": [["(|a37|)", 46]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -4967020135550244155, "ast_class": "BinaryOperator", "random": 0.007312816177088899, "src_text": "(|l|) = 1", "unbound_vals": [["(|l|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "8b 45 c8 8b 4d cc 89 c2 0f af d1 89 45 b4 8b 4d b4 89 55 b0 f7 e1 8b 75 b0 01 f2 01 f2 8b 7d d0 8b 5d d4 89 e1 89 59 0c 89 79 08 89 01 89 51 04 e8 f3 07 00 00 89 55 ec 89 45 e8 e9 ed 00 00 00", "hash": -7524459214845222981, "ast_class": "ReturnStmt", "random": 0.007313254520359136, "src_text": "return ((|n|) * (|n|)) % (|m|)", "unbound_vals": [["(|m|)", 2], ["(|n|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 56) :EAX) (:MOV (- (:EBP) 52) :ECX) (:MOV :EAX :EDX) (:IMUL :ECX :EDX) (:MOV :EAX (- (:EBP) 76)) (:MOV (- (:EBP) 76) :ECX) (:MOV :EDX (- (:EBP) 80)) (:MUL :ECX) (:MOV (- (:EBP) 80) :ESI) (:ADD :ESI :EDX) (:ADD :ESI :EDX) (:MOV (- (:EBP) 48) :EDI) (:MOV (- (:EBP) 44) :EBX) (:MOV :ESP :ECX) (:MOV :EBX (+ (:ECX) 12)) (:MOV :EDI (+ (:ECX) 8)) (:MOV :EAX (:ECX)) (:MOV :EDX (+ (:ECX) 4)) (:CALL :__UMODDI3) (:MOV :EDX (- (:EBP) 20)) (:MOV :EAX (- (:EBP) 24)) (:JMP :ADDR))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 2131896565928230330, "ast_class": "Var", "random": 0.00736591613127624, "src_text": "int lim", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [-5849325953548989793], "is_decl": true},
{"full_stmt": true, "binary_contents": null, "hash": 5584032421472572040, "ast_class": "DeclStmt", "random": 0.007369628371019843, "src_text": "long long p", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [-6252000326173323660], "is_decl": false},
{"full_stmt": true, "binary_contents": "8b 45 fc 99 f7 f9 83 f8 00 0f 84 6e 00 00 00 b8 64 00 00 00 8b 4d fc 89 45 f4 89 c8 99 8b 4d f4 f7 f9 83 fa 00 0f 84 29 00 00 00 b8 64 00 00 00 8b 4d fc 89 45 f0 89 c8 99 8b 4d f0 f7 f9 89 04 24 e8 32 fd ff ff 83 c0 0a 03 45 f8 89 45 f8 e9 24 00 00 00 b8 64 00 00 00 8b 4d fc 89 45 ec 89 c8 99 8b 4d ec f7 f9 89 04 24 e8 09 fd ff ff 83 c0 07 03 45 f8 89 45 f8 e9 00 00 00 00 b8 64 00 00 00", "hash": -6520281254145841283, "ast_class": "IfStmt", "random": 0.0073840707581623866, "src_text": "if ((|n|) / 100)\n    if ((|n|) % 100)\n      (|sum|) += (|choose|)((|n|) / 100) + 10;\n    else\n      (|sum|) += (|choose|)((|n|) / 100) + 7", "unbound_vals": [["(|n|)", 1], ["(|sum|)", 0]], "includes": null, "unbound_funs": [["(|choose|)", null, null, 1]], "macros": null, "disasm": "((:MOV (- (:EBP) 4) :EAX) (:CLTD) (:IDIV 100) (:CMP 0 :EAX) (:JE :ADDR) (:MOV 100 :EAX) (:MOV (- (:EBP) 4) :ECX) (:MOV 100 (- (:EBP) 12)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 12) :ECX) (:IDIV :ECX) (:CMP 0 :EDX) (:JE :ADDR) (:MOV 100 :EAX) (:MOV (- (:EBP) 4) :ECX) (:MOV 100 (- (:EBP) 16)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 16) :ECX) (:IDIV :ECX) (:MOV :EAX (:ESP)) (:CALL :CHOOSE) (:ADD 10 :EAX) (:ADD (- (:EBP) 8) :EAX) (:MOV :EAX (- (:EBP) 8)) (:JMP :ADDR) (:MOV 100 :EAX) (:MOV (- (:EBP) 4) :ECX) (:MOV 100 (- (:EBP) 20)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 20) :ECX) (:IDIV :ECX) (:MOV :EAX (:ESP)) (:CALL :CHOOSE) (:ADD 7 :EAX) (:ADD (- (:EBP) 8) :EAX) (:MOV :EAX (- (:EBP) 8)) (:JMP :ADDR) (:MOV 100 :EAX))", "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": null, "hash": -6782858245802864296, "ast_class": "ForStmt", "random": 0.0073864475225654536, "src_text": "for ((|x|) = 2; (|x|) < MA; (|x|) += 2) {\n    (|sum|) = 1;\n    (|a|) = (long)(|sqrt|)((float)(|x|));\n    for ((|index|) = 2; (|index|) < (|a|); (|index|)++)\n      if ((|x|) % (|index|) == 0)\n        (|sum|) += (|index|) + (|x|) / (|index|);\n\n    if ((|x|) % (|a|) == 0)\n      (|sum|) += 1;\n    (|nines9|)[(|x|) + 1] = (|sum|);\n  }", "unbound_vals": [["(|index|)", 0], ["(|x|)", 0], ["(|a|)", 0], ["(|nines9|)", 2], ["(|sum|)", 0]], "includes": [], "unbound_funs": [["(|sqrt|)", false, false, 1]], "macros": [["MA", "MA 1000000"]], "disasm": null, "types": [3529751552447467760, -6857659793473511817], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -4091265136602378623, "ast_class": "DeclRefExpr", "random": 0.007410858792054609, "src_text": "(|a47|)", "unbound_vals": [["(|a47|)", 76]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "8b 4d ec 8b 55 e8 89 0c 24 89 54 24 04 c7 44 24 08 40 42 0f 00 89 45 e4 e8 6a 00 00 00 a8 01 0f 85 05 00 00 00 e9 09 00 00 00 8b 45 f0 83 c0 01 89 45 f0", "hash": 1717117524976460014, "ast_class": "IfStmt", "random": 0.0074244787612917085, "src_text": "if ((|is_C_over_limit|)((|n|), (|r|), LIMIT))\n        (|number|)++", "unbound_vals": [["(|n|)", 2], ["(|r|)", 1], ["(|number|)", 2]], "includes": null, "unbound_funs": [["(|is_C_over_limit|)", null, null, 3]], "macros": [["LIMIT", "LIMIT 1000000"]], "disasm": "((:MOV (- (:EBP) 20) :ECX) (:MOV (- (:EBP) 24) :EDX) (:MOV :ECX (:ESP)) (:MOV :EDX (+ (:ESP) 4)) (:MOVL 1000000 (+ (:ESP) 8)) (:MOV 1000000 (- (:EBP) 28)) (:CALL :IS_C_OVER_LIMIT) (:TEST 1 :AL) (:JNE :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 16) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 16)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 4833279838724119224, "ast_class": "ParenExpr", "random": 0.007483832599718521, "src_text": "(((|a|) > (|b|)) ? (|a|) : (|b|))", "unbound_vals": [["(|a|)", 1], ["(|b|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": null, "hash": -5768413729254557490, "ast_class": "ForStmt", "random": 0.007523893636055656, "src_text": "for ((|i|) = 0; (|i|) < MAX; ++(|i|))\n    (|perim|)[(|i|)] = 0", "unbound_vals": [["(|i|)", 0], ["(|perim|)", 0]], "includes": [], "unbound_funs": [], "macros": [["MAX", "MAX 1001"]], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -9137786694175023882, "ast_class": "StringLiteral", "random": 0.007526025102330691, "src_text": "\"%lu\"", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": "89 0c 24 89 54 24 04 e8 c5 fe ff ff 89 45 f4 83 f8 00 0f 85 1d 00 00 00 8d 05 ad 89 04 08 89 04 24 e8 5b fe ff ff c7 45 fc 01 00 00 00 89 45 e4 e9 b4 00 00 00", "hash": 3948394432663803393, "ast_class": "CompoundStmt", "random": 0.007546426064404366, "src_text": "{\n    printf(\"Can't open primes.lst\\n\");\n    return (1);\n  }", "unbound_vals": null, "includes": ["<stdio.h>"], "unbound_funs": null, "macros": null, "disasm": "((:MOV \"primes.lst\" (:ESP)) (:MOV \"r\" (+ (:ESP) 4)) (:CALL :__LIBC_START_MAIN) (:MOV :EAX (- (:EBP) 12)) (:CMP 0 :EAX) (:JNE :ADDR) (:LEA \"Can't open primes.lst\n\" :EAX) (:MOV \"Can't open primes.lst\n\" (:ESP)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:MOVL 1 (- (:EBP) 4)) (:MOV \"Can't open primes.lst\n\" (- (:EBP) 28)) (:JMP :ADDR))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -2811675194622284954, "ast_class": "ImplicitCastExpr", "random": 0.007547781217354221, "src_text": "(|a15|)", "unbound_vals": [["(|a15|)", 98]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -5330262761540608196, "ast_class": "BinaryOperator", "random": 0.007581619261277761, "src_text": "(|arrivesAt|)((|i|)) == 89", "unbound_vals": [["(|i|)", 1]], "includes": null, "unbound_funs": [["(|arrivesAt|)", null, null, 1]], "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -6286072093583747569, "ast_class": "BinaryOperator", "random": 0.007584490488470097, "src_text": "(|a0|) +\n                                                                                                                                                                                                      (|a1|) + (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) +\n                                                                                                                                                                                                      (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) +\n                                                                                                                                                                                                      (|a28|) +\n                                                                                                                                                                                                      (|a29|) +\n                                                                                                                                                                                                      (|a30|) +\n                                                                                                                                                                                                      (|a31|) +\n                                                                                                                                                                                                      (|a32|) +\n                                                                                                                                                                                                      (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) +\n                                                                                                                                                                                                      (|a42|) +\n                                                                                                                                                                                                      (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) +\n                                                                                                                                                                                                      (|a57|) +\n                                                                                                                                                                                                      (|a58|) +\n                                                                                                                                                                                                      (|a59|) +\n                                                                                                                                                                                                      (|a60|) +\n                                                                                                                                                                                                      (|a61|) +\n                                                                                                                                                                                                      (|a62|) + (|a63|) + (|a64|) + (|a65|) + (|a66|) + (|a67|) + (|a68|) + (|a69|) + (|a70|) +\n                                                                                                                                                                                                      (|a71|) +\n                                                                                                                                                                                                      (|a72|) + (|a73|) + (|a74|) + (|a75|) + (|a76|) + (|a77|) + (|a78|) + (|a79|) + (|a80|)", "unbound_vals": [["(|a0|)", 91], ["(|a1|)", 91], ["(|a2|)", 91], ["(|a3|)", 91], ["(|a4|)", 91], ["(|a5|)", 91], ["(|a6|)", 91], ["(|a7|)", 91], ["(|a8|)", 91], ["(|a9|)", 91], ["(|a10|)", 91], ["(|a11|)", 91], ["(|a12|)", 91], ["(|a13|)", 91], ["(|a14|)", 91], ["(|a15|)", 91], ["(|a16|)", 91], ["(|a17|)", 91], ["(|a18|)", 91], ["(|a19|)", 91], ["(|a20|)", 91], ["(|a21|)", 91], ["(|a22|)", 91], ["(|a23|)", 91], ["(|a24|)", 91], ["(|a25|)", 91], ["(|a26|)", 91], ["(|a27|)", 91], ["(|a28|)", 91], ["(|a29|)", 91], ["(|a30|)", 91], ["(|a31|)", 91], ["(|a32|)", 91], ["(|a33|)", 91], ["(|a34|)", 91], ["(|a35|)", 91], ["(|a36|)", 91], ["(|a37|)", 91], ["(|a38|)", 91], ["(|a39|)", 91], ["(|a40|)", 91], ["(|a41|)", 91], ["(|a42|)", 91], ["(|a43|)", 91], ["(|a44|)", 91], ["(|a45|)", 91], ["(|a46|)", 91], ["(|a47|)", 91], ["(|a48|)", 91], ["(|a49|)", 91], ["(|a50|)", 91], ["(|a51|)", 91], ["(|a52|)", 91], ["(|a53|)", 91], ["(|a54|)", 91], ["(|a55|)", 91], ["(|a56|)", 91], ["(|a57|)", 91], ["(|a58|)", 91], ["(|a59|)", 91], ["(|a60|)", 91], ["(|a61|)", 91], ["(|a62|)", 91], ["(|a63|)", 91], ["(|a64|)", 91], ["(|a65|)", 91], ["(|a66|)", 91], ["(|a67|)", 91], ["(|a68|)", 91], ["(|a69|)", 91], ["(|a70|)", 91], ["(|a71|)", 91], ["(|a72|)", 91], ["(|a73|)", 91], ["(|a74|)", 91], ["(|a75|)", 91], ["(|a76|)", 91], ["(|a77|)", 91], ["(|a78|)", 91], ["(|a79|)", 91], ["(|a80|)", 91]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "f2 0f 10 45 e0 89 04 24 f2 0f 11 44 24 04 e8 ea fd ff ff 31 c9", "hash": -1129116815850828534, "ast_class": "CallExpr", "random": 0.007596082742454713, "src_text": "printf(\"Total: %f\\n\", (|count|))", "unbound_vals": [["(|count|)", 0]], "includes": ["<stdio.h>"], "unbound_funs": null, "macros": null, "disasm": "((:MOVSD (- (:EBP) 32) :XMM0) (:MOV \"Total: %f\n\" (:ESP)) (:MOVSD :XMM0 (+ (:ESP) 4)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:XOR :ECX :ECX))", "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": null, "hash": -1847132791239391874, "ast_class": "Var", "random": 0.007601113692609851, "src_text": "unsigned long long count = 0", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [3456822550903822590], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": -5794806282706307367, "ast_class": "UnaryOperator", "random": 0.007614700210020864, "src_text": "-313", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "55 89 e5 83 ec 28 8d 05 28 a0 04 08 31 c9 ba a0 0f 00 00 89 04 24 c7 44 24 04 00 00 00 00 c7 44 24 08 a0 0f 00 00 89 55 f0 89 4d ec e8 1f fd ff ff c7 45 fc 01 00 00 00 81 7d fc e8 03 00 00 0f 8d 23 00 00 00 8b 45 fc 89 04 24 e8 a0 fe ff ff 8b 4d fc 89 04 8d 28 a0 04 08 8b 45 fc 83 c0 01 89 45 fc e9 d0 ff ff ff 83 c4 28 5d c3", "hash": -5309273430423524515, "ast_class": "CompoundStmt", "random": 0.007633349975516346, "src_text": "{\n  memset((|Endnum|), 0, SIZE * sizeof(int));\n  int i, j, k;\n  for (i = 1; i < SIZE; i++) {\n    (|Endnum|)[i] = (|calc|)(i);\n  }\n}", "unbound_vals": [["(|Endnum|)", 2]], "includes": ["<string.h>"], "unbound_funs": [["(|calc|)", null, null, 1]], "macros": [["SIZE", "SIZE 1000"]], "disasm": "((:PUSH :EBP) (:MOV :ESP :EBP) (:SUB 40 :ESP) (:LEA :ADDR :EAX) (:XOR :ECX :ECX) (:MOV 4000 :EDX) (:MOV 134520872 (:ESP)) (:MOVL 0 (+ (:ESP) 4)) (:MOVL 4000 (+ (:ESP) 8)) (:MOV 4000 (- (:EBP) 16)) (:MOV :ECX (- (:EBP) 20)) (:CALL :__LIBC_START_MAIN) (:MOVL 1 (- (:EBP) 4)) (:CMPL 1000 (- (:EBP) 4)) (:JGE :ADDR) (:MOV (- (:EBP) 4) :EAX) (:MOV :EAX (:ESP)) (:CALL :CALC) (:MOV (- (:EBP) 4) :ECX) (:MOV :EAX (+ (:ECX) 134520872)) (:MOV (- (:EBP) 4) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 4)) (:JMP :ADDR) (:ADD 40 :ESP) (:POP :EBP) (:RET))", "types": [-5849325953548989793], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 6455845173600450663, "ast_class": "UnaryOperator", "random": 0.0076415716384983234, "src_text": "-646", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": "8b 45 e8 83 3c 85 28 a0 04 08 00 0f 85 f2 00 00 00 c7 45 dc 00 00 00 00 c7 45 d8 00 00 00 00 f2 0f 10 45 e8 f2 0f 11 45 e0 8b 45 e0 83 3c 85 28 a0 04 08 00 0f 85 6f 00 00 00 8b 45 e8 8b 4d ec 8b 55 e0 8b 75 e4 89 c7 0f af fe 89 55 c0 f7 e2 01 fa 8b 75 c0 0f af ce 2d 01 e1 f5 05 0f 92 c3 01 ca 0f 98 c7 88 7d bf 89 55 b8 89 45 b4 88 5d b3 0f 84 06 00 00 00 8a 45 bf 88 45 b3 8a 45 b3 84 c0 0f 85 0a 00 00 00 e9 00 00 00 00 e9 33 00 00 00 8b 45 d8 8b 4d dc 83 c0 01 83 d1 00 89 45 d8 89 4d dc e9 00 00 00 00 e9 00 00 00 00 8b 45 e0 8b 4d e4 83 c0 01 83 d1 00 89 45 e0 89 4d e4 e9 64 ff ff ff 8b 45 e8 8b 4d ec 8b 55 d8 8b 75 dc 89 e7 89 77 10 89 57 0c 89 4f 08 89 47 04 c7 07 f0 87 04 08 e8 b1 fc ff ff 8b 4d d8 8b 55 dc 8b 75 d0 8b 7d d4 01 ce 11 d7 89 75 d0 89 7d d4 89 45 ac e9 00 00 00 00", "hash": -6191043196830422643, "ast_class": "CompoundStmt", "random": 0.007663229003533556, "src_text": "{\n      (|n|) = 0;\n      for ((|j|) = (|i|);; (|j|)++) {\n        if ((|p|)[(|j|)] == 0)\n          if ((|i|) * (|j|) > M)\n            break;\n          else\n            (|n|)++;\n      }\n      printf(\"n%lld  %lld\", (|i|), (|n|));\n      (|no|) += (|n|);\n    }", "unbound_vals": [["(|p|)", 3], ["(|i|)", 1], ["(|j|)", 1], ["(|n|)", 1], ["(|no|)", 1]], "includes": ["<stdio.h>"], "unbound_funs": null, "macros": [["M", "M 100000000"]], "disasm": "((:MOV (- (:EBP) 24) :EAX) (:CMPL 0 (+ (:EAX) 134520872)) (:JNE :ADDR) (:MOVL 0 (- (:EBP) 36)) (:MOVL 0 (- (:EBP) 40)) (:MOVSD (- (:EBP) 24) :XMM0) (:MOVSD :XMM0 (- (:EBP) 32)) (:MOV (- (:EBP) 32) :EAX) (:CMPL 0 (+ (:EAX) 134520872)) (:JNE :ADDR) (:MOV (- (:EBP) 24) :EAX) (:MOV (- (:EBP) 20) :ECX) (:MOV (- (:EBP) 32) :EDX) (:MOV (- (:EBP) 28) :ESI) (:MOV :EAX :EDI) (:IMUL :ESI :EDI) (:MOV :EDX (- (:EBP) 64)) (:MUL :EDX) (:ADD :EDI :EDX) (:MOV (- (:EBP) 64) :ESI) (:IMUL :ESI :ECX) (:SUB 100000001 :EAX) (:SETB :BL) (:ADD :ECX :EDX) (:SETS :B) (:MOV :B (- (:EBP) 65)) (:MOV :EDX (- (:EBP) 72)) (:MOV :EAX (- (:EBP) 76)) (:MOV :BL (- (:EBP) 77)) (:JE :ADDR) (:MOV (- (:EBP) 65) :AL) (:MOV :AL (- (:EBP) 77)) (:MOV (- (:EBP) 77) :AL) (:TEST :AL :AL) (:JNE :ADDR) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 40) :EAX) (:MOV (- (:EBP) 36) :ECX) (:ADD 1 :EAX) (:ADC 0 :ECX) (:MOV :EAX (- (:EBP) 40)) (:MOV :ECX (- (:EBP) 36)) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 32) :EAX) (:MOV (- (:EBP) 28) :ECX) (:ADD 1 :EAX) (:ADC 0 :ECX) (:MOV :EAX (- (:EBP) 32)) (:MOV :ECX (- (:EBP) 28)) (:JMP :ADDR) (:MOV (- (:EBP) 24) :EAX) (:MOV (- (:EBP) 20) :ECX) (:MOV (- (:EBP) 40) :EDX) (:MOV (- (:EBP) 36) :ESI) (:MOV :ESP :EDI) (:MOV :ESI (+ (:EDI) 16)) (:MOV :EDX (+ (:EDI) 12)) (:MOV :ECX (+ (:EDI) 8)) (:MOV :EAX (+ (:EDI) 4)) (:MOVL \"n%lld  %lld\" (:EDI)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:MOV (- (:EBP) 40) :ECX) (:MOV (- (:EBP) 36) :EDX) (:MOV (- (:EBP) 48) :ESI) (:MOV (- (:EBP) 44) :EDI) (:ADD :ECX :ESI) (:ADC :EDX :EDI) (:MOV :ESI (- (:EBP) 48)) (:MOV :EDI (- (:EBP) 44)) (:MOV :EAX (- (:EBP) 84)) (:JMP :ADDR))", "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "55 89 e5 56 83 ec 24 c7 45 f8 00 00 00 00 c7 45 f4 00 00 00 00 c7 45 f0 03 00 00 00 81 7d f0 e8 03 00 00 0f 8f 7b 00 00 00 b8 02 00 00 00 8b 4d f0 89 45 ec 89 c8 99 8b 4d ec f7 f9 83 fa 00 0f 84 27 00 00 00 b8 02 00 00 00 8b 4d f0 c1 e1 01 8b 55 f0 89 45 e8 89 d0 99 8b 75 e8 f7 fe 0f af c8 03 4d f4 89 4d f4 e9 25 00 00 00 b8 02 00 00 00 8b 4d f0 c1 e1 01 8b 55 f0 89 45 e4 89 d0 99 8b 75 e4 f7 fe 83 e8 01 0f af c8 03 4d f4 89 4d f4 e9 00 00 00 00 8b 45 f0 83 c0 01 89 45 f0 e9 78 ff ff ff 8d 05 00 86 04 08 8b 4d f4 89 04 24 89 4c 24 04 e8 17 fe ff ff 31 c9 89 45 e0 89 c8 83 c4 24 5e 5d c3", "hash": -1825759026234284976, "ast_class": "Function", "random": 0.007680555337903572, "src_text": "int main(void) {\n  int sumRMax = 0;\n  for (int a = 3; a <= 1000; ++a) {\n    if (a % 2) {\n      sumRMax += 2 * a * (a / 2);\n    } else {\n      sumRMax += 2 * a * (a / 2 - 1);\n    }\n  }\n  printf(\"%d\\n\", sumRMax);\n  return 0;\n}", "unbound_vals": null, "includes": ["<stdio.h>"], "unbound_funs": null, "macros": null, "disasm": "((:PUSH :EBP) (:MOV :ESP :EBP) (:PUSH :ESI) (:SUB 36 :ESP) (:MOVL 0 (- (:EBP) 8)) (:MOVL 0 (- (:EBP) 12)) (:MOVL 3 (- (:EBP) 16)) (:CMPL 1000 (- (:EBP) 16)) (:JG :ADDR) (:MOV 2 :EAX) (:MOV (- (:EBP) 16) :ECX) (:MOV 2 (- (:EBP) 20)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 20) :ECX) (:IDIV :ECX) (:CMP 0 :EDX) (:JE :ADDR) (:MOV 2 :EAX) (:MOV (- (:EBP) 16) :ECX) (:SHL 1 :ECX) (:MOV (- (:EBP) 16) :EDX) (:MOV 2 (- (:EBP) 24)) (:MOV :EDX :EAX) (:CLTD) (:MOV (- (:EBP) 24) :ESI) (:IDIV :ESI) (:IMUL :EAX :ECX) (:ADD (- (:EBP) 12) :ECX) (:MOV :ECX (- (:EBP) 12)) (:JMP :ADDR) (:MOV 2 :EAX) (:MOV (- (:EBP) 16) :ECX) (:SHL 1 :ECX) (:MOV (- (:EBP) 16) :EDX) (:MOV 2 (- (:EBP) 28)) (:MOV :EDX :EAX) (:CLTD) (:MOV (- (:EBP) 28) :ESI) (:IDIV :ESI) (:SUB 1 :EAX) (:IMUL :EAX :ECX) (:ADD (- (:EBP) 12) :ECX) (:MOV :ECX (- (:EBP) 12)) (:JMP :ADDR) (:MOV (- (:EBP) 16) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 16)) (:JMP :ADDR) (:LEA \"%d\n\" :EAX) (:MOV (- (:EBP) 12) :ECX) (:MOV \"%d\n\" (:ESP)) (:MOV :ECX (+ (:ESP) 4)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:XOR :ECX :ECX) (:MOV \"%d\n\" (- (:EBP) 32)) (:MOV :ECX :EAX) (:ADD 36 :ESP) (:POP :ESI) (:POP :EBP) (:RET))", "types": [-5849325953548989793], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": -921708544776278397, "ast_class": "DeclRefExpr", "random": 0.0076805947807311314, "src_text": "(|bigger|)", "unbound_vals": [["(|bigger|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": "81 7d f0 d0 12 13 00 0f 82 17 00 00 00 b8 d0 12 13 00 8b 4d f0 89 45 e0 89 c8 31 d2 8b 4d e0 f7 f1 89 55 f0", "hash": 6881930246279324330, "ast_class": "CompoundStmt", "random": 0.007684533120970061, "src_text": "{\n        (|x|) %= (|C|);\n      }", "unbound_vals": [["(|x|)", 2], ["(|C|)", 5]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:CMPL 1250000 (- (:EBP) 16)) (:JB :ADDR) (:MOV 1250000 :EAX) (:MOV (- (:EBP) 16) :ECX) (:MOV 1250000 (- (:EBP) 32)) (:MOV :ECX :EAX) (:XOR :EDX :EDX) (:MOV (- (:EBP) 32) :ECX) (:DIV :ECX) (:MOV :EDX (- (:EBP) 16)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 6824112712639651786, "ast_class": "IntegerLiteral", "random": 0.00771313102322857, "src_text": "529065", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 4787905750659166809, "ast_class": "DeclRefExpr", "random": 0.007747178516951281, "src_text": "(|chain_size|)", "unbound_vals": [], "includes": [], "unbound_funs": [["(|chain_size|)", false, false, 2]], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 2392009810557818674, "ast_class": "IntegerLiteral", "random": 0.007747347077021294, "src_text": "551093", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 5486904581067117543, "ast_class": "DeclRefExpr", "random": 0.007766813792481453, "src_text": "(|a14|)", "unbound_vals": [["(|a14|)", 98]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": "8b 45 e4 83 c0 01 0f af 45 e8 89 45 e8", "hash": -1535673249624400998, "ast_class": "CompoundStmt", "random": 0.007779746434287582, "src_text": "{\n    (|sum|) *= 1 + (|num|);\n  }", "unbound_vals": [["(|sum|)", 1], ["(|num|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 28) :EAX) (:ADD 1 :EAX) (:IMUL (- (:EBP) 24) :EAX) (:MOV :EAX (- (:EBP) 24)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 3963966582685769718, "ast_class": "BinaryOperator", "random": 0.007792248845938765, "src_text": "(|x|) = 2", "unbound_vals": [["(|x|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 5720746971325404169, "ast_class": "BinaryOperator", "random": 0.0078012815751574704, "src_text": "(|a0|) +\n                                                                                                                                                                                                                  (|a1|) + (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|)", "unbound_vals": [["(|a0|)", 96], ["(|a1|)", 96], ["(|a2|)", 96], ["(|a3|)", 96], ["(|a4|)", 96], ["(|a5|)", 96], ["(|a6|)", 96], ["(|a7|)", 96], ["(|a8|)", 96], ["(|a9|)", 96], ["(|a10|)", 96], ["(|a11|)", 96], ["(|a12|)", 96], ["(|a13|)", 96], ["(|a14|)", 96], ["(|a15|)", 96], ["(|a16|)", 96], ["(|a17|)", 96], ["(|a18|)", 96], ["(|a19|)", 96], ["(|a20|)", 96], ["(|a21|)", 96], ["(|a22|)", 96], ["(|a23|)", 96], ["(|a24|)", 96], ["(|a25|)", 96], ["(|a26|)", 96], ["(|a27|)", 96], ["(|a28|)", 96], ["(|a29|)", 96], ["(|a30|)", 96], ["(|a31|)", 96], ["(|a32|)", 96], ["(|a33|)", 96], ["(|a34|)", 96], ["(|a35|)", 96], ["(|a36|)", 96], ["(|a37|)", 96], ["(|a38|)", 96], ["(|a39|)", 96], ["(|a40|)", 96], ["(|a41|)", 96], ["(|a42|)", 96]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "55 89 e5 56 83 ec 34 c7 45 f8 00 00 00 00 c7 05 8c a0 04 08 00 00 00 00 c7 05 88 a0 04 08 26 eb 34 3c a1 8c a0 04 08 8b 0d 88 a0 04 08 81 e9 3f dd ca 52 0f 97 c2 85 c0 0f 95 c6 88 75 f7 89 4d f0 88 55 ef 0f 84 06 00 00 00 8a 45 f7 88 45 ef 8a 45 ef 84 c0 0f 85 88 00 00 00 e9 00 00 00 00 e8 9b 00 00 00 8b 0d 88 a0 04 08 8b 15 8c a0 04 08 89 e6 89 56 04 89 0e c7 46 0c 00 00 00 00 c7 46 08 64 00 00 00 89 45 e8 e8 a2 06 00 00 83 f0 1e 09 d0 89 45 e4 0f 85 26 00 00 00 e9 00 00 00 00 a1 8c a0 04 08 8b 0d 88 a0 04 08 83 c1 28 83 d0 00 89 0d 88 a0 04 08 a3 8c a0 04 08 e9 1c 00 00 00 a1 8c a0 04 08 8b 0d 88 a0 04 08 83 c1 3c 83 d0 00 89 0d 88 a0 04 08 a3 8c a0 04 08 e9 3f ff ff ff 8d 05 f0 8d 04 08 89 04 24 e8 cf fd ff ff 8b 4d f8 89 45 e0 89 c8 83 c4 34 5e 5d c3 90", "hash": -1640164115713884836, "ast_class": "Function", "random": 0.007805024474844213, "src_text": "main() {\n  for ((|num|) = PMIN; (|num|) <= PMAX;) {\n    (|fix|)();\n    if ((|num|) % 100 == 30)\n      (|num|) += 40;\n    else\n      (|num|) += 60;\n    // printf(\"%llu %llu\\n\", num, num * num); // DEBUG\n  }\n\n  printf(\"NO SOLUTION FOUND!\\n\");\n}", "unbound_vals": [["(|num|)", 1]], "includes": ["<stdio.h>"], "unbound_funs": [["(|fix|)", null, null, 0]], "macros": [["PMAX", "PMAX 1389026623"], ["PMIN", "PMIN 1010101030"]], "disasm": "((:PUSH :EBP) (:MOV :ESP :EBP) (:PUSH :ESI) (:SUB 52 :ESP) (:MOVL 0 (- (:EBP) 8)) (:MOVL 0 134520972) (:MOVL 1010101030 134520968) (:MOV 134520972 :EAX) (:MOV 134520968 :ECX) (:SUB 1389026623 :ECX) (:SETA :DL) (:TEST 134520972 :EAX) (:SETNE :D) (:MOV :D (- (:EBP) 9)) (:MOV :ECX (- (:EBP) 16)) (:MOV :DL (- (:EBP) 17)) (:JE :ADDR) (:MOV (- (:EBP) 9) :AL) (:MOV :AL (- (:EBP) 17)) (:MOV (- (:EBP) 17) :AL) (:TEST :AL :AL) (:JNE :ADDR) (:JMP :ADDR) (:CALL :FIX) (:MOV 134520968 :ECX) (:MOV 134520972 :EDX) (:MOV :ESP :ESI) (:MOV 134520972 (+ (:ESI) 4)) (:MOV 134520968 (:ESI)) (:MOVL 0 (+ (:ESI) 12)) (:MOVL 100 (+ (:ESI) 8)) (:MOV :EAX (- (:EBP) 24)) (:CALL :__UMODDI3) (:XOR 30 :EAX) (:OR 134520972 :EAX) (:MOV :EAX (- (:EBP) 28)) (:JNE :ADDR) (:JMP :ADDR) (:MOV 134520972 :EAX) (:MOV 134520968 :ECX) (:ADD 40 :ECX) (:ADC 0 :EAX) (:MOV :ECX 134520968) (:MOV :EAX 134520972) (:JMP :ADDR) (:MOV 134520972 :EAX) (:MOV 134520968 :ECX) (:ADD 60 :ECX) (:ADC 0 :EAX) (:MOV :ECX 134520968) (:MOV :EAX 134520972) (:JMP :ADDR) (:LEA \"NO SOLUTION FOUND!\n\" :EAX) (:MOV \"NO SOLUTION FOUND!\n\" (:ESP)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:MOV (- (:EBP) 8) :ECX) (:MOV \"NO SOLUTION FOUND!\n\" (- (:EBP) 32)) (:MOV :ECX :EAX) (:ADD 52 :ESP) (:POP :ESI) (:POP :EBP) (:RET))", "types": null, "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": -2816192703775433257, "ast_class": "DeclRefExpr", "random": 0.00783342153885036, "src_text": "(|a48|)", "unbound_vals": [["(|a48|)", 53]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -6853932417213888390, "ast_class": "ImplicitCastExpr", "random": 0.00785050436826129, "src_text": "504860", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 7100494140228366348, "ast_class": "ImplicitCastExpr", "random": 0.007854868232875067, "src_text": "sizeof(unsigned long)", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [-4865021300304785594], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -1500042759573237931, "ast_class": "BinaryOperator", "random": 0.007860923761668692, "src_text": "SIZE - 1", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [["SIZE", "SIZE 80"]], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 6669492657268732665, "ast_class": "BinaryOperator", "random": 0.00787830724331362, "src_text": "((|year|) % 400) == 0", "unbound_vals": [["(|year|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "8b 45 d0 83 c0 01 89 45 c8 81 7d c8 10 27 00 00 0f 8d 5e 00 00 00 81 7d d0 59 01 00 00 0f 85 1d 00 00 00 81 7d c8 80 01 00 00 0f 85 10 00 00 00 c7 45 c4 01 00 00 00 8b 45 c4 83 c0 01 89 45 c4 8d 05 b0 d8 05 08 6b 4d d0 28 89 c2 01 ca 6b 4d c8 28 01 c8 89 14 24 89 44 24 04 e8 b7 fd ff ff 03 45 cc 89 45 cc 8b 45 c8 83 c0 01 89 45 c8 e9 95 ff ff ff", "hash": -366070349567366062, "ast_class": "ForStmt", "random": 0.007883417123109804, "src_text": "for (int j = (|i|) + 1; j < 10000; j++) {\n      if ((|i|) == 345 && j == 384) {\n        int a = 1;\n        a++;\n      }\n      (|count|) += (|compareComponent|)((|cubeComponent|)[(|i|)], (|cubeComponent|)[j]);\n    }", "unbound_vals": [["(|cubeComponent|)", 3], ["(|i|)", 1], ["(|count|)", 0]], "includes": null, "unbound_funs": [["(|compareComponent|)", null, null, 2]], "macros": null, "disasm": "((:MOV (- (:EBP) 48) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 56)) (:CMPL 10000 (- (:EBP) 56)) (:JGE :ADDR) (:CMPL 345 (- (:EBP) 48)) (:JNE :ADDR) (:CMPL 384 (- (:EBP) 56)) (:JNE :ADDR) (:MOVL 1 (- (:EBP) 60)) (:MOV (- (:EBP) 60) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 60)) (:LEA :ADDR :EAX) (:IMUL 40 (- (:EBP) 48) :ECX) (:MOV 134600880 :EDX) (:ADD :ECX :EDX) (:IMUL 40 (- (:EBP) 56) :ECX) (:ADD :ECX :EAX) (:MOV :EDX (:ESP)) (:MOV :EAX (+ (:ESP) 4)) (:CALL :COMPARECOMPONENT) (:ADD (- (:EBP) 52) :EAX) (:MOV :EAX (- (:EBP) 52)) (:MOV (- (:EBP) 56) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 56)) (:JMP :ADDR))", "types": [-5849325953548989793], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 4427277620573606406, "ast_class": "ImplicitCastExpr", "random": 0.007900809305046441, "src_text": "(|tmp|)", "unbound_vals": [["(|tmp|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 8788395035667111359, "ast_class": "BinaryOperator", "random": 0.007917865123234002, "src_text": "10000 - (|firstterm|)", "unbound_vals": [["(|firstterm|)", 2]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 2167343973769786127, "ast_class": "ImplicitCastExpr", "random": 0.007935019652166142, "src_text": "(|ab|) * (|ab|)", "unbound_vals": [["(|ab|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 8013534541081004358, "ast_class": "InitListExpr", "random": 0.007973578830198669, "src_text": "{-868, 708, 560, -860, -630, -355}", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 8489955943413314722, "ast_class": "BinaryOperator", "random": 0.008001041221965655, "src_text": "(|i|) == 2", "unbound_vals": [["(|i|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -1534298058317352090, "ast_class": "IntegerLiteral", "random": 0.00801260636959622, "src_text": "532715", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -7433292418076616952, "ast_class": "BinaryOperator", "random": 0.008034169865845042, "src_text": "(|i|) = 9, (|n|) = 2", "unbound_vals": [["(|i|)", 2], ["(|n|)", 2]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -3238330686130187941, "ast_class": "BinaryOperator", "random": 0.008056316218838622, "src_text": "(|b|)[(|k|) - 1], (|b|)[(|k|) - 2], (|b|)[(|k|) - 3], (|b|)[(|k|) - 4], (|b|)[(|k|) - 5], (|b|)[(|k|) - 6]", "unbound_vals": [["(|b|)", 1], ["(|k|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -2440565255218953747, "ast_class": "ImplicitCastExpr", "random": 0.008056892190048237, "src_text": "(|a77|)", "unbound_vals": [["(|a77|)", 97]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 5620421556521316227, "ast_class": "BinaryOperator", "random": 0.008089165983635849, "src_text": "(|n|) % ((|i|) + 2) == 0", "unbound_vals": [["(|i|)", 1], ["(|n|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "f2 0f 2a 45 ec 89 e1 f2 0f 11 01 89 45 d4 e8 9f fe ff ff dd 5d d8 f2 0f 10 45 d8 f2 0f 2c c0 89 45 e4", "hash": 4354922648704186114, "ast_class": "BinaryOperator", "random": 0.008097130410728681, "src_text": "(|help|) = (|sqrt|)((|i|))", "unbound_vals": [["(|i|)", 1], ["(|help|)", 1]], "includes": null, "unbound_funs": [["(|sqrt|)", null, null, 1]], "macros": null, "disasm": "((:CVTSI2SDL (- (:EBP) 20) :XMM0) (:MOV :ESP :ECX) (:MOVSD :XMM0 (:ECX)) (:MOV 3 (- (:EBP) 44)) (:CALL :__LIBC_START_MAIN) (:FSTPL (- (:EBP) 40)) (:MOVSD (- (:EBP) 40) :XMM0) (:CVTTSD2SI :XMM0 :EAX) (:MOV :EAX (- (:EBP) 28)))", "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "55 89 e5 83 ec 38 8b 45 0c 8b 4d 08 c7 45 fc 00 00 00 00 89 4d f8 89 45 f4 c7 45 f0 00 00 00 00 c7 45 e8 00 00 00 00 c7 45 ec 0a 00 00 00 83 7d f0 0b 0f 8d 6a 00 00 00 31 c0 8b 4d ec 89 0c 24 c7 44 24 04 00 00 00 00 89 45 e4 e8 80 00 00 00 83 f8 00 0f 84 36 00 00 00 b8 01 00 00 00 8b 4d ec 89 0c 24 c7 44 24 04 01 00 00 00 89 45 e0 e8 5c 00 00 00 83 f8 00 0f 84 12 00 00 00 8b 45 f0 83 c0 01 89 45 f0 8b 45 ec 03 45 e8 89 45 e8 e9 00 00 00 00 8b 45 ec 83 c0 01 89 45 ec e9 8c ff ff ff 8d 05 18 88 04 08 8b 4d e8 89 04 24 89 4c 24 04 e8 f9 fd ff ff 31 c9 89 45 dc 89 c8 83 c4 38 5d c3 66 66 66 66 2e 0f 1f 84 00 00 00 00 00", "hash": -4240079387247022510, "ast_class": "CompoundStmt", "random": 0.00814284406699417, "src_text": "{\n  int numberFound = 0;\n  int n, total = 0;\n\n  for (n = 10; numberFound < 11; n++) {\n    if ((|isTruncatablePrime|)(n, 0) && (|isTruncatablePrime|)(n, 1)) {\n      numberFound++;\n      total += n;\n    }\n  }\n\n  printf(\"%d\\n\", total);\n\n  return 0;\n}", "unbound_vals": null, "includes": ["<stdio.h>"], "unbound_funs": [["(|isTruncatablePrime|)", null, null, 0]], "macros": null, "disasm": "((:PUSH :EBP) (:MOV :ESP :EBP) (:SUB 56 :ESP) (:MOV (+ (:EBP) 12) :EAX) (:MOV (+ (:EBP) 8) :ECX) (:MOVL 0 (- (:EBP) 4)) (:MOV :ECX (- (:EBP) 8)) (:MOV :EAX (- (:EBP) 12)) (:MOVL 0 (- (:EBP) 16)) (:MOVL 0 (- (:EBP) 24)) (:MOVL 10 (- (:EBP) 20)) (:CMPL 11 (- (:EBP) 16)) (:JGE :ADDR) (:XOR :EAX :EAX) (:MOV (- (:EBP) 20) :ECX) (:MOV :ECX (:ESP)) (:MOVL 0 (+ (:ESP) 4)) (:MOV :EAX (- (:EBP) 28)) (:CALL :ISTRUNCATABLEPRIME) (:CMP 0 :EAX) (:JE :ADDR) (:MOV 1 :EAX) (:MOV (- (:EBP) 20) :ECX) (:MOV :ECX (:ESP)) (:MOVL 1 (+ (:ESP) 4)) (:MOV 1 (- (:EBP) 32)) (:CALL :ISTRUNCATABLEPRIME) (:CMP 0 :EAX) (:JE :ADDR) (:MOV (- (:EBP) 16) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 16)) (:MOV (- (:EBP) 20) :EAX) (:ADD (- (:EBP) 24) :EAX) (:MOV :EAX (- (:EBP) 24)) (:JMP :ADDR) (:MOV (- (:EBP) 20) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 20)) (:JMP :ADDR) (:LEA \"%d\n\" :EAX) (:MOV (- (:EBP) 24) :ECX) (:MOV \"%d\n\" (:ESP)) (:MOV :ECX (+ (:ESP) 4)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:XOR :ECX :ECX) (:MOV \"%d\n\" (- (:EBP) 36)) (:MOV :ECX :EAX) (:ADD 56 :ESP) (:POP :EBP) (:RET) (:DATA32))", "types": [-5849325953548989793], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -7396421190033341721, "ast_class": "BinaryOperator", "random": 0.00816170685841755, "src_text": "(|temp|) > (|largest|) && (|pan|)((|temp|))", "unbound_vals": [["(|largest|)", 2], ["(|temp|)", 2]], "includes": null, "unbound_funs": [["(|pan|)", null, null, 1]], "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": null, "hash": -8550064423986408356, "ast_class": "DeclStmt", "random": 0.008163041402350357, "src_text": "unsigned i, j, m", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [6059612999785877620], "is_decl": null},
{"full_stmt": true, "binary_contents": null, "hash": -7408993338775176664, "ast_class": "BinaryOperator", "random": 0.008175063378289438, "src_text": "(|new|).ip = -(|old|).den *(|old|).ip / (|div|)", "unbound_vals": [["(|div|)", 0], ["(|old|)", 1], ["(|new|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 5086414014847825354, "ast_class": "BinaryOperator", "random": 0.008187731642560703, "src_text": "(|a0|) +\n                                                                                                                                                         (|a1|) +\n                                                                                                                                                         (|a2|) +\n                                                                                                                                                         (|a3|) +\n                                                                                                                                                         (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) +\n                                                                                                                                                         (|a39|) +\n                                                                                                                                                         (|a40|) +\n                                                                                                                                                         (|a41|) +\n                                                                                                                                                         (|a42|) +\n                                                                                                                                                         (|a43|) +\n                                                                                                                                                         (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|) + (|a61|) + (|a62|) + (|a63|) +\n                                                                                                                                                         (|a64|) +\n                                                                                                                                                         (|a65|) +\n                                                                                                                                                         (|a66|) +\n                                                                                                                                                         (|a67|)", "unbound_vals": [["(|a0|)", 70], ["(|a1|)", 70], ["(|a2|)", 70], ["(|a3|)", 70], ["(|a4|)", 70], ["(|a5|)", 70], ["(|a6|)", 70], ["(|a7|)", 70], ["(|a8|)", 70], ["(|a9|)", 70], ["(|a10|)", 70], ["(|a11|)", 70], ["(|a12|)", 70], ["(|a13|)", 70], ["(|a14|)", 70], ["(|a15|)", 70], ["(|a16|)", 70], ["(|a17|)", 70], ["(|a18|)", 70], ["(|a19|)", 70], ["(|a20|)", 70], ["(|a21|)", 70], ["(|a22|)", 70], ["(|a23|)", 70], ["(|a24|)", 70], ["(|a25|)", 70], ["(|a26|)", 70], ["(|a27|)", 70], ["(|a28|)", 70], ["(|a29|)", 70], ["(|a30|)", 70], ["(|a31|)", 70], ["(|a32|)", 70], ["(|a33|)", 70], ["(|a34|)", 70], ["(|a35|)", 70], ["(|a36|)", 70], ["(|a37|)", 70], ["(|a38|)", 70], ["(|a39|)", 70], ["(|a40|)", 70], ["(|a41|)", 70], ["(|a42|)", 70], ["(|a43|)", 70], ["(|a44|)", 70], ["(|a45|)", 70], ["(|a46|)", 70], ["(|a47|)", 70], ["(|a48|)", 70], ["(|a49|)", 70], ["(|a50|)", 70], ["(|a51|)", 70], ["(|a52|)", 70], ["(|a53|)", 70], ["(|a54|)", 70], ["(|a55|)", 70], ["(|a56|)", 70], ["(|a57|)", 70], ["(|a58|)", 70], ["(|a59|)", 70], ["(|a60|)", 70], ["(|a61|)", 70], ["(|a62|)", 70], ["(|a63|)", 70], ["(|a64|)", 70], ["(|a65|)", 70], ["(|a66|)", 70], ["(|a67|)", 70]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 1156648331755473514, "ast_class": "BinaryOperator", "random": 0.008203216425965998, "src_text": "(|y|) * (|j|) + (|x|) * (|i|) - (|y|) * (|y|) - (|x|) * (|x|) == 0", "unbound_vals": [["(|x|)", 0], ["(|y|)", 0], ["(|i|)", 0], ["(|j|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -5125714847670984823, "ast_class": "BinaryOperator", "random": 0.008209282655586514, "src_text": "(|i|) >> 1", "unbound_vals": [["(|i|)", 3]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 4744286900903088038, "ast_class": "ImplicitCastExpr", "random": 0.008209997522564239, "src_text": "3923", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -5251479845524125127, "ast_class": "BinaryOperator", "random": 0.008210840839627753, "src_text": "(|a0|) + (|a1|) + (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) +\n                                                                                                                                                                                                             (|a43|) +\n                                                                                                                                                                                                             (|a44|) +\n                                                                                                                                                                                                             (|a45|) +\n                                                                                                                                                                                                             (|a46|) +\n                                                                                                                                                                                                             (|a47|) +\n                                                                                                                                                                                                             (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) +\n                                                                                                                                                                                                             (|a57|) +\n                                                                                                                                                                                                             (|a58|)", "unbound_vals": [["(|a0|)", 97], ["(|a1|)", 97], ["(|a2|)", 97], ["(|a3|)", 97], ["(|a4|)", 97], ["(|a5|)", 97], ["(|a6|)", 97], ["(|a7|)", 97], ["(|a8|)", 97], ["(|a9|)", 97], ["(|a10|)", 97], ["(|a11|)", 97], ["(|a12|)", 97], ["(|a13|)", 97], ["(|a14|)", 97], ["(|a15|)", 97], ["(|a16|)", 97], ["(|a17|)", 97], ["(|a18|)", 97], ["(|a19|)", 97], ["(|a20|)", 97], ["(|a21|)", 97], ["(|a22|)", 97], ["(|a23|)", 97], ["(|a24|)", 97], ["(|a25|)", 97], ["(|a26|)", 97], ["(|a27|)", 97], ["(|a28|)", 97], ["(|a29|)", 97], ["(|a30|)", 97], ["(|a31|)", 97], ["(|a32|)", 97], ["(|a33|)", 97], ["(|a34|)", 97], ["(|a35|)", 97], ["(|a36|)", 97], ["(|a37|)", 97], ["(|a38|)", 97], ["(|a39|)", 97], ["(|a40|)", 97], ["(|a41|)", 97], ["(|a42|)", 97], ["(|a43|)", 97], ["(|a44|)", 97], ["(|a45|)", 97], ["(|a46|)", 97], ["(|a47|)", 97], ["(|a48|)", 97], ["(|a49|)", 97], ["(|a50|)", 97], ["(|a51|)", 97], ["(|a52|)", 97], ["(|a53|)", 97], ["(|a54|)", 97], ["(|a55|)", 97], ["(|a56|)", 97], ["(|a57|)", 97], ["(|a58|)", 97]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 3761323002435666271, "ast_class": "BinaryOperator", "random": 0.0082271686762031, "src_text": "(|k|) = 0", "unbound_vals": [["(|k|)", 3]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -1693366690550318375, "ast_class": "UnaryOperator", "random": 0.008255176573122913, "src_text": "-124", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -7431223105850354107, "ast_class": "DeclRefExpr", "random": 0.008280002799718522, "src_text": "(|a20|)", "unbound_vals": [["(|a20|)", 97]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -6460630958574293918, "ast_class": "ImplicitCastExpr", "random": 0.00828783104122588, "src_text": "-273", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -3760151347152676855, "ast_class": "EnumConstant", "random": 0.008299733229494843, "src_text": "PHI10 = 4", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": true},
{"full_stmt": false, "binary_contents": "e9 33 00 00 00", "hash": -1621484927557902073, "ast_class": "BreakStmt", "random": 0.008320810317355654, "src_text": "break", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:JMP :ADDR))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 6308007853690664188, "ast_class": "ImplicitCastExpr", "random": 0.00832701949995962, "src_text": "(|pbb|)", "unbound_vals": [["(|pbb|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": null, "hash": -7564991282765753324, "ast_class": "IfStmt", "random": 0.00832913509589217, "src_text": "if (((|d|) + (|c|) + 1 < MAX_R) && ((|a|) - (|d|) - (|c|) + 1 < MAX_R)) {\n        if ((|n|)[(|d|) + (|c|) + 1][(|a|) - (|d|) - (|c|)] < (|n|)[(|d|) + (|c|)][(|a|) - (|d|) - (|c|) + 1]) {\n          (|n|)[(|d|) + (|c|)][(|a|) - (|d|) - (|c|)] = (|n|)[(|d|) + (|c|)][(|a|) - (|d|) - (|c|)] + (|n|)[(|d|) + (|c|) + 1][(|a|) - (|d|) - (|c|)];\n        } else {\n          (|n|)[(|d|) + (|c|)][(|a|) - (|d|) - (|c|)] = (|n|)[(|d|) + (|c|)][(|a|) - (|d|) - (|c|)] + (|n|)[(|d|) + (|c|)][(|a|) - (|d|) - (|c|) + 1];\n        }\n      } else if ((|d|) + (|c|) + 1 < MAX_R) {\n        (|n|)[(|d|) + (|c|)][(|a|) - (|d|) - (|c|)] = (|n|)[(|d|) + (|c|)][(|a|) - (|d|) - (|c|)] + (|n|)[(|d|) + (|c|) + 1][(|a|) - (|d|) - (|c|)];\n      } else if ((|a|) - (|d|) - (|c|) + 1 < MAX_R) {\n        (|n|)[(|d|) + (|c|)][(|a|) - (|d|) - (|c|)] = (|n|)[(|d|) + (|c|)][(|a|) - (|d|) - (|c|)] + (|n|)[(|d|) + (|c|)][(|a|) - (|d|) - (|c|) + 1];\n      }", "unbound_vals": [["(|a|)", 2], ["(|d|)", 2], ["(|c|)", 2], ["(|n|)", 2]], "includes": [], "unbound_funs": [], "macros": [["MAX_R", "MAX_R 5"]], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -5478568433147707307, "ast_class": "DeclStmt", "random": 0.008355904430680128, "src_text": "int h = 0;", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [-5849325953548989793], "is_decl": false},
{"full_stmt": true, "binary_contents": null, "hash": 8691876243636246312, "ast_class": "ForStmt", "random": 0.008360572278814926, "src_text": "for ((|a|) = 1; (|a|) <= (|M|); (|a|)++) {\n    for ((|b|) = 1; (|b|) <= (|a|); (|b|)++)\n      for ((|c|) = 1; (|c|) <= (|b|); (|c|)++) {\n        (|l_squared|) = (|length_cuboid|)((|a|), (|b|), (|c|));\n        (|l|) = (|sqrt|)((|l_squared|));\n        if (l - int(l) == 0.0) {\n          count++;\n          printf(\"%4d %4d %4d  length=%lf count=%d  M=%d\\n\", a, b, c, l, count,\n                 M);\n        }\n      }\n    if ((|count|) > 1000000) {\n      break;\n    }\n    (|M|)++;\n  }", "unbound_vals": [["(|a|)", 0], ["(|b|)", 0], ["(|l|)", 0], ["(|c|)", 0], ["(|M|)", 0], ["(|count|)", 0], ["(|l_squared|)", 0]], "includes": [], "unbound_funs": [["(|sqrt|)", false, false, 1], ["(|length_cuboid|)", false, false, 3]], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": null, "hash": 6331304911606696983, "ast_class": "Function", "random": 0.008370635584587172, "src_text": "int WaysToCount(int index, int target) {\n  if (0 == index)\n    return 1;\n\n  if (target >= 0) {\n    return (|WaysToCount|)(index, target - (|numbers|)[index]) +\n           (|WaysToCount|)(index - 1, target);\n  }\n\n  return 0;\n}", "unbound_vals": [["(|numbers|)", 1]], "includes": [], "unbound_funs": [["(|WaysToCount|)", false, false, 2]], "macros": [], "disasm": null, "types": [-5849325953548989793], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": 5939136971599063613, "ast_class": "Var", "random": 0.008381230783065186, "src_text": "int div", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [-5849325953548989793], "is_decl": true},
{"full_stmt": true, "binary_contents": "8b 4d ec 89 4d e8", "hash": 4758515488723604984, "ast_class": "BinaryOperator", "random": 0.00839082524728485, "src_text": "(|n|) = (|d|)", "unbound_vals": [["(|d|)", 3], ["(|n|)", 3]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 20) :ECX) (:MOV :ECX (- (:EBP) 24)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -3249640484743735055, "ast_class": "ArraySubscriptExpr", "random": 0.008395133926482834, "src_text": "(|n|)[(|i|) + 1]", "unbound_vals": [["(|n|)", 1], ["(|i|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -2181955768159176917, "ast_class": "ImplicitCastExpr", "random": 0.008403780048460097, "src_text": "(|a44|)", "unbound_vals": [["(|a44|)", 53]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -5142094074277127676, "ast_class": "ArraySubscriptExpr", "random": 0.00841212039128314, "src_text": "(|len|)[(|cur_num|)]", "unbound_vals": [["(|len|)", 5], ["(|cur_num|)", 3]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -5434262421667027432, "ast_class": "IntegerLiteral", "random": 0.008422068248841508, "src_text": "607", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -1406519489305301535, "ast_class": "ImplicitCastExpr", "random": 0.008426725444656502, "src_text": "(|a43|)", "unbound_vals": [["(|a43|)", 72]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -8847112978554011000, "ast_class": "BinaryOperator", "random": 0.008445226077319234, "src_text": "(|x|) < (|max|)", "unbound_vals": [["(|x|)", 1], ["(|max|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": null, "hash": -3881384140470746837, "ast_class": "Function", "random": 0.008464003030044354, "src_text": "int go(int n, int p) {\n  int s, m, i, *l = &length;\n  [n], e;\n  if (*l > 0)\n    return *l;\n  if (*l == 0) {\n    for (s = 0, i = 0; i < 9; i++)\n      s += ((n >> (3 * i)) & 7) * (|f|)[1 + i];\n    for (i = s, m = 0; i; i /= 10)\n      m += (|S|)[i % 10];\n    *l = -p;\n    e = go(m, p + 1);\n    if (*l < 0) {\n      if (s == cycleval[m])\n        *l = e;\n      else\n        *l = 1 + e;\n    }\n    return *l;\n  } else {\n    p += *l;\n    for (m = n; length[m] < 0;) {\n      length[m] = p;\n      for (s = 0, i = 0; i < 9; i++)\n        s += ((m >> (3 * i)) & 7) * (|f|)[1 + i];\n      for (i = s, m = 0; i; i /= 10)\n        m += (|S|)[i % 10];\n      cycleval[m] = s;\n    }\n    if (p >= 59)\n      printf(\"More code here.\\n\");\n    return p;\n  }\n}", "unbound_vals": [["(|f|)", 1], ["(|S|)", 1]], "includes": ["<stdio.h>"], "unbound_funs": [], "macros": [], "disasm": null, "types": [-5849325953548989793, -5849325953548989792], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": -4811570934831858985, "ast_class": "BinaryOperator", "random": 0.00847489584913308, "src_text": "(|c|) - (|b|)", "unbound_vals": [["(|b|)", 1], ["(|c|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 2775998132182411857, "ast_class": "ImplicitCastExpr", "random": 0.008483847270646327, "src_text": "(|period|)", "unbound_vals": [["(|period|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -8709763150478769714, "ast_class": "ImplicitCastExpr", "random": 0.008498284346230567, "src_text": "(|a34|)", "unbound_vals": [["(|a34|)", 35]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "c7 85 14 cb fc ff 00 00 00 00", "hash": 7141269315182901232, "ast_class": "DeclStmt", "random": 0.00849881399376784, "src_text": "int l = 0", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOVL 0 (- (:EBP) 210156)))", "types": [-5849325953548989793], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -4005364544228099351, "ast_class": "CharacterLiteral", "random": 0.008516155598111252, "src_text": "'6'", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -6886716489865320722, "ast_class": "BinaryOperator", "random": 0.00852997777287412, "src_text": "(|a0|) + (|a1|) + (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) +\n                                                                                                                                                                                                                    (|a12|) +\n                                                                                                                                                                                                                    (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) +\n                                                                                                                                                                                                                    (|a38|) +\n                                                                                                                                                                                                                    (|a39|) +\n                                                                                                                                                                                                                    (|a40|) +\n                                                                                                                                                                                                                    (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) +\n                                                                                                                                                                                                                    (|a59|) + (|a60|) + (|a61|) + (|a62|) + (|a63|) + (|a64|) + (|a65|) + (|a66|) + (|a67|) + (|a68|) + (|a69|) + (|a70|) + (|a71|) + (|a72|) + (|a73|) + (|a74|) + (|a75|) + (|a76|) + (|a77|) + (|a78|) + (|a79|) + (|a80|) + (|a81|) + (|a82|) + (|a83|) + (|a84|) + (|a85|) + (|a86|) + (|a87|) +\n                                                                                                                                                                                                                    (|a88|) +\n                                                                                                                                                                                                                    (|a89|) +\n                                                                                                                                                                                                                    (|a90|) +\n                                                                                                                                                                                                                    (|a91|) +\n                                                                                                                                                                                                                    (|a92|) +\n                                                                                                                                                                                                                    (|a93|) + (|a94|) + (|a95|)", "unbound_vals": [["(|a0|)", 99], ["(|a1|)", 99], ["(|a2|)", 99], ["(|a3|)", 99], ["(|a4|)", 99], ["(|a5|)", 99], ["(|a6|)", 99], ["(|a7|)", 99], ["(|a8|)", 99], ["(|a9|)", 99], ["(|a10|)", 99], ["(|a11|)", 99], ["(|a12|)", 99], ["(|a13|)", 99], ["(|a14|)", 99], ["(|a15|)", 99], ["(|a16|)", 99], ["(|a17|)", 99], ["(|a18|)", 99], ["(|a19|)", 99], ["(|a20|)", 99], ["(|a21|)", 99], ["(|a22|)", 99], ["(|a23|)", 99], ["(|a24|)", 99], ["(|a25|)", 99], ["(|a26|)", 99], ["(|a27|)", 99], ["(|a28|)", 99], ["(|a29|)", 99], ["(|a30|)", 99], ["(|a31|)", 99], ["(|a32|)", 99], ["(|a33|)", 99], ["(|a34|)", 99], ["(|a35|)", 99], ["(|a36|)", 99], ["(|a37|)", 99], ["(|a38|)", 99], ["(|a39|)", 99], ["(|a40|)", 99], ["(|a41|)", 99], ["(|a42|)", 99], ["(|a43|)", 99], ["(|a44|)", 99], ["(|a45|)", 99], ["(|a46|)", 99], ["(|a47|)", 99], ["(|a48|)", 99], ["(|a49|)", 99], ["(|a50|)", 99], ["(|a51|)", 99], ["(|a52|)", 99], ["(|a53|)", 99], ["(|a54|)", 99], ["(|a55|)", 99], ["(|a56|)", 99], ["(|a57|)", 99], ["(|a58|)", 99], ["(|a59|)", 99], ["(|a60|)", 99], ["(|a61|)", 99], ["(|a62|)", 99], ["(|a63|)", 99], ["(|a64|)", 99], ["(|a65|)", 99], ["(|a66|)", 99], ["(|a67|)", 99], ["(|a68|)", 99], ["(|a69|)", 99], ["(|a70|)", 99], ["(|a71|)", 99], ["(|a72|)", 99], ["(|a73|)", 99], ["(|a74|)", 99], ["(|a75|)", 99], ["(|a76|)", 99], ["(|a77|)", 99], ["(|a78|)", 99], ["(|a79|)", 99], ["(|a80|)", 99], ["(|a81|)", 99], ["(|a82|)", 99], ["(|a83|)", 99], ["(|a84|)", 99], ["(|a85|)", 99], ["(|a86|)", 99], ["(|a87|)", 99], ["(|a88|)", 99], ["(|a89|)", 99], ["(|a90|)", 99], ["(|a91|)", 99], ["(|a92|)", 99], ["(|a93|)", 99], ["(|a94|)", 99], ["(|a95|)", 99]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "c7 45 f4 0c 00 00 00", "hash": -7404873812835592093, "ast_class": "DeclStmt", "random": 0.00857510897639957, "src_text": "int i = 12", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOVL 12 (- (:EBP) 12)))", "types": [-5849325953548989793], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 1074488354852868917, "ast_class": "BinaryOperator", "random": 0.008584719682440345, "src_text": "(|j|) > 2", "unbound_vals": [["(|j|)", 2]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 4856531094509021472, "ast_class": "ImplicitCastExpr", "random": 0.008586869753503756, "src_text": "3083", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 3698074486627007198, "ast_class": "ImplicitCastExpr", "random": 0.00860382283451322, "src_text": "911745", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -3634948386714844889, "ast_class": "UnaryOperator", "random": 0.008613672163051977, "src_text": "-967", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -6319464580225630223, "ast_class": "Var", "random": 0.008634062117598873, "src_text": "sumy = j * (j + 1) / 2", "unbound_vals": [["(|j|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [-5849325953548989793], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": 8090241410858908706, "ast_class": "Var", "random": 0.00863964941751516, "src_text": "int p = 0", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [-5849325953548989793], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": -1424397289171983251, "ast_class": "DeclRefExpr", "random": 0.008640252481345256, "src_text": "(|val|)", "unbound_vals": [["(|val|)", 3]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 4326576253938699223, "ast_class": "Var", "random": 0.008660567031116284, "src_text": "dcount = 1", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [-4865021300304785594], "is_decl": true},
{"full_stmt": true, "binary_contents": "c7 85 10 cb fc ff 02 00 00 00", "hash": 3687782680436853939, "ast_class": "BinaryOperator", "random": 0.008680639683831037, "src_text": "(|nh|) = 2", "unbound_vals": [["(|nh|)", 4]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOVL 2 (- (:EBP) 210160)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": "8b 45 f0 99 f7 7d d4 83 fa 00 0f 84 3b 00 00 00 8b 45 d0 83 c0 01 89 45 d0 8b 45 d0 3b 45 cc 0f 85 21 00 00 00 8b 45 ec 83 c0 01 89 45 ec 81 7d ec 11 27 00 00 0f 85 06 00 00 00 8b 45 f0 89 45 f4 e9 00 00 00 00 e9 00 00 00 00", "hash": 7036691496867944622, "ast_class": "CompoundStmt", "random": 0.008696669633355691, "src_text": "{\n        (|count|)++;\n        if ((|count|) == (|limit|)) {\n          // We have a prime number\n          (|global_count|)++;\n          if ((|global_count|) == 10001)\n            (|prime_num|) = (|i|);\n        }\n      }", "unbound_vals": [["(|prime_num|)", 3], ["(|i|)", 3], ["(|global_count|)", 3], ["(|count|)", 2], ["(|limit|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 16) :EAX) (:CLTD) (:IDIVL (- (:EBP) 44)) (:CMP 0 :EDX) (:JE :ADDR) (:MOV (- (:EBP) 48) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 48)) (:MOV (- (:EBP) 48) :EAX) (:CMP (- (:EBP) 52) :EAX) (:JNE :ADDR) (:MOV (- (:EBP) 20) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 20)) (:CMPL 10001 (- (:EBP) 20)) (:JNE :ADDR) (:MOV (- (:EBP) 16) :EAX) (:MOV :EAX (- (:EBP) 12)) (:JMP :ADDR) (:JMP :ADDR))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -5456650709759167392, "ast_class": "BinaryOperator", "random": 0.008701348979177737, "src_text": "(|a0|) +\n                                                                                                                                                      (|a1|) +\n                                                                                                                                                      (|a2|) +\n                                                                                                                                                      (|a3|) +\n                                                                                                                                                      (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) +\n                                                                                                                                                      (|a40|) +\n                                                                                                                                                      (|a41|) +\n                                                                                                                                                      (|a42|) +\n                                                                                                                                                      (|a43|) +\n                                                                                                                                                      (|a44|) +\n                                                                                                                                                      (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|) + (|a61|) + (|a62|) + (|a63|) +\n                                                                                                                                                      (|a64|)", "unbound_vals": [["(|a0|)", 66], ["(|a1|)", 66], ["(|a2|)", 66], ["(|a3|)", 66], ["(|a4|)", 66], ["(|a5|)", 66], ["(|a6|)", 66], ["(|a7|)", 66], ["(|a8|)", 66], ["(|a9|)", 66], ["(|a10|)", 66], ["(|a11|)", 66], ["(|a12|)", 66], ["(|a13|)", 66], ["(|a14|)", 66], ["(|a15|)", 66], ["(|a16|)", 66], ["(|a17|)", 66], ["(|a18|)", 66], ["(|a19|)", 66], ["(|a20|)", 66], ["(|a21|)", 66], ["(|a22|)", 66], ["(|a23|)", 66], ["(|a24|)", 66], ["(|a25|)", 66], ["(|a26|)", 66], ["(|a27|)", 66], ["(|a28|)", 66], ["(|a29|)", 66], ["(|a30|)", 66], ["(|a31|)", 66], ["(|a32|)", 66], ["(|a33|)", 66], ["(|a34|)", 66], ["(|a35|)", 66], ["(|a36|)", 66], ["(|a37|)", 66], ["(|a38|)", 66], ["(|a39|)", 66], ["(|a40|)", 66], ["(|a41|)", 66], ["(|a42|)", 66], ["(|a43|)", 66], ["(|a44|)", 66], ["(|a45|)", 66], ["(|a46|)", 66], ["(|a47|)", 66], ["(|a48|)", 66], ["(|a49|)", 66], ["(|a50|)", 66], ["(|a51|)", 66], ["(|a52|)", 66], ["(|a53|)", 66], ["(|a54|)", 66], ["(|a55|)", 66], ["(|a56|)", 66], ["(|a57|)", 66], ["(|a58|)", 66], ["(|a59|)", 66], ["(|a60|)", 66], ["(|a61|)", 66], ["(|a62|)", 66], ["(|a63|)", 66], ["(|a64|)", 66]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "c7 45 ec 02 00 00 00 8b 45 ec 3b 45 f4 0f 8d 9a 00 00 00 8b 45 f4 99 f7 7d ec 83 fa 00 0f 85 05 00 00 00 e9 85 00 00 00 8b 45 f4 99 f7 7d ec 83 fa 00 0f 84 5d 00 00 00 f2 0f 2a 45 ec f2 0f 2a 4d f4 89 e0 f2 0f 11 08 f2 0f 11 45 c8 e8 49 fe ff ff dd 5d d0 f2 0f 10 45 d0 f2 0f 10 4d c8 66 0f 2e c8 0f 82 2c 00 00 00 8b 45 f8 83 c0 01 89 45 f8 8b 45 f4 89 45 f0 81 7d f0 40 42 0f 00 0f 8d 0b 00 00 00 8b 45 f0 c6 04 05 28 a0 04 08 01 e9 18 00 00 00 e9 00 00 00 00 e9 00 00 00 00 8b 45 ec 83 c0 01 89 45 ec e9 5a ff ff ff", "hash": 5006528146776924194, "ast_class": "ForStmt", "random": 0.00873829534551962, "src_text": "for ((|i|) = 2; (|i|) < (|number|); (|i|)++) {\n      if ((|number|) % (|i|) == 0) {\n        break;\n      } else if ((|number|) % (|i|) != 0 && (|i|) >= (|sqrt|)((|number|))) {\n        (|c|)++;\n        (|prime|) = (|number|);\n        // printf(\"p %6d \", prime);\n        if ((|prime|) < MAX_PRIME) {\n          /// printf(\"%6d\\n\", prime);\n          (|p|)[(|prime|)] = 1;\n        }\n        break;\n      }\n    }", "unbound_vals": [["(|p|)", 3], ["(|c|)", 1], ["(|number|)", 1], ["(|prime|)", 1], ["(|i|)", 1]], "includes": null, "unbound_funs": [["(|sqrt|)", null, null, 1]], "macros": [["MAX_PRIME", "MAX_PRIME 1000000"]], "disasm": "((:MOVL 2 (- (:EBP) 20)) (:MOV (- (:EBP) 20) :EAX) (:CMP (- (:EBP) 12) :EAX) (:JGE :ADDR) (:MOV (- (:EBP) 12) :EAX) (:CLTD) (:IDIVL (- (:EBP) 20)) (:CMP 0 :EDX) (:JNE :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 12) :EAX) (:CLTD) (:IDIVL (- (:EBP) 20)) (:CMP 0 :EDX) (:JE :ADDR) (:CVTSI2SDL (- (:EBP) 20) :XMM0) (:CVTSI2SDL (- (:EBP) 12) :XMM1) (:MOV :ESP :EAX) (:MOVSD :XMM1 (:EAX)) (:MOVSD :XMM0 (- (:EBP) 56)) (:CALL :__LIBC_START_MAIN) (:FSTPL (- (:EBP) 48)) (:MOVSD (- (:EBP) 48) :XMM0) (:MOVSD (- (:EBP) 56) :XMM1) (:UCOMISD :XMM0 :XMM1) (:JB :ADDR) (:MOV (- (:EBP) 8) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 8)) (:MOV (- (:EBP) 12) :EAX) (:MOV :EAX (- (:EBP) 16)) (:CMPL 1000000 (- (:EBP) 16)) (:JGE :ADDR) (:MOV (- (:EBP) 16) :EAX) (:MOVB 1 (+ (:EAX) 134520872)) (:JMP :ADDR) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 20) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 20)) (:JMP :ADDR))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -8030307267806993289, "ast_class": "ImplicitCastExpr", "random": 0.008767053362951582, "src_text": "(|a17|)", "unbound_vals": [["(|a17|)", 49]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": "c7 45 e4 00 00 00 00 8b 45 e4 3b 45 f8 0f 8d 41 00 00 00 69 45 e8 f1 06 00 00 89 45 e8 81 7d e8 00 e1 f5 05 0f 82 17 00 00 00 b8 00 e1 f5 05 8b 4d e8 89 45 dc 89 c8 31 d2 8b 4d dc f7 f1 89 55 e8 e9 00 00 00 00 8b 45 e4 83 c0 01 89 45 e4 e9 b3 ff ff ff 8d 05 5c 86 04 08", "hash": -5326448699498467766, "ast_class": "CompoundStmt", "random": 0.008767112817614109, "src_text": "{\n      (|x|) *= (|M|);\n      if ((|x|) >= (|D|)) {\n        (|x|) %= (|D|);\n      }\n    }", "unbound_vals": [["(|x|)", 1], ["(|D|)", 4], ["(|M|)", 4]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOVL 0 (- (:EBP) 28)) (:MOV (- (:EBP) 28) :EAX) (:CMP (- (:EBP) 8) :EAX) (:JGE :ADDR) (:IMUL 1777 (- (:EBP) 24) :EAX) (:MOV :EAX (- (:EBP) 24)) (:CMPL 100000000 (- (:EBP) 24)) (:JB :ADDR) (:MOV 100000000 :EAX) (:MOV (- (:EBP) 24) :ECX) (:MOV 100000000 (- (:EBP) 36)) (:MOV :ECX :EAX) (:XOR :EDX :EDX) (:MOV (- (:EBP) 36) :ECX) (:DIV :ECX) (:MOV :EDX (- (:EBP) 24)) (:JMP :ADDR) (:MOV (- (:EBP) 28) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 28)) (:JMP :ADDR) (:LEA \"%lu\n\" :EAX))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 3796921165950210177, "ast_class": "CompoundStmt", "random": 0.008783630726931113, "src_text": "{\n    int j = NLONG - 1;\n\n    for (j = NLONG - 1; j >= 0; --j) {\n      if (((|digits|)[j] * 2 > 9999999999999999999) ||\n          ((|digits|)[j] * 2 < (|digits|)[j])) {\n        ++(|digits|)[j + 1];\n        (|digits|)[j] -= 5000000000000000000;\n      }\n\n      (|digits|)[j] *= 2;\n    }\n  }", "unbound_vals": [["(|digits|)", 1]], "includes": [], "unbound_funs": [], "macros": [["NLONG", "NLONG 16"]], "disasm": null, "types": [-5849325953548989793], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -2279799746748240048, "ast_class": "ImplicitCastExpr", "random": 0.00879470544161054, "src_text": "(|ary|)", "unbound_vals": [["(|ary|)", 3]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -2832920693289281837, "ast_class": "ArraySubscriptExpr", "random": 0.00881408937292616, "src_text": "(|data|)[(|i|)][(|j|)]", "unbound_vals": [["(|data|)", 4], ["(|i|)", 2], ["(|j|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -2068096192408007171, "ast_class": "Var", "random": 0.008826259079636967, "src_text": "a94", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [-6252000326173323660], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": 7704260320980100364, "ast_class": "IntegerLiteral", "random": 0.008853634185322368, "src_text": "258126", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -2979531870502107196, "ast_class": "StringLiteral", "random": 0.008886314823025043, "src_text": "\"Is Amicable: %d\\n\"", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -2898456045376914308, "ast_class": "InitListExpr", "random": 0.00889141593459486, "src_text": "{0}", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -5058872406350636972, "ast_class": "ImplicitCastExpr", "random": 0.00890139029321968, "src_text": "(|seen|)[(|rem|)]", "unbound_vals": [["(|rem|)", 1], ["(|seen|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -4265579740742720752, "ast_class": "IntegerLiteral", "random": 0.008912948762552775, "src_text": "758541", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": "8b 45 e8 83 c0 ff 89 45 e8 89 45 ec", "hash": -7307099355751019042, "ast_class": "BinaryOperator", "random": 0.008927537037688782, "src_text": "(|cur_position|) = --(|cur_line|)", "unbound_vals": [["(|cur_position|)", 1], ["(|cur_line|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 24) :EAX) (:ADD 4294967295 :EAX) (:MOV :EAX (- (:EBP) 24)) (:MOV :EAX (- (:EBP) 20)))", "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "89 0c 24 89 44 24 04 e8 b5 fa ff ff 83 f8 00 0f 85 05 00 00 00 e9 4d 00 00 00 8d 05 b2 8b 04 08", "hash": -3475190587375067235, "ast_class": "IfStmt", "random": 0.008937291002993675, "src_text": "if (!(|isPermu|)((|num|), (|temp2|))) {\n              continue;\n            }", "unbound_vals": [["(|num|)", 5], ["(|temp2|)", 0]], "includes": null, "unbound_funs": [["(|isPermu|)", null, null, 2]], "macros": null, "disasm": "((:MOV :ECX (:ESP)) (:MOV :EAX (+ (:ESP) 4)) (:CALL :ISPERMU) (:CMP 0 :EAX) (:JNE :ADDR) (:JMP :ADDR) (:LEA \"%d%d%d%d\n********\n\" :EAX))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -3718717763994205184, "ast_class": "IntegerLiteral", "random": 0.008939378882359295, "src_text": "841", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -3453152570512712455, "ast_class": "ConditionalOperator", "random": 0.008944279353797047, "src_text": "(|a|) > (|b|) ? (|a|) : (|b|)", "unbound_vals": [["(|a|)", 1], ["(|b|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 6775769196008078024, "ast_class": "BinaryOperator", "random": 0.008951914887948664, "src_text": "(|j|) == (|ad|)", "unbound_vals": [["(|j|)", 2], ["(|ad|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "55 89 e5 83 ec 10 8b 45 08 89 45 f8 83 7d f8 00 0f 85 0b 00 00 00 8b 45 f8 89 45 fc e9 65 00 00 00 c7 45 f0 00 00 00 00 c7 45 f4 01 00 00 00 8b 45 f4 3b 45 f8 0f 8d 2c 00 00 00 8b 45 f8 99 f7 7d f4 83 fa 00 0f 85 09 00 00 00 8b 45 f4 03 45 f0 89 45 f0 e9 00 00 00 00 8b 45 f4 83 c0 01 89 45 f4 e9 c8 ff ff ff 8b 45 f0 3b 45 f8 0f 8e 0c 00 00 00 c7 45 fc 01 00 00 00 e9 07 00 00 00 c7 45 fc 00 00 00 00 8b 45 fc 83 c4 10 5d c3", "hash": -2792772333387148305, "ast_class": "CompoundStmt", "random": 0.008975055606259108, "src_text": "{\n  if (!(|num|))\n    return (|num|);\n  int i, sum = 0;\n  for (i = 1; i < (|num|); i++)\n    if (!((|num|) % i))\n      sum += i;\n  if (sum > (|num|))\n    return 1;\n  else\n    return 0;\n}", "unbound_vals": [["(|num|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:PUSH :EBP) (:MOV :ESP :EBP) (:SUB 16 :ESP) (:MOV (+ (:EBP) 8) :EAX) (:MOV :EAX (- (:EBP) 8)) (:CMPL 0 (- (:EBP) 8)) (:JNE :ADDR) (:MOV (- (:EBP) 8) :EAX) (:MOV :EAX (- (:EBP) 4)) (:JMP :ADDR) (:MOVL 0 (- (:EBP) 16)) (:MOVL 1 (- (:EBP) 12)) (:MOV (- (:EBP) 12) :EAX) (:CMP (- (:EBP) 8) :EAX) (:JGE :ADDR) (:MOV (- (:EBP) 8) :EAX) (:CLTD) (:IDIVL (- (:EBP) 12)) (:CMP 0 :EDX) (:JNE :ADDR) (:MOV (- (:EBP) 12) :EAX) (:ADD (- (:EBP) 16) :EAX) (:MOV :EAX (- (:EBP) 16)) (:JMP :ADDR) (:MOV (- (:EBP) 12) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 12)) (:JMP :ADDR) (:MOV (- (:EBP) 16) :EAX) (:CMP (- (:EBP) 8) :EAX) (:JLE :ADDR) (:MOVL 1 (- (:EBP) 4)) (:JMP :ADDR) (:MOVL 0 (- (:EBP) 4)) (:MOV (- (:EBP) 4) :EAX) (:ADD 16 :ESP) (:POP :EBP) (:RET))", "types": [-5849325953548989793], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -8389915456013475116, "ast_class": "ImplicitCastExpr", "random": 0.008980353950633457, "src_text": "(|a51|)", "unbound_vals": [["(|a51|)", 96]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 4327432837501354292, "ast_class": "DeclRefExpr", "random": 0.008983516175006923, "src_text": "(|a28|)", "unbound_vals": [["(|a28|)", 72]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "8b 4d f8 03 4d f4 89 4d f8", "hash": -7431091269729312353, "ast_class": "BinaryOperator", "random": 0.008985839136601448, "src_text": "(|a|) = (|a|) + (|i|)", "unbound_vals": [["(|a|)", 2], ["(|i|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 8) :ECX) (:ADD (- (:EBP) 12) :ECX) (:MOV :ECX (- (:EBP) 8)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 9087547336971861454, "ast_class": "ImplicitCastExpr", "random": 0.008997347938627387, "src_text": "3299", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "c7 05 f0 ba 0a 08 00 00 00 00", "hash": -201357883586553880, "ast_class": "BinaryOperator", "random": 0.009016647381814402, "src_text": "(|e|) = 0", "unbound_vals": [["(|e|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOVL 0 134920944))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -7889007279804724479, "ast_class": "BinaryOperator", "random": 0.00903218128315919, "src_text": "(|a|)[(|j|)] * 1000", "unbound_vals": [["(|a|)", 3], ["(|j|)", 3]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -3273152076981793420, "ast_class": "DeclRefExpr", "random": 0.009032905314299677, "src_text": "(|r_total|)", "unbound_vals": [["(|r_total|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": "8b 45 f8 8b 4d f4 89 04 24 89 4c 24 04 e8 2e ff ff ff 83 f8 01 0f 85 6b 00 00 00 b8 02 00 00 00 8b 4d f8 03 4d f4 89 45 dc 89 c8 99 8b 4d dc f7 f9 83 fa 01 0f 85 4c 00 00 00 8b 45 f8 c1 e0 01 8b 4d f8 03 4d f4 0f af c1 89 45 f0 8b 45 f0 89 45 ec 81 7d ec 40 42 0f 00 0f 8f 22 00 00 00 8b 45 ec 8b 0c 85 28 a0 04 08 83 c1 01 89 0c 85 28 a0 04 08 8b 45 f0 03 45 ec 89 45 ec e9 d1 ff ff ff e9 00 00 00 00 e9 00 00 00 00 8b 45 f4 83 c0 01 89 45 f4 e9 2c ff ff ff e9 00 00 00 00", "hash": -7908017349806897578, "ast_class": "CompoundStmt", "random": 0.009040806774793575, "src_text": "{\n        int L = 2 * (|a|) * ((|a|) + (|b|));\n        for (int i = L; i <= MAX; i += L)\n          ++(|rect|)[i];\n      }", "unbound_vals": [["(|a|)", 1], ["(|b|)", 1], ["(|rect|)", 3]], "includes": null, "unbound_funs": null, "macros": [["MAX", "MAX 1000000"]], "disasm": "((:MOV (- (:EBP) 8) :EAX) (:MOV (- (:EBP) 12) :ECX) (:MOV :EAX (:ESP)) (:MOV :ECX (+ (:ESP) 4)) (:CALL :GCD) (:CMP 1 :EAX) (:JNE :ADDR) (:MOV 2 :EAX) (:MOV (- (:EBP) 8) :ECX) (:ADD (- (:EBP) 12) :ECX) (:MOV 2 (- (:EBP) 36)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 36) :ECX) (:IDIV :ECX) (:CMP 1 :EDX) (:JNE :ADDR) (:MOV (- (:EBP) 8) :EAX) (:SHL 1 :EAX) (:MOV (- (:EBP) 8) :ECX) (:ADD (- (:EBP) 12) :ECX) (:IMUL :ECX :EAX) (:MOV :EAX (- (:EBP) 16)) (:MOV (- (:EBP) 16) :EAX) (:MOV :EAX (- (:EBP) 20)) (:CMPL 1000000 (- (:EBP) 20)) (:JG :ADDR) (:MOV (- (:EBP) 20) :EAX) (:MOV (+ (:EAX) 134520872) :ECX) (:ADD 1 :ECX) (:MOV :ECX (+ (:EAX) 134520872)) (:MOV (- (:EBP) 16) :EAX) (:ADD (- (:EBP) 20) :EAX) (:MOV :EAX (- (:EBP) 20)) (:JMP :ADDR) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 12) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 12)) (:JMP :ADDR) (:JMP :ADDR))", "types": [-5849325953548989793], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -5560612023722717136, "ast_class": "DeclRefExpr", "random": 0.009069801554914436, "src_text": "(|a41|)", "unbound_vals": [["(|a41|)", 53]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -2970213158455294577, "ast_class": "BinaryOperator", "random": 0.00908230907377483, "src_text": "(|a57|) < (|a58|)", "unbound_vals": [["(|a57|)", 59], ["(|a58|)", 59]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -8159204794892305414, "ast_class": "ImplicitCastExpr", "random": 0.009101759086942773, "src_text": "(|countLettersLessThan1000|)", "unbound_vals": [], "includes": [], "unbound_funs": [["(|countLettersLessThan1000|)", false, false, 1]], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 8804971346581276967, "ast_class": "BinaryOperator", "random": 0.009162260722522464, "src_text": "(|len|) - 1", "unbound_vals": [["(|len|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 7837748597875919894, "ast_class": "InitListExpr", "random": 0.009202574143888365, "src_text": "{535, 120, 968, -517, -864, -541}", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 1798946760286124839, "ast_class": "ImplicitCastExpr", "random": 0.009207495196171145, "src_text": "(|arr|)", "unbound_vals": [["(|arr|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": null, "hash": 6431539305714458806, "ast_class": "UnaryOperator", "random": 0.009214383420884986, "src_text": "(|c|)++", "unbound_vals": [["(|c|)", 2]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 1736931031290186237, "ast_class": "DeclRefExpr", "random": 0.009215398326668955, "src_text": "coprime(d, n)", "unbound_vals": null, "includes": null, "unbound_funs": [["(|gcd|)", null, null, 2]], "macros": [["coprime", "coprime(x, y) (gcd(x, y) == 1)"]], "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 942706108786248947, "ast_class": "DeclRefExpr", "random": 0.009229249836945064, "src_text": "(|a26|)", "unbound_vals": [["(|a26|)", 73]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -55648843582533008, "ast_class": "ImplicitCastExpr", "random": 0.009245820565261353, "src_text": "7069", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 8348409508544888581, "ast_class": "ImplicitCastExpr", "random": 0.009250611170685041, "src_text": "(|nom|)", "unbound_vals": [["(|nom|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 2406249693302917751, "ast_class": "CompoundStmt", "random": 0.009253677377993763, "src_text": "{\n    for ((|j|) = (|n1|)->len; (|j|) < (|n2|)->len; (|j|)++) {\n      (|sum|) = (|carry|) + (|n2|)->digits[(|j|)];\n      if ((|sum|) >= 10) {\n        (|sum|) -= 10;\n        (|carry|) = 1;\n      } else {\n        (|carry|) = 0;\n      }\n\n      (|n2|)->digits[(|j|)] = (|sum|);\n    }\n\n    if ((|carry|)) {\n      (|n2|)->digits[(|n2|)->len++] = 1;\n    }\n  }", "unbound_vals": [["(|n1|)", 2], ["(|n2|)", 2], ["(|carry|)", 1], ["(|sum|)", 1], ["(|j|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "c7 45 f4 00 00 00 00", "hash": 1781839387606343749, "ast_class": "BinaryOperator", "random": 0.009255100236008507, "src_text": "(|rowCount|) = 0", "unbound_vals": [["(|rowCount|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOVL 0 (- (:EBP) 12)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -3324506044120088852, "ast_class": "ImplicitCastExpr", "random": 0.009258442672757883, "src_text": "(|a5|)", "unbound_vals": [["(|a5|)", 84]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 2471054275961916957, "ast_class": "Var", "random": 0.009263188863857796, "src_text": "*p = &M", "unbound_vals": [["(|M|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [-5849325953548989792], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": -2440565255218953763, "ast_class": "ImplicitCastExpr", "random": 0.009264711703140804, "src_text": "(|a77|)", "unbound_vals": [["(|a77|)", 81]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -2060162816525798130, "ast_class": "ImplicitCastExpr", "random": 0.009292793664941512, "src_text": "(|factor1|)", "unbound_vals": [["(|factor1|)", 5]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": "8b 45 ec 3b 45 f8 0f 87 13 00 00 00 8b 45 ec 0f af 45 e4 89 45 e4 8b 45 ec 83 c0 01 89 45 ec 8b 45 e8 3b 45 f4 0f 87 1e 00 00 00 8b 45 e8 8b 4d e4 89 45 d8 89 c8 31 d2 8b 4d d8 f7 f1 89 45 e4 8b 45 e8 83 c0 01 89 45 e8 81 7d e4 40 42 0f 00 0f 86 09 00 00 00 c6 45 ff 01 e9 26 00 00 00 8b 45 ec 3b 45 f8 0f 86 11 00 00 00 8b 45 e8 3b 45 f4 0f 86 05 00 00 00 e9 05 00 00 00 e9 7f ff ff ff", "hash": -8473213867705168282, "ast_class": "CompoundStmt", "random": 0.009294159070734387, "src_text": "{\n    if ((|top|) <= (|n|)) {\n      (|total|) *= (|top|);\n      (|top|)++;\n    }\n    if ((|bottom|) <= (|r|)) {\n      (|total|) /= (|bottom|);\n      (|bottom|)++;\n    }\n    if ((|total|) > LIMIT) {\n      return true;\n    }\n    if ((|top|) > (|n|) && (|bottom|) > (|r|))\n      break;\n  }", "unbound_vals": [["(|n|)", 2], ["(|r|)", 2], ["(|top|)", 1], ["(|bottom|)", 1], ["(|total|)", 1]], "includes": ["<stdbool.h>"], "unbound_funs": null, "macros": [["LIMIT", "LIMIT 1000000"]], "disasm": "((:MOV (- (:EBP) 20) :EAX) (:CMP (- (:EBP) 8) :EAX) (:JA :ADDR) (:MOV (- (:EBP) 20) :EAX) (:IMUL (- (:EBP) 28) :EAX) (:MOV :EAX (- (:EBP) 28)) (:MOV (- (:EBP) 20) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 20)) (:MOV (- (:EBP) 24) :EAX) (:CMP (- (:EBP) 12) :EAX) (:JA :ADDR) (:MOV (- (:EBP) 24) :EAX) (:MOV (- (:EBP) 28) :ECX) (:MOV :EAX (- (:EBP) 40)) (:MOV :ECX :EAX) (:XOR :EDX :EDX) (:MOV (- (:EBP) 40) :ECX) (:DIV :ECX) (:MOV :EAX (- (:EBP) 28)) (:MOV (- (:EBP) 24) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 24)) (:CMPL 1000000 (- (:EBP) 28)) (:JBE :ADDR) (:MOVB 1 (- (:EBP) 1)) (:JMP :ADDR) (:MOV (- (:EBP) 20) :EAX) (:CMP (- (:EBP) 8) :EAX) (:JBE :ADDR) (:MOV (- (:EBP) 24) :EAX) (:CMP (- (:EBP) 12) :EAX) (:JBE :ADDR) (:JMP :ADDR) (:JMP :ADDR))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -5525848173391979962, "ast_class": "ArraySubscriptExpr", "random": 0.009308069234623795, "src_text": "(|dp|)[(|j|)][(|j|) + 1]", "unbound_vals": [["(|dp|)", 3], ["(|j|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 3777155771318069116, "ast_class": "BinaryOperator", "random": 0.009310975848471625, "src_text": "(|a0|) +\n                                                                                                                                                                                                                  (|a1|) + (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|)", "unbound_vals": [["(|a0|)", 96], ["(|a1|)", 96], ["(|a2|)", 96], ["(|a3|)", 96], ["(|a4|)", 96], ["(|a5|)", 96], ["(|a6|)", 96], ["(|a7|)", 96], ["(|a8|)", 96], ["(|a9|)", 96], ["(|a10|)", 96], ["(|a11|)", 96], ["(|a12|)", 96], ["(|a13|)", 96], ["(|a14|)", 96]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -1103065820433581866, "ast_class": "ImplicitCastExpr", "random": 0.009339977187189485, "src_text": "3673", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "8b 45 ec 8b 44 85 c4 89 45 e4", "hash": 1855467788753921190, "ast_class": "BinaryOperator", "random": 0.009345729519599777, "src_text": "(|coin|) = (|cns|)[(|c|)]", "unbound_vals": [["(|c|)", 1], ["(|coin|)", 1], ["(|cns|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 20) :EAX) (:MOV (- (:EBP) 60) :EAX) (:MOV :EAX (- (:EBP) 28)))", "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "a1 7c e2 13 08 83 c0 01 a3 7c e2 13 08", "hash": 8234336838343678544, "ast_class": "UnaryOperator", "random": 0.009357413046000795, "src_text": "(|i|)++", "unbound_vals": [["(|i|)", 4]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV 135520892 :EAX) (:ADD 1 :EAX) (:MOV :EAX 135520892))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -7344977518457669985, "ast_class": "ImplicitCastExpr", "random": 0.00937732433294547, "src_text": "(|list|)[(|j|)]", "unbound_vals": [["(|j|)", 10], ["(|list|)", 10]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -8989821113603363672, "ast_class": "ImplicitCastExpr", "random": 0.009409761011865081, "src_text": "(|pp|)", "unbound_vals": [["(|pp|)", 2]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": null, "hash": 6248470051414459666, "ast_class": "Function", "random": 0.009413866382073532, "src_text": "int main(int argc, char** argv) {\n  struct tms timer;\n  double start, stop, clps = sysconf(_SC_CLK_TCK);\n  unsigned hits = 0, lim = 1000;\n  if (argc > 1) {\n    lim = strtoul(argv[1], NULL, 0);\n  }\n  times(&timer;);\n  start = timer.tms_utime;\n  while (hits == 0) {\n    lim <<= 1;\n    hits += (|verify|)(lim);\n  }\n  times(&timer;);\n  stop = timer.tms_utime;\n  printf(\"%u success%s\\n\", hits, (hits == 1) ? \"\" : \"es\");\n  printf(\"Time: %.3lfs\\n\", (stop - start) / clps);\n  return 0;\n}", "unbound_vals": [], "includes": ["<stdio.h>", "<stdlib.h>", "<unistd.h>"], "unbound_funs": [["(|verify|)", false, false, 1]], "macros": [], "disasm": null, "types": [6059612999785877620, -6534947291467637091, -5849325953548989793, -4605258830889951363, -3837621163332326337, -1747586140021028866], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": -6555625218287648267, "ast_class": "DeclRefExpr", "random": 0.009417161777956595, "src_text": "(|num_temp|)", "unbound_vals": [["(|num_temp|)", 4]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -4091265136602378615, "ast_class": "DeclRefExpr", "random": 0.009417276283692266, "src_text": "(|a47|)", "unbound_vals": [["(|a47|)", 84]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -3638498383982733481, "ast_class": "UnaryOperator", "random": 0.009430302101445243, "src_text": "-923", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "f2 0f 10 45 d8 f2 0f 11 45 e0", "hash": 1379685451084009238, "ast_class": "BinaryOperator", "random": 0.009445508070596409, "src_text": "(|MinDiff|) = (|Diff|)", "unbound_vals": [["(|MinDiff|)", 5], ["(|Diff|)", 5]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOVSD (- (:EBP) 40) :XMM0) (:MOVSD :XMM0 (- (:EBP) 32)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": "8b 45 ec 89 04 24 e8 db 00 00 00 83 f8 04 0f 85 6d 00 00 00 8b 45 ec 83 c0 01 89 45 f0 8b 45 f0 89 04 24 e8 be 00 00 00 83 f8 04 0f 85 4b 00 00 00 8b 45 f0 83 c0 01 89 45 f4 8b 45 f4 89 04 24 e8 a1 00 00 00 83 f8 04 0f 85 29 00 00 00 8b 45 f4 83 c0 01 89 45 f8 8b 45 f8 89 04 24 e8 84 00 00 00 83 f8 04 0f 85 07 00 00 00 c7 45 e4 01 00 00 00 e9 00 00 00 00 e9 00 00 00 00 e9 00 00 00 00", "hash": -4941511125164386413, "ast_class": "CompoundStmt", "random": 0.009457292359690395, "src_text": "{\n      (|num|)[1] = (|num|)[0] + 1;\n\n      if ((|numDistinctPrimeFactors|)((|num|)[1]) == 4) {\n        (|num|)[2] = (|num|)[1] + 1;\n\n        if ((|numDistinctPrimeFactors|)((|num|)[2]) == 4) {\n          (|num|)[3] = (|num|)[2] + 1;\n\n          if ((|numDistinctPrimeFactors|)((|num|)[3]) == 4)\n            (|done|) = 1;\n        }\n      }\n    }", "unbound_vals": [["(|num|)", 2], ["(|done|)", 2]], "includes": null, "unbound_funs": [["(|numDistinctPrimeFactors|)", null, null, 1]], "macros": null, "disasm": "((:MOV (- (:EBP) 20) :EAX) (:MOV :EAX (:ESP)) (:CALL :NUMDISTINCTPRIMEFACTORS) (:CMP 4 :EAX) (:JNE :ADDR) (:MOV (- (:EBP) 20) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 16)) (:MOV (- (:EBP) 16) :EAX) (:MOV :EAX (:ESP)) (:CALL :NUMDISTINCTPRIMEFACTORS) (:CMP 4 :EAX) (:JNE :ADDR) (:MOV (- (:EBP) 16) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 12)) (:MOV (- (:EBP) 12) :EAX) (:MOV :EAX (:ESP)) (:CALL :NUMDISTINCTPRIMEFACTORS) (:CMP 4 :EAX) (:JNE :ADDR) (:MOV (- (:EBP) 12) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 8)) (:MOV (- (:EBP) 8) :EAX) (:MOV :EAX (:ESP)) (:CALL :NUMDISTINCTPRIMEFACTORS) (:CMP 4 :EAX) (:JNE :ADDR) (:MOVL 1 (- (:EBP) 28)) (:JMP :ADDR) (:JMP :ADDR) (:JMP :ADDR))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 8234030215138468203, "ast_class": "CompoundStmt", "random": 0.009462355589821891, "src_text": "{\n        (|k|) /= 10;\n        (|ok|) &= (|k|) == 2 || (|k|) & 1 && !(|a|)[(|k|)];\n        if (!(|ok|)) {\n          goto ohthehorror;\n        }\n      }", "unbound_vals": [["(|a|)", 3], ["(|k|)", 1], ["(|ok|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -1579299329729698633, "ast_class": "ImplicitCastExpr", "random": 0.009464286856138315, "src_text": "(|a8|)", "unbound_vals": [["(|a8|)", 58]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -4580473481519095628, "ast_class": "ImplicitCastExpr", "random": 0.009478050089907764, "src_text": "504694", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -3335327180253233686, "ast_class": "DeclRefExpr", "random": 0.009482750046877264, "src_text": "(|d|)", "unbound_vals": [["(|d|)", 65]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -1075482600811846158, "ast_class": "ArraySubscriptExpr", "random": 0.009486099519755098, "src_text": "(|dec|).str[6]", "unbound_vals": [["(|dec|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": "8b 45 f8 8b 4d f0 89 ca 83 c2 01 89 55 f0 99 f7 3c 8d 28 a0 04 08 83 fa 00 0f 85 0c 00 00 00 c7 45 fc 00 00 00 00 e9 0c 00 00 00", "hash": 1128473094216030901, "ast_class": "IfStmt", "random": 0.009520403610982608, "src_text": "if ((|n|) % (|primes|)[(|i|)++] == 0)\n      return 0", "unbound_vals": [["(|primes|)", 2], ["(|n|)", 1], ["(|i|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 8) :EAX) (:MOV (- (:EBP) 16) :ECX) (:MOV :ECX :EDX) (:ADD 1 :EDX) (:MOV :EDX (- (:EBP) 16)) (:CLTD) (:IDIVL (+ (:ECX) 134520872)) (:CMP 0 :EDX) (:JNE :ADDR) (:MOVL 0 (- (:EBP) 4)) (:JMP :ADDR))", "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "55 89 e5 83 ec 28 8b 45 0c 8b 4d 08 c7 45 fc 00 00 00 00 89 4d f8 89 45 f4 c7 45 f0 00 00 00 00 81 7d f0 40 42 0f 00 0f 8d 1c 00 00 00 8b 45 f0 c7 04 85 24 a0 04 08 ff ff ff ff 8b 45 f0 83 c0 01 89 45 f0 e9 d7 ff ff ff c7 05 c8 a2 04 08 03 00 00 00 c7 05 c4 ad 04 08 02 00 00 00 c7 05 c0 ad 04 08 02 00 00 00 c7 05 48 1a 07 08 00 00 00 00 c7 05 68 a2 04 08 00 00 00 00 c7 05 2c a0 04 08 00 00 00 00 c7 05 28 a0 04 08 00 00 00 00 c7 05 24 a9 41 08 01 00 00 00 c7 45 ec 01 00 00 00 83 7d ec 0a 0f 8d 29 00 00 00 8b 45 ec 83 e8 01 8b 04 85 24 a9 41 08 0f af 45 ec 8b 4d ec 89 04 8d 24 a9 41 08 8b 45 ec 83 c0 01 89 45 ec e9 cd ff ff ff c7 45 e8 00 00 00 00 c7 45 e4 01 00 00 00 81 7d e4 40 42 0f 00 0f 8d 30 00 00 00 8b 45 e4 89 04 24 e8 87 fe ff ff 83 f8 3c 0f 85 09 00 00 00 8b 45 e8 83 c0 01 89 45 e8 e9 00 00 00 00 8b 45 e4 83 c0 01 89 45 e4 e9 c3 ff ff ff 8d 05 50 87 04 08 8b 4d e8 89 04 24 89 4c 24 04 e8 bd fc ff ff 31 c9 89 45 e0 89 c8 83 c4 28 5d c3", "hash": 6987923086959173320, "ast_class": "CompoundStmt", "random": 0.009561360652671325, "src_text": "{\n  for (int i = 0; i < CACHE_SIZE; ++i)\n    (|chainlength|)[i] = -1;\n  (|chainlength|)[169] = 3;\n  (|chainlength|)[871] = (|chainlength|)[872] = 2;\n  (|chainlength|)[1] = (|chainlength|)[2] = (|chainlength|)[145] = (|chainlength|)[40585] = 0;\n\n  (|fact|)[0] = 1;\n  for (int i = 1; i < 10; ++i)\n    (|fact|)[i] = (|fact|)[i - 1] * i;\n\n  int sum = 0;\n\n  for (int i = 1; i < 1000000; ++i) {\n    if ((|length|)(i) == 60) {\n      sum++;\n    }\n  }\n\n  printf(\"%i\\n\", sum);\n\n  return 0;\n}", "unbound_vals": [["(|chainlength|)", 2], ["(|fact|)", 2]], "includes": ["<stdio.h>"], "unbound_funs": [["(|length|)", null, null, 1]], "macros": [["CACHE_SIZE", "CACHE_SIZE 1000000"]], "disasm": "((:PUSH :EBP) (:MOV :ESP :EBP) (:SUB 40 :ESP) (:MOV (+ (:EBP) 12) :EAX) (:MOV (+ (:EBP) 8) :ECX) (:MOVL 0 (- (:EBP) 4)) (:MOV :ECX (- (:EBP) 8)) (:MOV :EAX (- (:EBP) 12)) (:MOVL 0 (- (:EBP) 16)) (:CMPL 1000000 (- (:EBP) 16)) (:JGE :ADDR) (:MOV (- (:EBP) 16) :EAX) (:MOVL 4294967295 (+ (:EAX) 134520868)) (:MOV (- (:EBP) 16) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 16)) (:JMP :ADDR) (:MOVL 3 134521544) (:MOVL 2 134524356) (:MOVL 2 134524352) (:MOVL 0 134683208) (:MOVL 0 134521448) (:MOVL 0 134520876) (:MOVL 0 134520872) (:MOVL 1 138520868) (:MOVL 1 (- (:EBP) 20)) (:CMPL 10 (- (:EBP) 20)) (:JGE :ADDR) (:MOV (- (:EBP) 20) :EAX) (:SUB 1 :EAX) (:MOV (+ (:EAX) 138520868) :EAX) (:IMUL (- (:EBP) 20) :EAX) (:MOV (- (:EBP) 20) :ECX) (:MOV :EAX (+ (:ECX) 138520868)) (:MOV (- (:EBP) 20) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 20)) (:JMP :ADDR) (:MOVL 0 (- (:EBP) 24)) (:MOVL 1 (- (:EBP) 28)) (:CMPL 1000000 (- (:EBP) 28)) (:JGE :ADDR) (:MOV (- (:EBP) 28) :EAX) (:MOV :EAX (:ESP)) (:CALL :LENGTH) (:CMP 60 :EAX) (:JNE :ADDR) (:MOV (- (:EBP) 24) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 24)) (:JMP :ADDR) (:MOV (- (:EBP) 28) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 28)) (:JMP :ADDR) (:LEA \"%i\n\" :EAX) (:MOV (- (:EBP) 24) :ECX) (:MOV \"%i\n\" (:ESP)) (:MOV :ECX (+ (:ESP) 4)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:XOR :ECX :ECX) (:MOV \"%i\n\" (- (:EBP) 32)) (:MOV :ECX :EAX) (:ADD 40 :ESP) (:POP :EBP) (:RET))", "types": [-5849325953548989793], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 8406121347945171086, "ast_class": "DeclRefExpr", "random": 0.009562653107563324, "src_text": "(|a21|)", "unbound_vals": [["(|a21|)", 73]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -5149336072653528876, "ast_class": "ImplicitCastExpr", "random": 0.009587441070627811, "src_text": "704", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": null, "hash": 5256559694837301141, "ast_class": "IfStmt", "random": 0.009615597221254824, "src_text": "if ((|count|) > 50) {\n      printf(\"Not Num= %lld  iter= %d Stopat= \", (|i|), (|count|));\n      (|PRINTBIG|)((|num|));\n      printf(\"\\n\");\n      (|ans|) += 1;\n    }", "unbound_vals": [["(|i|)", 1], ["(|num|)", 1], ["(|count|)", 1], ["(|ans|)", 1]], "includes": ["<stdio.h>"], "unbound_funs": [["(|PRINTBIG|)", true, false, 1]], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "55 89 e5 83 ec 38 c7 45 fc 00 00 00 00 e8 8e fd ff ff 8d 05 34 a9 41 08 31 c9 ba 00 09 3d 00 89 04 24 c7 44 24 04 00 00 00 00 c7 44 24 08 00 09 3d 00 89 55 f0 89 4d ec e8 53 fc ff ff c7 45 f8 01 00 00 00 81 7d f8 40 42 0f 00 0f 8d 2c 00 00 00 b8 01 00 00 00 8b 4d f8 89 0c 24 c7 44 24 04 01 00 00 00 89 45 e8 e8 04 fe ff ff 89 45 e4 8b 45 f8 83 c0 01 89 45 f8 e9 c7 ff ff ff 8d 05 e0 88 04 08 8b 0d 2c a0 04 08 8b 15 28 a0 04 08 89 04 24 89 4c 24 04 89 54 24 08 e8 c1 fb ff ff 8b 0d 2c a0 04 08 89 4d f4 c7 45 f8 00 00 00 00 89 45 e0 8b 45 f8 3b 05 28 a0 04 08 0f 8f 34 00 00 00 8d 05 0a 89 04 08 8b 4d f4 89 04 24 89 4c 24 04 e8 8a fb ff ff 8b 4d f4 89 0c 24 89 45 dc e8 fc fe ff ff 89 45 f4 8b 45 f8 83 c0 01 89 45 f8 e9 bd ff ff ff 8d 05 08 89 04 08 89 04 24 e8 5d fb ff ff 8b 4d fc 89 45 d8 89 c8 83 c4 38 5d c3", "hash": -5855043246293799493, "ast_class": "CompoundStmt", "random": 0.009631103342470415, "src_text": "{\n  (|fillSum|)();\n  memset((|chainLen|), 0, 1000000 * sizeof(int));\n  int i;\n  for (i = 1; i < 1000000; ++i) {\n    (|getLenght|)(i, 1);\n  }\n\n  printf(\"result : %d has %d elements in its chain\\n\", (|maxChainLenghtElt|),\n         (|maxChainLenght|));\n\n  int next = (|maxChainLenghtElt|);\n  for (i = 0; i <= (|maxChainLenght|); i++) {\n    printf(\"%d \", next);\n    next = (|sumDivisors|)(next);\n  }\n  printf(\"\\n\");\n}", "unbound_vals": [["(|chainLen|)", 2], ["(|maxChainLenght|)", 2], ["(|maxChainLenghtElt|)", 2]], "includes": ["<stdio.h>", "<string.h>"], "unbound_funs": [["(|fillSum|)", true, null, 0], ["(|sumDivisors|)", null, null, 1], ["(|getLenght|)", null, null, 2]], "macros": null, "disasm": "((:PUSH :EBP) (:MOV :ESP :EBP) (:SUB 56 :ESP) (:MOVL 0 (- (:EBP) 4)) (:CALL :FILLSUM) (:LEA :ADDR :EAX) (:XOR :ECX :ECX) (:MOV 4000000 :EDX) (:MOV 138520884 (:ESP)) (:MOVL 0 (+ (:ESP) 4)) (:MOVL 4000000 (+ (:ESP) 8)) (:MOV 4000000 (- (:EBP) 16)) (:MOV :ECX (- (:EBP) 20)) (:CALL :__LIBC_START_MAIN) (:MOVL 1 (- (:EBP) 8)) (:CMPL 1000000 (- (:EBP) 8)) (:JGE :ADDR) (:MOV 1 :EAX) (:MOV (- (:EBP) 8) :ECX) (:MOV :ECX (:ESP)) (:MOVL 1 (+ (:ESP) 4)) (:MOV 1 (- (:EBP) 24)) (:CALL :GETLENGHT) (:MOV 1 (- (:EBP) 28)) (:MOV (- (:EBP) 8) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 8)) (:JMP :ADDR) (:LEA \"result : %d has %d elements in its chain\n\" :EAX) (:MOV 134520876 :ECX) (:MOV 134520872 :EDX) (:MOV \"result : %d has %d elements in its chain\n\" (:ESP)) (:MOV 134520876 (+ (:ESP) 4)) (:MOV 134520872 (+ (:ESP) 8)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:MOV 134520876 :ECX) (:MOV 134520876 (- (:EBP) 12)) (:MOVL 0 (- (:EBP) 8)) (:MOV \"result : %d has %d elements in its chain\n\" (- (:EBP) 32)) (:MOV (- (:EBP) 8) :EAX) (:CMP 134520872 :EAX) (:JG :ADDR) (:LEA \"%d \" :EAX) (:MOV (- (:EBP) 12) :ECX) (:MOV \"%d \" (:ESP)) (:MOV :ECX (+ (:ESP) 4)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:MOV (- (:EBP) 12) :ECX) (:MOV :ECX (:ESP)) (:MOV \"%d \" (- (:EBP) 36)) (:CALL :SUMDIVISORS) (:MOV \"%d \" (- (:EBP) 12)) (:MOV (- (:EBP) 8) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 8)) (:JMP :ADDR) (:LEA \"\n\" :EAX) (:MOV \"\n\" (:ESP)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:MOV (- (:EBP) 4) :ECX) (:MOV \"\n\" (- (:EBP) 40)) (:MOV :ECX :EAX) (:ADD 56 :ESP) (:POP :EBP) (:RET))", "types": [-5849325953548989793], "is_decl": null},
{"full_stmt": false, "binary_contents": "8b 45 e0 0f af 45 e4 89 45 e4", "hash": -2635882571020941021, "ast_class": "CompoundAssignOperator", "random": 0.009666535054235315, "src_text": "(|delta|) *= (|assigned|)", "unbound_vals": [["(|delta|)", 0], ["(|assigned|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 32) :EAX) (:IMUL (- (:EBP) 28) :EAX) (:MOV :EAX (- (:EBP) 28)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 8127939521988652750, "ast_class": "IntegerLiteral", "random": 0.009675791140532297, "src_text": "94", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 4520049448443149056, "ast_class": "ImplicitCastExpr", "random": 0.009675819659377582, "src_text": "(|first2|)", "unbound_vals": [["(|first2|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": "8b 85 14 91 fc ff 83 bc 85 18 91 fc ff 00 0f 85 12 00 00 00 8b 85 14 91 fc ff 03 85 0c 91 fc ff 89 85 0c 91 fc ff", "hash": 3861774162163127799, "ast_class": "CompoundStmt", "random": 0.009682601060770901, "src_text": "{\n      (|sum|) += (|i|);\n    }", "unbound_vals": [["(|i|)", 2], ["(|sum|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 225004) :EAX) (:CMPL 0 (- (:EBP) 225000)) (:JNE :ADDR) (:MOV (- (:EBP) 225004) :EAX) (:ADD (- (:EBP) 225012) :EAX) (:MOV :EAX (- (:EBP) 225012)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -2604729366575244148, "ast_class": "BinaryOperator", "random": 0.009709040460664453, "src_text": "(|a|) == 0", "unbound_vals": [["(|a|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 7270058413303725540, "ast_class": "CompoundStmt", "random": 0.00971342675118525, "src_text": "{\n    return (((|n1|) % (|mod|)) * ((|n2|) % (|mod|))) % (|mod|);\n  }", "unbound_vals": [["(|n1|)", 2], ["(|n2|)", 2], ["(|mod|)", 2]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -859406324486122585, "ast_class": "ArraySubscriptExpr", "random": 0.009720655240817888, "src_text": "(|nums|)[(|i|)]", "unbound_vals": [["(|i|)", 2], ["(|nums|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -8120476178910365668, "ast_class": "BinaryOperator", "random": 0.009727450679567706, "src_text": "(|a0|) +\n                                                                                                                                                                                (|a1|) +\n                                                                                                                                                                                (|a2|) +\n                                                                                                                                                                                (|a3|) +\n                                                                                                                                                                                (|a4|) +\n                                                                                                                                                                                (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) +\n                                                                                                                                                                                (|a18|) +\n                                                                                                                                                                                (|a19|) +\n                                                                                                                                                                                (|a20|) +\n                                                                                                                                                                                (|a21|) +\n                                                                                                                                                                                (|a22|) +\n                                                                                                                                                                                (|a23|) +\n                                                                                                                                                                                (|a24|) +\n                                                                                                                                                                                (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) +\n                                                                                                                                                                                (|a35|) +\n                                                                                                                                                                                (|a36|) +\n                                                                                                                                                                                (|a37|) +\n                                                                                                                                                                                (|a38|) +\n                                                                                                                                                                                (|a39|) + (|a40|) + (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) + (|a46|)", "unbound_vals": [["(|a0|)", 79], ["(|a1|)", 79], ["(|a2|)", 79], ["(|a3|)", 79], ["(|a4|)", 79], ["(|a5|)", 79], ["(|a6|)", 79], ["(|a7|)", 79], ["(|a8|)", 79], ["(|a9|)", 79], ["(|a10|)", 79], ["(|a11|)", 79], ["(|a12|)", 79], ["(|a13|)", 79], ["(|a14|)", 79], ["(|a15|)", 79], ["(|a16|)", 79], ["(|a17|)", 79], ["(|a18|)", 79], ["(|a19|)", 79], ["(|a20|)", 79], ["(|a21|)", 79], ["(|a22|)", 79], ["(|a23|)", 79], ["(|a24|)", 79], ["(|a25|)", 79], ["(|a26|)", 79], ["(|a27|)", 79], ["(|a28|)", 79], ["(|a29|)", 79], ["(|a30|)", 79], ["(|a31|)", 79], ["(|a32|)", 79], ["(|a33|)", 79], ["(|a34|)", 79], ["(|a35|)", 79], ["(|a36|)", 79], ["(|a37|)", 79], ["(|a38|)", 79], ["(|a39|)", 79], ["(|a40|)", 79], ["(|a41|)", 79], ["(|a42|)", 79], ["(|a43|)", 79], ["(|a44|)", 79], ["(|a45|)", 79], ["(|a46|)", 79]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "89 4d ec 89 45 e4 8b 45 ec 80 38 00 0f 84 27 00 00 00 8b 45 ec 0f be 00 83 e8 30 89 45 e8 8b 45 e8 0f af 45 e8 03 45 f0 89 45 f0 8b 45 ec 83 c0 01 89 45 ec e9 cd ff ff ff", "hash": -7193093276450849322, "ast_class": "ForStmt", "random": 0.00973285270414781, "src_text": "for ((|digit|) = (|digits|); *(|digit|); (|digit|)++) {\n    (|temp|) = *(|digit|) - '0';\n    (|sum|) += (|temp|) * (|temp|);\n  }", "unbound_vals": [["(|digits|)", 0], ["(|sum|)", 0], ["(|digit|)", 0], ["(|temp|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV :ECX (- (:EBP) 20)) (:MOV :EAX (- (:EBP) 28)) (:MOV (- (:EBP) 20) :EAX) (:CMPB 0 (:EAX)) (:JE :ADDR) (:MOV (- (:EBP) 20) :EAX) (:MOVSBL (:EAX) :EAX) (:SUB 48 :EAX) (:MOV :EAX (- (:EBP) 24)) (:MOV (- (:EBP) 24) :EAX) (:IMUL (- (:EBP) 24) :EAX) (:ADD (- (:EBP) 16) :EAX) (:MOV :EAX (- (:EBP) 16)) (:MOV (- (:EBP) 20) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 20)) (:JMP :ADDR))", "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "55 89 e5 83 ec 38 c7 45 fc 00 00 00 00 c7 45 f4 00 00 00 00 c7 45 f8 01 00 00 00 b8 e8 03 00 00 8b 4d f8 89 45 ec 89 c8 99 8b 4d ec f7 f9 83 fa 00 0f 85 18 00 00 00 8d 05 a4 87 04 08 8b 4d f8 89 04 24 89 4c 24 04 e8 44 fd ff ff 89 45 e8 8b 45 f8 89 04 24 e8 76 fe ff ff 83 f8 00 0f 84 09 00 00 00 8b 45 f4 83 c0 01 89 45 f4 8d 05 aa 87 04 08 6b 4d f4 64 89 45 e4 89 c8 99 f7 7d f8 f3 0f 2a c0 f3 0f 11 45 f0 f3 0f 5a 45 f0 8b 45 e4 89 04 24 f2 0f 11 44 24 04 e8 f2 fc ff ff f3 0f 10 05 a0 87 04 08 f3 0f 10 4d f0 0f 2e c8 89 45 e0 0f 85 23 00 00 00 0f 8a 1d 00 00 00 8d 05 af 87 04 08 8b 4d f8 89 04 24 89 4c 24 04 e8 be fc ff ff 89 45 dc e9 13 00 00 00 e9 00 00 00 00 8b 45 f8 83 c0 01 89 45 f8 e9 2e ff ff ff e8 ae fc ff ff 31 c9 89 45 d8 89 c8 83 c4 38 5d c3", "hash": 1762095406671999214, "ast_class": "CompoundStmt", "random": 0.009740916234151853, "src_text": "{\n  long i, n = 0;\n  float a;\n  for (i = 1;; i++) {\n    if (i % 1000 == 0)\n      printf(\" %ld \", i);\n    if ((|bouncy|)(i))\n      n++;\n\n    a = n * 100 / i;\n    printf(\"\\na%f\", a);\n    if (a == 99) {\n      printf(\"\\n\\n%ld\", i);\n      break;\n    }\n  }\n  getchar();\n  return 0;\n}", "unbound_vals": null, "includes": ["<stdio.h>"], "unbound_funs": [["(|bouncy|)", null, null, 1]], "macros": null, "disasm": "((:PUSH :EBP) (:MOV :ESP :EBP) (:SUB 56 :ESP) (:MOVL 0 (- (:EBP) 4)) (:MOVL 0 (- (:EBP) 12)) (:MOVL 1 (- (:EBP) 8)) (:MOV 1000 :EAX) (:MOV (- (:EBP) 8) :ECX) (:MOV 1000 (- (:EBP) 20)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 20) :ECX) (:IDIV :ECX) (:CMP 0 :EDX) (:JNE :ADDR) (:LEA \" %ld \" :EAX) (:MOV (- (:EBP) 8) :ECX) (:MOV \" %ld \" (:ESP)) (:MOV :ECX (+ (:ESP) 4)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:MOV \" %ld \" (- (:EBP) 24)) (:MOV (- (:EBP) 8) :EAX) (:MOV :EAX (:ESP)) (:CALL :BOUNCY) (:CMP 0 :EAX) (:JE :ADDR) (:MOV (- (:EBP) 12) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 12)) (:LEA \"\na%f\" :EAX) (:IMUL 100 (- (:EBP) 12) :ECX) (:MOV \"\na%f\" (- (:EBP) 28)) (:MOV :ECX :EAX) (:CLTD) (:IDIVL (- (:EBP) 8)) (:CVTSI2SS :EAX :XMM0) (:MOVSS :XMM0 (- (:EBP) 16)) (:CVTSS2SD (- (:EBP) 16) :XMM0) (:MOV (- (:EBP) 28) :EAX) (:MOV :EAX (:ESP)) (:MOVSD :XMM0 (+ (:ESP) 4)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:MOVSS 99.0 :XMM0) (:MOVSS (- (:EBP) 16) :XMM1) (:UCOMISS 99.0 :XMM1) (:MOV :EAX (- (:EBP) 32)) (:JNE :ADDR) (:JP 134514410) (:LEA \"\n\n%ld\" :EAX) (:MOV (- (:EBP) 8) :ECX) (:MOV \"\n\n%ld\" (:ESP)) (:MOV :ECX (+ (:ESP) 4)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:MOV \"\n\n%ld\" (- (:EBP) 36)) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 8) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 8)) (:JMP :ADDR) (:CALL :PRINTF) (:XOR :ECX :ECX) (:MOV :EAX (- (:EBP) 40)) (:MOV :ECX :EAX) (:ADD 56 :ESP) (:POP :EBP) (:RET))", "types": [3529751552447467760, -6857659793473511817], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 7518327050444626205, "ast_class": "UnaryOperator", "random": 0.009749739662133439, "src_text": "-13", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "89 45 b0 89 c8 83 c4 68 5d c3", "hash": 2320111035872130617, "ast_class": "ReturnStmt", "random": 0.009753028826420262, "src_text": "return 0", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV \"%d\" (- (:EBP) 80)) (:MOV :ECX :EAX) (:ADD 104 :ESP) (:POP :EBP) (:RET))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 1437479264755419867, "ast_class": "BinaryOperator", "random": 0.009754734669480847, "src_text": "(|a0|) +\n                                                                                                                                                                                                                     (|a1|)", "unbound_vals": [["(|a0|)", 98], ["(|a1|)", 98]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -2780883006607386830, "ast_class": "BinaryOperator", "random": 0.009759274052457578, "src_text": "(|a0|) +\n                                                                                                                                     (|a1|) +\n                                                                                                                                     (|a2|) +\n                                                                                                                                     (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|)", "unbound_vals": [["(|a0|)", 59], ["(|a1|)", 59], ["(|a2|)", 59], ["(|a3|)", 59], ["(|a4|)", 59], ["(|a5|)", 59], ["(|a6|)", 59], ["(|a7|)", 59], ["(|a8|)", 59], ["(|a9|)", 59], ["(|a10|)", 59], ["(|a11|)", 59], ["(|a12|)", 59], ["(|a13|)", 59], ["(|a14|)", 59], ["(|a15|)", 59], ["(|a16|)", 59], ["(|a17|)", 59], ["(|a18|)", 59], ["(|a19|)", 59], ["(|a20|)", 59], ["(|a21|)", 59], ["(|a22|)", 59]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": "8b 45 f4 8b 0c c5 74 a0 04 08 8b 04 c5 70 a0 04 08 89 e2 89 4a 04 89 02 e8 f0 fb ff ff 83 f8 00 0f 84 21 00 00 00 8b 45 f4 8b 0c c5 74 a0 04 08 8b 04 c5 70 a0 04 08 8b 55 e8 8b 75 ec 01 c2 11 ce 89 55 e8 89 75 ec", "hash": 1198740984972242332, "ast_class": "CompoundStmt", "random": 0.009762204603555924, "src_text": "{\n      (|sum|) += (|distincts|)[(|i|)];\n    }", "unbound_vals": [["(|distincts|)", 4], ["(|i|)", 2], ["(|sum|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 12) :EAX) (:MOV (+ (:EAX) 134520948) :ECX) (:MOV (+ (:EAX) 134520944) :EAX) (:MOV :ESP :EDX) (:MOV :ECX (+ (:EDX) 4)) (:MOV :EAX (:EDX)) (:CALL :SQUAREFREE) (:CMP 0 :EAX) (:JE :ADDR) (:MOV (- (:EBP) 12) :EAX) (:MOV (+ (:EAX) 134520948) :ECX) (:MOV (+ (:EAX) 134520944) :EAX) (:MOV (- (:EBP) 24) :EDX) (:MOV (- (:EBP) 20) :ESI) (:ADD :EAX :EDX) (:ADC :ECX :ESI) (:MOV :EDX (- (:EBP) 24)) (:MOV :ESI (- (:EBP) 20)))", "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "c7 45 f8 09 00 00 00 89 45 f4 8b 45 f8 89 04 24 e8 bd fe ff ff 83 f8 00 0f 84 13 00 00 00 e9 00 00 00 00 8b 45 f8 83 c0 02 89 45 f8 e9 d9 ff ff ff 8d 05 a5 88 04 08", "hash": -5648954741578910363, "ast_class": "ForStmt", "random": 0.009771922551377599, "src_text": "for ((|n|) = 9; (|goldbach|)((|n|)); (|n|) += 2)\n    // Do nothing\n    ;", "unbound_vals": [["(|n|)", 0]], "includes": null, "unbound_funs": [["(|goldbach|)", null, null, 1]], "macros": null, "disasm": "((:MOVL 9 (- (:EBP) 8)) (:MOV \"%u primes generated, last is %u\n\" (- (:EBP) 12)) (:MOV (- (:EBP) 8) :EAX) (:MOV :EAX (:ESP)) (:CALL :GOLDBACH) (:CMP 0 :EAX) (:JE :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 8) :EAX) (:ADD 2 :EAX) (:MOV :EAX (- (:EBP) 8)) (:JMP :ADDR) (:LEA \"%u\n\" :EAX))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 8720454272020876072, "ast_class": "ImplicitCastExpr", "random": 0.009820904853347412, "src_text": "\"min = %d\\n\"", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -3132655593627774734, "ast_class": "ImplicitCastExpr", "random": 0.009831336042715022, "src_text": "1619", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 6352254194515676601, "ast_class": "ImplicitCastExpr", "random": 0.009855615418368102, "src_text": "(|a36|)", "unbound_vals": [["(|a36|)", 80]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -617212774897726945, "ast_class": "DeclRefExpr", "random": 0.009880962185213948, "src_text": "(|aux|)", "unbound_vals": [["(|aux|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "8b 4d e0 8b 55 e4 89 e6 89 56 08 89 4e 04 c7 06 00 88 04 08 89 45 a8 e8 7f fd ff ff", "hash": 3867491481164068519, "ast_class": "CallExpr", "random": 0.00988557833223247, "src_text": "printf(\"%llu\\n\", (|sum|))", "unbound_vals": [["(|sum|)", 0]], "includes": ["<stdio.h>"], "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 32) :ECX) (:MOV (- (:EBP) 28) :EDX) (:MOV :ESP :ESI) (:MOV :EDX (+ (:ESI) 8)) (:MOV :ECX (+ (:ESI) 4)) (:MOVL \"%llu\n\" (:ESI)) (:MOV \"%llu\n\" (- (:EBP) 88)) (:CALL :_ITM_DEREGISTERTMCLONETABLE))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 8189826278480550522, "ast_class": "ImplicitCastExpr", "random": 0.009891381356715523, "src_text": "101", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -728065129586271728, "ast_class": "DeclRefExpr", "random": 0.009899930386728761, "src_text": "(|jmp|)", "unbound_vals": [["(|jmp|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": null, "hash": -2785997474261971221, "ast_class": "BinaryOperator", "random": 0.009906483274682909, "src_text": "(|sum|) = (|pentagonal|)[(|n1|)] + (|pentagonal|)[(|n2|)]", "unbound_vals": [["(|pentagonal|)", 5], ["(|sum|)", 3], ["(|n1|)", 3], ["(|n2|)", 2]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": "8b 45 f4 8b 4d f0 0f af 4d e8 99 f7 f9 83 fa 00 0f 85 18 00 00 00 8b 45 e8 0f af 45 f0 89 45 f0 8b 45 ec 83 c0 01 89 45 ec e9 d2 ff ff ff", "hash": 4130803371157854697, "ast_class": "CompoundStmt", "random": 0.00993754704551797, "src_text": "{\n        (|i|) *= (|p|);\n        (|k|)++;\n      }", "unbound_vals": [["(|i|)", 3], ["(|k|)", 3], ["(|p|)", 3]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 12) :EAX) (:MOV (- (:EBP) 16) :ECX) (:IMUL (- (:EBP) 24) :ECX) (:CLTD) (:IDIV :ECX) (:CMP 0 :EDX) (:JNE :ADDR) (:MOV (- (:EBP) 24) :EAX) (:IMUL (- (:EBP) 16) :EAX) (:MOV :EAX (- (:EBP) 16)) (:MOV (- (:EBP) 20) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 20)) (:JMP :ADDR))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 4840597159100841532, "ast_class": "DeclRefExpr", "random": 0.009949364859351273, "src_text": "(|year|)", "unbound_vals": [["(|year|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 1689324587901937039, "ast_class": "BinaryOperator", "random": 0.009968377845342102, "src_text": "(|i|) - (|n|) * (long)(|pow|)(10, (|j|))", "unbound_vals": [["(|i|)", 3], ["(|n|)", 3], ["(|j|)", 3]], "includes": null, "unbound_funs": [["(|pow|)", null, null, 2]], "macros": null, "disasm": null, "types": [-6857659793473511817], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 3267050484137437245, "ast_class": "ArraySubscriptExpr", "random": 0.010000728378133483, "src_text": "(|a|)[(|i|) * (|j|)]", "unbound_vals": [["(|a|)", 2], ["(|i|)", 0], ["(|j|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "c7 45 f0 00 00 00 00", "hash": 5271717628412118066, "ast_class": "BinaryOperator", "random": 0.01000619875796871, "src_text": "(|is_prime|) = 0", "unbound_vals": [["(|is_prime|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOVL 0 (- (:EBP) 16)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 1651757073430162131, "ast_class": "CompoundStmt", "random": 0.010021991677341191, "src_text": "{  //\n      // generer un triplet primitif\n      if ((|pgcd|)((|m|), (|n|)) == 1) {\n        (|k|) = 1;\n        // generer les triplets multiples de ce primitif\n        (|tmp|) = 2 * (|m|) * (|m|) + 2 * (|m|) * (|n|);\n        (|mtmp|) = (|tmp|);\n        while ((|mtmp|) < (|maxt|)) {\n          (|matrice|)[(|mtmp|)] += 1;\n          (|k|)++;\n          (|mtmp|) = (|k|) * (|tmp|);\n        }\n      }\n      (|m|) += 2;\n    }", "unbound_vals": [["(|m|)", 2], ["(|n|)", 2], ["(|maxt|)", 2], ["(|matrice|)", 2], ["(|tmp|)", 2], ["(|k|)", 2], ["(|mtmp|)", 2]], "includes": [], "unbound_funs": [["(|pgcd|)", false, false, 2]], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -8788714613293329216, "ast_class": "CStyleCastExpr", "random": 0.010028556990599014, "src_text": "(int)(|sqrt|)((|i|))", "unbound_vals": [["(|i|)", 1]], "includes": null, "unbound_funs": [["(|sqrt|)", null, null, 1]], "macros": null, "disasm": null, "types": [-5849325953548989793], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -5993179631916691772, "ast_class": "InitListExpr", "random": 0.010052617980463086, "src_text": "{-906, -626, -834, 763, 426, -48}", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -7532138515456753868, "ast_class": "ImplicitCastExpr", "random": 0.010062856451246271, "src_text": "(|cur_line|)", "unbound_vals": [["(|cur_line|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -8607173851805007663, "ast_class": "BinaryOperator", "random": 0.010064871823533328, "src_text": "(|a0|) + (|a1|) + (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|)", "unbound_vals": [["(|a0|)", 97], ["(|a1|)", 97], ["(|a2|)", 97], ["(|a3|)", 97], ["(|a4|)", 97], ["(|a5|)", 97], ["(|a6|)", 97], ["(|a7|)", 97], ["(|a8|)", 97], ["(|a9|)", 97], ["(|a10|)", 97], ["(|a11|)", 97], ["(|a12|)", 97], ["(|a13|)", 97], ["(|a14|)", 97], ["(|a15|)", 97], ["(|a16|)", 97], ["(|a17|)", 97], ["(|a18|)", 97], ["(|a19|)", 97], ["(|a20|)", 97], ["(|a21|)", 97], ["(|a22|)", 97], ["(|a23|)", 97], ["(|a24|)", 97], ["(|a25|)", 97], ["(|a26|)", 97], ["(|a27|)", 97], ["(|a28|)", 97], ["(|a29|)", 97], ["(|a30|)", 97], ["(|a31|)", 97], ["(|a32|)", 97], ["(|a33|)", 97], ["(|a34|)", 97], ["(|a35|)", 97], ["(|a36|)", 97], ["(|a37|)", 97], ["(|a38|)", 97], ["(|a39|)", 97], ["(|a40|)", 97], ["(|a41|)", 97]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -7120518703855307734, "ast_class": "IntegerLiteral", "random": 0.01007559693735749, "src_text": "453", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -7981840143094072734, "ast_class": "IntegerLiteral", "random": 0.010109023420863505, "src_text": "394", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 1740129030696612671, "ast_class": "ImplicitCastExpr", "random": 0.010138420425984673, "src_text": "(|x1|)", "unbound_vals": [["(|x1|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 6339776758242340046, "ast_class": "InitListExpr", "random": 0.010140928949037065, "src_text": "{8, 5, 4}", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -1079721172361953032, "ast_class": "ImplicitCastExpr", "random": 0.010146836982201535, "src_text": "(|a2|)", "unbound_vals": [["(|a2|)", 65]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -6217043735966233755, "ast_class": "BinaryOperator", "random": 0.010179310376525863, "src_text": "(|a0|) +\n                                                                                                                                                                                          (|a1|) +\n                                                                                                                                                                                          (|a2|) +\n                                                                                                                                                                                          (|a3|) +\n                                                                                                                                                                                          (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) +\n                                                                                                                                                                                          (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) + (|a40|) + (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|) + (|a61|) +\n                                                                                                                                                                                          (|a62|) + (|a63|) + (|a64|) + (|a65|) + (|a66|) + (|a67|) + (|a68|) + (|a69|) + (|a70|) + (|a71|) + (|a72|) + (|a73|) +\n                                                                                                                                                                                          (|a74|) +\n                                                                                                                                                                                          (|a75|) +\n                                                                                                                                                                                          (|a76|) +\n                                                                                                                                                                                          (|a77|) +\n                                                                                                                                                                                          (|a78|)", "unbound_vals": [["(|a0|)", 85], ["(|a1|)", 85], ["(|a2|)", 85], ["(|a3|)", 85], ["(|a4|)", 85], ["(|a5|)", 85], ["(|a6|)", 85], ["(|a7|)", 85], ["(|a8|)", 85], ["(|a9|)", 85], ["(|a10|)", 85], ["(|a11|)", 85], ["(|a12|)", 85], ["(|a13|)", 85], ["(|a14|)", 85], ["(|a15|)", 85], ["(|a16|)", 85], ["(|a17|)", 85], ["(|a18|)", 85], ["(|a19|)", 85], ["(|a20|)", 85], ["(|a21|)", 85], ["(|a22|)", 85], ["(|a23|)", 85], ["(|a24|)", 85], ["(|a25|)", 85], ["(|a26|)", 85], ["(|a27|)", 85], ["(|a28|)", 85], ["(|a29|)", 85], ["(|a30|)", 85], ["(|a31|)", 85], ["(|a32|)", 85], ["(|a33|)", 85], ["(|a34|)", 85], ["(|a35|)", 85], ["(|a36|)", 85], ["(|a37|)", 85], ["(|a38|)", 85], ["(|a39|)", 85], ["(|a40|)", 85], ["(|a41|)", 85], ["(|a42|)", 85], ["(|a43|)", 85], ["(|a44|)", 85], ["(|a45|)", 85], ["(|a46|)", 85], ["(|a47|)", 85], ["(|a48|)", 85], ["(|a49|)", 85], ["(|a50|)", 85], ["(|a51|)", 85], ["(|a52|)", 85], ["(|a53|)", 85], ["(|a54|)", 85], ["(|a55|)", 85], ["(|a56|)", 85], ["(|a57|)", 85], ["(|a58|)", 85], ["(|a59|)", 85], ["(|a60|)", 85], ["(|a61|)", 85], ["(|a62|)", 85], ["(|a63|)", 85], ["(|a64|)", 85], ["(|a65|)", 85], ["(|a66|)", 85], ["(|a67|)", 85], ["(|a68|)", 85], ["(|a69|)", 85], ["(|a70|)", 85], ["(|a71|)", 85], ["(|a72|)", 85], ["(|a73|)", 85], ["(|a74|)", 85], ["(|a75|)", 85], ["(|a76|)", 85], ["(|a77|)", 85], ["(|a78|)", 85]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "8b 45 f8 8b 0d 24 a0 04 08 89 04 8d 68 e2 13 08", "hash": 6339049660271213219, "ast_class": "BinaryOperator", "random": 0.010185150925469011, "src_text": "(|primes|)[(|primes_number|)] = (|i|)", "unbound_vals": [["(|primes|)", 4], ["(|primes_number|)", 4], ["(|i|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 8) :EAX) (:MOV 134520868 :ECX) (:MOV :EAX (+ (:ECX) 135520872)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 3794673567127280722, "ast_class": "CallExpr", "random": 0.010193963759161706, "src_text": "(|digitsToBitmap|)(4 * (|answer|))", "unbound_vals": [["(|answer|)", 1]], "includes": [], "unbound_funs": [["(|digitsToBitmap|)", false, false, 1]], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -6731636569712274982, "ast_class": "IntegerLiteral", "random": 0.010202492860751478, "src_text": "3547", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -8423581440551528498, "ast_class": "InitListExpr", "random": 0.010218968805839057, "src_text": "{542, -49, -327, -469, 257, -947}", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -1375705315508101733, "ast_class": "ParmVar", "random": 0.010223819839206616, "src_text": "int len", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [-5849325953548989793], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": -43411462540333377, "ast_class": "ImplicitCastExpr", "random": 0.010271677298022808, "src_text": "(|length_cuboid|)", "unbound_vals": [], "includes": [], "unbound_funs": [["(|length_cuboid|)", false, false, 3]], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 142702725264254275, "ast_class": "ParenExpr", "random": 0.010295687584842894, "src_text": "(N - (|p1|))", "unbound_vals": [["(|p1|)", 3]], "includes": null, "unbound_funs": null, "macros": [["N", "N 50"]], "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "c7 45 e0 00 00 00 00 8b 45 e0 3b 45 e4 0f 8d 33 00 00 00 8b 45 e0 8d 04 80 c1 e0 04 8b 88 7c a0 04 08 8b 80 78 a0 04 08 8b 55 c0 8b 75 c4 01 c2 11 ce 89 55 c0 89 75 c4 8b 45 e0 83 c0 01 89 45 e0 e9 c1 ff ff ff 8d 05 70 88 04 08", "hash": 9111694245375225989, "ast_class": "ForStmt", "random": 0.010334847624034249, "src_text": "for ((|i|) = 0; (|i|) < (|search|); ++(|i|)) {\n    (|decreasing|) += (|tab|)[(|i|)][9];\n  }", "unbound_vals": [["(|tab|)", 2], ["(|search|)", 0], ["(|i|)", 0], ["(|decreasing|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOVL 0 (- (:EBP) 32)) (:MOV (- (:EBP) 32) :EAX) (:CMP (- (:EBP) 28) :EAX) (:JGE :ADDR) (:MOV (- (:EBP) 32) :EAX) (:LEA (:EAX) :EAX) (:SHL 4 :EAX) (:MOV (+ (:EAX) 134520956) :ECX) (:MOV (+ (:EAX) 134520952) :EAX) (:MOV (- (:EBP) 64) :EDX) (:MOV (- (:EBP) 60) :ESI) (:ADD :EAX :EDX) (:ADC :ECX :ESI) (:MOV :EDX (- (:EBP) 64)) (:MOV :ESI (- (:EBP) 60)) (:MOV (- (:EBP) 32) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 32)) (:JMP :ADDR) (:LEA \"Non bouncy nmbers :  %llu (%llu + %llu - %llu)\n\" :EAX))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -6511768265636810020, "ast_class": "ParenExpr", "random": 0.0103394047344737, "src_text": "((|i|) / 2)", "unbound_vals": [["(|i|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 164944642830219823, "ast_class": "BinaryOperator", "random": 0.010343355620895167, "src_text": "(|a0|) +\n                                                                                                                                                        (|a1|) +\n                                                                                                                                                        (|a2|) +\n                                                                                                                                                        (|a3|) +\n                                                                                                                                                        (|a4|) +\n                                                                                                                                                        (|a5|) +\n                                                                                                                                                        (|a6|) +\n                                                                                                                                                        (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) +\n                                                                                                                                                        (|a25|) +\n                                                                                                                                                        (|a26|) +\n                                                                                                                                                        (|a27|) +\n                                                                                                                                                        (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|)", "unbound_vals": [["(|a0|)", 69], ["(|a1|)", 69], ["(|a2|)", 69], ["(|a3|)", 69], ["(|a4|)", 69], ["(|a5|)", 69], ["(|a6|)", 69], ["(|a7|)", 69], ["(|a8|)", 69], ["(|a9|)", 69], ["(|a10|)", 69], ["(|a11|)", 69], ["(|a12|)", 69], ["(|a13|)", 69], ["(|a14|)", 69], ["(|a15|)", 69], ["(|a16|)", 69], ["(|a17|)", 69], ["(|a18|)", 69], ["(|a19|)", 69], ["(|a20|)", 69], ["(|a21|)", 69], ["(|a22|)", 69], ["(|a23|)", 69], ["(|a24|)", 69], ["(|a25|)", 69], ["(|a26|)", 69], ["(|a27|)", 69], ["(|a28|)", 69], ["(|a29|)", 69], ["(|a30|)", 69], ["(|a31|)", 69], ["(|a32|)", 69], ["(|a33|)", 69], ["(|a34|)", 69]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": null, "hash": -4573353458026719703, "ast_class": "BinaryOperator", "random": 0.010348668304402509, "src_text": "(|sum|) = (|carry|) + (|n2|)->digits[(|j|)]", "unbound_vals": [["(|n2|)", 3], ["(|carry|)", 2], ["(|sum|)", 2], ["(|j|)", 2]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 2305005556353152260, "ast_class": "ImplicitCastExpr", "random": 0.010381510671884642, "src_text": "(|a4|)", "unbound_vals": [["(|a4|)", 11]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": null, "hash": -1570874964196057579, "ast_class": "Function", "random": 0.010388979948923183, "src_text": "int main() {\n  long long int i, j, a, t, tt = 0;\n  bool flag;\n  long long int sum = 0;\n\n  for (i = 2; i < N; i++)\n    p[i] = 1;\n  for (i = 2; i < N; i++)\n    if (p[i])\n      for (j = i + i; j < N; j += i)\n        p[j] = 0;\n\n  for (i = 11;; i++)\n    if (!p[i])\n      if (i % 2 != 0 && i % 5 != 0) {\n        a = 1;\n        flag = 0;\n        for (j = 1;; j++) {\n          a = a % i;\n          if (a == 0) {\n            t = j;\n            flag = 1;\n            break;\n          }\n          a = 10 * a + 1;\n          if (a == 1)\n            break;\n        }\n        if ((i - 1) % t == 0 && flag;) {\n          tt++;\n          printf(\"Number%lld: n=%lld; A(n)=%lld\\n\", tt, i, t);\n          sum += i;\n          if (tt == 25)\n            break;\n        }\n      }\n  printf(\"\\nAnswer:%lld\\n\", sum);\n  return 0;\n}", "unbound_vals": [], "includes": ["<stdio.h>"], "unbound_funs": [], "macros": [], "disasm": null, "types": [-6252000326173323660], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": -6334776469998068159, "ast_class": "ImplicitCastExpr", "random": 0.010397997953055849, "src_text": "(|log10|)", "unbound_vals": null, "includes": null, "unbound_funs": [["(|log10|)", null, null, 1]], "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -5406533133609985343, "ast_class": "BinaryOperator", "random": 0.010414848280002387, "src_text": "(|i|) = 0", "unbound_vals": [["(|i|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -1849223405028242267, "ast_class": "DeclRefExpr", "random": 0.010417300800505513, "src_text": "(|tsum|)", "unbound_vals": [["(|tsum|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 4327432837501354258, "ast_class": "DeclRefExpr", "random": 0.010423462098701153, "src_text": "(|a28|)", "unbound_vals": [["(|a28|)", 38]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 3519665429544017829, "ast_class": "BinaryOperator", "random": 0.010445239166748, "src_text": "(|s|) == 111111111", "unbound_vals": [["(|s|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 4388640340836911129, "ast_class": "DeclRefExpr", "random": 0.010449415880810609, "src_text": "(|a70|)", "unbound_vals": [["(|a70|)", 70]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -4580039865181196474, "ast_class": "IntegerLiteral", "random": 0.01045350400909606, "src_text": "763", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -8613357962570058746, "ast_class": "IntegerLiteral", "random": 0.010456943151739728, "src_text": "8647", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "8b 45 ec 83 e8 01 89 45 c4", "hash": -8723966125848785402, "ast_class": "BinaryOperator", "random": 0.010467238622039354, "src_text": "(|up|) = (|rootN|) - 1", "unbound_vals": [["(|rootN|)", 1], ["(|up|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 20) :EAX) (:SUB 1 :EAX) (:MOV :EAX (- (:EBP) 60)))", "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "89 45 8c 89 c8 81 c4 80 00 00 00 5e 5b 5d c3", "hash": -4365365466065479142, "ast_class": "ReturnStmt", "random": 0.010469178181162442, "src_text": "return 0", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV \"%lld\n\" (- (:EBP) 116)) (:MOV :ECX :EAX) (:ADD 128 :ESP) (:POP :ESI) (:POP :EBX) (:POP :EBP) (:RET))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -7991253743972376951, "ast_class": "UnaryExprOrTypeTraitExpr", "random": 0.01047396669370837, "src_text": "sizeof(\"three\")", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -141629621781578502, "ast_class": "ImplicitCastExpr", "random": 0.010474209640780496, "src_text": "(|triangle|)[(|x|)]", "unbound_vals": [["(|x|)", 1], ["(|triangle|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 8196925824956720138, "ast_class": "ImplicitCastExpr", "random": 0.010480790665365114, "src_text": "181", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": "c7 85 f0 f9 ff ff 00 00 00 00 8b 85 f0 f9 ff ff 3b 45 f0 0f 8d 2e 00 00 00 8b 85 f0 f9 ff ff 0f be 84 05 fc f9 ff ff 03 85 f4 f9 ff ff 89 85 f4 f9 ff ff 8b 85 f0 f9 ff ff 83 c0 01 89 85 f0 f9 ff ff e9 c3 ff ff ff 8d 05 d2 88 04 08", "hash": 5479016066280936402, "ast_class": "CompoundStmt", "random": 0.010490382023617961, "src_text": "{\n            (|sum|) += (|res|)[(|p|)];\n          }", "unbound_vals": [["(|res|)", 2], ["(|sum|)", 1], ["(|p|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOVL 0 (- (:EBP) 1552)) (:MOV (- (:EBP) 1552) :EAX) (:CMP (- (:EBP) 16) :EAX) (:JGE :ADDR) (:MOV (- (:EBP) 1552) :EAX) (:MOVSBL (- (:EBP) 1540) :EAX) (:ADD (- (:EBP) 1548) :EAX) (:MOV :EAX (- (:EBP) 1548)) (:MOV (- (:EBP) 1552) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 1552)) (:JMP :ADDR) (:LEA \"%d\n\" :EAX))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -7657721018666323880, "ast_class": "ImplicitCastExpr", "random": 0.010499723763306545, "src_text": "(|maxN|)", "unbound_vals": [["(|maxN|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 4107941306347351908, "ast_class": "IntegerLiteral", "random": 0.010515547123279512, "src_text": "523226", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -7996669632460351216, "ast_class": "ConditionalOperator", "random": 0.010526755285601208, "src_text": "(|x|) < (|max|) ? (|x|) : (|max|)", "unbound_vals": [["(|x|)", 1], ["(|max|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": null, "hash": 5027613781627187658, "ast_class": "ForStmt", "random": 0.010540759957051615, "src_text": "for ((|j|) = 0; (|j|) < 5; (|j|)++) {\n        (|prodotto_tmp|) *= (|a_num|)[(|i|) - (|j|)];\n      }", "unbound_vals": [["(|i|)", 2], ["(|prodotto_tmp|)", 2], ["(|j|)", 2], ["(|a_num|)", 2]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": "c7 45 f8 00 00 00 00 83 7d f8 02 0f 8f 04 01 00 00 c7 45 f4 00 00 00 00 83 7d f4 04 0f 8f e0 00 00 00 c7 45 f0 00 00 00 00 83 7d f0 0a 0f 8f bc 00 00 00 c7 45 ec 00 00 00 00 83 7d ec 14 0f 8f 98 00 00 00 c7 45 e8 00 00 00 00 83 7d e8 28 0f 8f 74 00 00 00 c7 45 e4 00 00 00 00 83 7d e4 64 0f 8f 50 00 00 00 6b 45 f8 64 6b 4d f4 32 01 c8 6b 4d f0 14 01 c8 6b 4d ec 0a 01 c8 6b 4d e8 05 01 c8 8b 4d e4 c1 e1 01 01 c8 3d c8 00 00 00 0f 8f 0e 00 00 00 8b 45 e0 83 c0 01 89 45 e0 e9 05 00 00 00 e9 00 00 00 00 8b 45 e4 83 c0 01 89 45 e4 e9 a6 ff ff ff e9 00 00 00 00 8b 45 e8 83 c0 01 89 45 e8 e9 82 ff ff ff e9 00 00 00 00 8b 45 ec 83 c0 01 89 45 ec e9 5e ff ff ff e9 00 00 00 00 8b 45 f0 83 c0 01 89 45 f0 e9 3a ff ff ff e9 00 00 00 00 8b 45 f4 83 c0 01 89 45 f4 e9 16 ff ff ff e9 00 00 00 00 8b 45 f8 83 c0 01 89 45 f8 e9 f2 fe ff ff 8d 05 80 86 04 08", "hash": 3543101266066513031, "ast_class": "CompoundStmt", "random": 0.010560607250359677, "src_text": "F(i, 2,\n    F(j, 4,\n      F(k, 10, F(l, 20, F(m, 40, F(n, 100, 100 * i + 50 * j + 20 * k + 10 * l +\n                                                       5 * m + 2 * n <=\n                                                   200\n                                               ? s++\n                                               : 0;))))))", "unbound_vals": [["(|s|)", 3], ["(|i|)", 3], ["(|j|)", 3], ["(|k|)", 3], ["(|l|)", 3], ["(|m|)", 3], ["(|n|)", 3]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOVL 0 (- (:EBP) 8)) (:CMPL 2 (- (:EBP) 8)) (:JG :ADDR) (:MOVL 0 (- (:EBP) 12)) (:CMPL 4 (- (:EBP) 12)) (:JG :ADDR) (:MOVL 0 (- (:EBP) 16)) (:CMPL 10 (- (:EBP) 16)) (:JG :ADDR) (:MOVL 0 (- (:EBP) 20)) (:CMPL 20 (- (:EBP) 20)) (:JG :ADDR) (:MOVL 0 (- (:EBP) 24)) (:CMPL 40 (- (:EBP) 24)) (:JG :ADDR) (:MOVL 0 (- (:EBP) 28)) (:CMPL 100 (- (:EBP) 28)) (:JG :ADDR) (:IMUL 100 (- (:EBP) 8) :EAX) (:IMUL 50 (- (:EBP) 12) :ECX) (:ADD :ECX :EAX) (:IMUL 20 (- (:EBP) 16) :ECX) (:ADD :ECX :EAX) (:IMUL 10 (- (:EBP) 20) :ECX) (:ADD :ECX :EAX) (:IMUL 5 (- (:EBP) 24) :ECX) (:ADD :ECX :EAX) (:MOV (- (:EBP) 28) :ECX) (:SHL 1 :ECX) (:ADD :ECX :EAX) (:CMP 200 :EAX) (:JG :ADDR) (:MOV (- (:EBP) 32) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 32)) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 28) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 28)) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 24) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 24)) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 20) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 20)) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 16) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 16)) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 12) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 12)) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 8) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 8)) (:JMP :ADDR) (:LEA \"%i\n\" :EAX))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -6688310184810856534, "ast_class": "ImplicitCastExpr", "random": 0.010576538670495128, "src_text": "(|numNum|)", "unbound_vals": [["(|numNum|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 5555742104580683871, "ast_class": "DeclRefExpr", "random": 0.010591109711315161, "src_text": "(|maxline|)", "unbound_vals": [["(|maxline|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 8732385986745432538, "ast_class": "ImplicitCastExpr", "random": 0.010593533170866642, "src_text": "\"50%c at %lu\\n\"", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 1600604277904379914, "ast_class": "IntegerLiteral", "random": 0.010627878303062332, "src_text": "6373", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -1984222971552579132, "ast_class": "IntegerLiteral", "random": 0.010633983716134332, "src_text": "587101", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 2877617542770037383, "ast_class": "DeclRefExpr", "random": 0.010640186901237692, "src_text": "(|a17|)", "unbound_vals": [["(|a17|)", 33]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -3708605807031723452, "ast_class": "BinaryOperator", "random": 0.010648718154754433, "src_text": "(|a66|) <\n                                                                                                                                              (|a67|)", "unbound_vals": [["(|a66|)", 68], ["(|a67|)", 68]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "83 bd 28 a2 ff ff 00 89 85 1c a2 ff ff 0f 8f 0d 00 00 00 6b 85 28 a2 ff ff ff 89 85 28 a2 ff ff 8d 05 95 e6 04 08", "hash": -3000829406927989124, "ast_class": "IfStmt", "random": 0.010666533003229284, "src_text": "if ((|a|) <= 0)\n      (|a|) *= -1", "unbound_vals": [["(|a|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:CMPL 0 (- (:EBP) 24024)) (:MOV \"  %ld\" (- (:EBP) 24036)) (:JG :ADDR) (:IMUL 4294967295 (- (:EBP) 24024) :EAX) (:MOV :EAX (- (:EBP) 24024)) (:LEA \"  %ld\" :EAX))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 8695516133308209307, "ast_class": "ParenExpr", "random": 0.010669865692414127, "src_text": "((|a0|) + (|a1|) +\n                                                                    (|a2|) + (|a3|) +\n                                                                    (|a4|) + (|a5|) +\n                                                                    (|a6|) + (|a7|) +\n                                                                    (|a8|) + (|a9|) +\n                                                                    (|a10|) + (|a11|) +\n                                                                    (|a12|) + (|a13|) +\n                                                                    (|a14|) + (|a15|) +\n                                                                    (|a16|) + (|a17|) +\n                                                                    (|a18|) + (|a19|) +\n                                                                    (|a20|) + (|a21|) +\n                                                                    (|a22|) + (|a23|) +\n                                                                    (|a24|) + (|a25|) +\n                                                                    (|a26|) + (|a27|))", "unbound_vals": [["(|a0|)", 28], ["(|a1|)", 28], ["(|a2|)", 28], ["(|a3|)", 28], ["(|a4|)", 28], ["(|a5|)", 28], ["(|a6|)", 28], ["(|a7|)", 28], ["(|a8|)", 28], ["(|a9|)", 28], ["(|a10|)", 28], ["(|a11|)", 28], ["(|a12|)", 28], ["(|a13|)", 28], ["(|a14|)", 28], ["(|a15|)", 28], ["(|a16|)", 28], ["(|a17|)", 28], ["(|a18|)", 28], ["(|a19|)", 28], ["(|a20|)", 28], ["(|a21|)", 28], ["(|a22|)", 28], ["(|a23|)", 28], ["(|a24|)", 28], ["(|a25|)", 28], ["(|a26|)", 28], ["(|a27|)", 28]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 8727952360268690393, "ast_class": "BinaryOperator", "random": 0.010703510683370165, "src_text": "(|a0|) + (|a1|) + (|a2|) + (|a3|) +\n                                                            (|a4|) + (|a5|) + (|a6|) + (|a7|) +\n                                                            (|a8|) + (|a9|) + (|a10|) +\n                                                            (|a11|) + (|a12|) + (|a13|) +\n                                                            (|a14|) + (|a15|) + (|a16|) +\n                                                            (|a17|)", "unbound_vals": [["(|a0|)", 23], ["(|a1|)", 23], ["(|a2|)", 23], ["(|a3|)", 23], ["(|a4|)", 23], ["(|a5|)", 23], ["(|a6|)", 23], ["(|a7|)", 23], ["(|a8|)", 23], ["(|a9|)", 23], ["(|a10|)", 23], ["(|a11|)", 23], ["(|a12|)", 23], ["(|a13|)", 23], ["(|a14|)", 23], ["(|a15|)", 23], ["(|a16|)", 23], ["(|a17|)", 23]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -7186028848109758623, "ast_class": "CompoundStmt", "random": 0.010706519849611018, "src_text": "{\n      int d = 10, log10 = 0;\n      for (; (|i|) / d > 0; d *= 10) {\n        log10++;\n      }\n      d /= 10;\n\n      int k = (|i|);\n      bool ok = 1;\n      for (int j = 0; j < log10; j++) {\n        k /= 10;\n        ok &= k == 2 || k & 1 && !(|a|)[k];\n        if (!ok) {\n          goto ohthehorror;\n        }\n      }\n      // ok, right to left truncable\n      // printf(\"right to left: %d\\n\", i);\n\n      k = (|i|);\n      for (int j = 0; j < log10; j++) {\n        k = k - (k / d) * d;\n        d /= 10;\n        if (!(ok &= k == 2 || k & 1 && !(|a|)[k])) {\n          goto ohthehorror;\n        }\n      }\n      if (ok) {\n        printf(\"yay^2!! %d\\n\", (|i|));\n        (|num|)++;\n        (|sum|) += (|i|);\n      }\n    ohthehorror:;\n    }", "unbound_vals": [["(|a|)", 2], ["(|i|)", 2], ["(|num|)", 2], ["(|sum|)", 2]], "includes": ["<stdio.h>"], "unbound_funs": [], "macros": [], "disasm": null, "types": [-5864957900383334482, -5849325953548989793], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 3972208111948725916, "ast_class": "BinaryOperator", "random": 0.010731530632367092, "src_text": "0.25 + (|q|)", "unbound_vals": [["(|q|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -1962001347470719683, "ast_class": "DeclRefExpr", "random": 0.010733205276469593, "src_text": "(|a31|)", "unbound_vals": [["(|a31|)", 87]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -9075687457524265849, "ast_class": "CStyleCastExpr", "random": 0.010733317979395474, "src_text": "(int*)malloc(((|i|) + 1) * sizeof(int))", "unbound_vals": [["(|i|)", 1]], "includes": ["<stdlib.h>"], "unbound_funs": [], "macros": [], "disasm": null, "types": [-5849325953548989793, -5849325953548989792], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 1441742156249948510, "ast_class": "BinaryOperator", "random": 0.010753805379926318, "src_text": "5 * 4 * 3 * 2", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -8618540435494473929, "ast_class": "DeclRefExpr", "random": 0.010757811111210214, "src_text": "(|a2|)", "unbound_vals": [["(|a2|)", 96]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 3749306785281386134, "ast_class": "ImplicitCastExpr", "random": 0.010763526000517554, "src_text": "553787", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -590936986589034989, "ast_class": "ImplicitCastExpr", "random": 0.010766917697811462, "src_text": "(|factor1|)[(|pointer1|)]", "unbound_vals": [["(|factor1|)", 5], ["(|pointer1|)", 3]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -5178063235776529739, "ast_class": "DeclRefExpr", "random": 0.010797162406979477, "src_text": "(|month|)", "unbound_vals": [["(|month|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "8b 45 e4 89 45 dc", "hash": -2725681486626138420, "ast_class": "BinaryOperator", "random": 0.010803336151606002, "src_text": "(|sum|) = (|s|)", "unbound_vals": [["(|s|)", 4], ["(|sum|)", 4]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 28) :EAX) (:MOV :EAX (- (:EBP) 36)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -2555294187421406892, "ast_class": "ImplicitCastExpr", "random": 0.010841803550728613, "src_text": "587101", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 5562254020014318050, "ast_class": "ImplicitCastExpr", "random": 0.010847128693085129, "src_text": "(|a13|)", "unbound_vals": [["(|a13|)", 24]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -1884845890394977419, "ast_class": "BinaryOperator", "random": 0.01084795405797212, "src_text": "1000 - (|tdc|)", "unbound_vals": [["(|tdc|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -3643823969944916657, "ast_class": "UnaryOperator", "random": 0.010862580621212814, "src_text": "-989", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 1820699164362783114, "ast_class": "DeclRefExpr", "random": 0.010887498010117347, "src_text": "(|C|)", "unbound_vals": [["(|C|)", 4]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "55 89 e5 83 ec 10 8b 45 08 b9 02 00 00 00 89 45 fc c7 45 f8 00 00 00 00 8b 45 fc 99 f7 f9 89 45 f4 83 7d f4 00 0f 8e 37 00 00 00 8b 45 fc 99 f7 7d f4 83 fa 00 0f 84 0a 00 00 00 31 c0 89 45 f0 e9 06 00 00 00 8b 45 f4 89 45 f0 8b 45 f0 03 45 f8 89 45 f8 8b 45 f4 83 c0 ff 89 45 f4 e9 bf ff ff ff 8b 45 f8 83 c4 10 5d c3 66 0f 1f 44 00 00", "hash": 2799439614649039826, "ast_class": "Function", "random": 0.010904632160768424, "src_text": "int d(int n) {\n  int tsum = 0, i;\n  for (i = n / 2; i > 0; i--)\n    tsum += (n % i) ? 0 : i;\n  return tsum;\n}", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:PUSH :EBP) (:MOV :ESP :EBP) (:SUB 16 :ESP) (:MOV (+ (:EBP) 8) :EAX) (:MOV 2 :ECX) (:MOV :EAX (- (:EBP) 4)) (:MOVL 0 (- (:EBP) 8)) (:MOV (- (:EBP) 4) :EAX) (:CLTD) (:IDIV 2) (:MOV :EAX (- (:EBP) 12)) (:CMPL 0 (- (:EBP) 12)) (:JLE :ADDR) (:MOV (- (:EBP) 4) :EAX) (:CLTD) (:IDIVL (- (:EBP) 12)) (:CMP 0 :EDX) (:JE :ADDR) (:XOR :EAX :EAX) (:MOV :EAX (- (:EBP) 16)) (:JMP :ADDR) (:MOV (- (:EBP) 12) :EAX) (:MOV :EAX (- (:EBP) 16)) (:MOV (- (:EBP) 16) :EAX) (:ADD (- (:EBP) 8) :EAX) (:MOV :EAX (- (:EBP) 8)) (:MOV (- (:EBP) 12) :EAX) (:ADD 4294967295 :EAX) (:MOV :EAX (- (:EBP) 12)) (:JMP :ADDR) (:MOV (- (:EBP) 8) :EAX) (:ADD 16 :ESP) (:POP :EBP) (:RET) (:NOPW (+ (:EAX) 0)))", "types": [-5849325953548989793], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": 5629355674589956662, "ast_class": "BinaryOperator", "random": 0.010910428505088166, "src_text": "(|nbB|) * 100 != (|ind|)", "unbound_vals": [["(|nbB|)", 0], ["(|ind|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 5491014374222251541, "ast_class": "DeclRefExpr", "random": 0.01092773008255754, "src_text": "(|len|)", "unbound_vals": [["(|len|)", 3]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 355625509824227824, "ast_class": "IntegerLiteral", "random": 0.010933042454560837, "src_text": "736350", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": "8b 45 f8 8b 4d f4 89 04 24 89 4c 24 04 e8 53 ff ff ff 83 f8 01 0f 85 27 00 00 00 8b 45 f8 6b 4d f4 03 39 c8 0f 8d 18 00 00 00 8b 45 f4 c1 e0 01 3b 45 f8 0f 8d 09 00 00 00 8b 45 f0 83 c0 01 89 45 f0 e9 00 00 00 00 8b 45 f4 83 c0 01 89 45 f4 e9 9f ff ff ff e9 00 00 00 00", "hash": 5549030045832897260, "ast_class": "IfStmt", "random": 0.010937253803612768, "src_text": "if ((|gcd|)((|i|), (|j|)) == 1 && (|i|) < 3 * (|j|) && 2 * (|j|) < (|i|))\n        (|n|)++", "unbound_vals": [["(|i|)", 0], ["(|j|)", 0], ["(|n|)", 0]], "includes": null, "unbound_funs": [["(|gcd|)", null, null, 2]], "macros": null, "disasm": "((:MOV (- (:EBP) 8) :EAX) (:MOV (- (:EBP) 12) :ECX) (:MOV :EAX (:ESP)) (:MOV :ECX (+ (:ESP) 4)) (:CALL :GCD) (:CMP 1 :EAX) (:JNE :ADDR) (:MOV (- (:EBP) 8) :EAX) (:IMUL 3 (- (:EBP) 12) :ECX) (:CMP :ECX :EAX) (:JGE :ADDR) (:MOV (- (:EBP) 12) :EAX) (:SHL 1 :EAX) (:CMP (- (:EBP) 8) :EAX) (:JGE :ADDR) (:MOV (- (:EBP) 16) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 16)) (:JMP :ADDR) (:MOV (- (:EBP) 12) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 12)) (:JMP :ADDR) (:JMP :ADDR))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 4215829938239532119, "ast_class": "Var", "random": 0.010942863636961286, "src_text": " d", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [-5849325953548989793], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": -8619422030331670626, "ast_class": "DeclRefExpr", "random": 0.010975577545508597, "src_text": "(|n2|)", "unbound_vals": [["(|n2|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 5441996129049472942, "ast_class": "Var", "random": 0.010987116122769924, "src_text": "intmax_t smallestDiff = LONG_MAX", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [-4294777265803679431], "is_decl": true},
{"full_stmt": true, "binary_contents": null, "hash": 7131000031180791351, "ast_class": "Function", "random": 0.01099289966365502, "src_text": "int is_prime(int n) {\n  int lim, test;\n\n  if (n == 2) {\n    return 1;\n  }\n  if ((n % 2 == 0) || (n == 1)) {\n    return 0;\n  }\n\n  lim = (int)(|sqrt|)((double)n) + 1;\n  for (test = 3; test <= lim; test += 2) {\n    if (n % test == 0) {\n      return 0;\n    }\n  }\n  return 1;\n}", "unbound_vals": [], "includes": [], "unbound_funs": [["(|sqrt|)", false, false, 1]], "macros": [], "disasm": null, "types": [-5849325953548989793, -4605258830889951363], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": -4366824924286020527, "ast_class": "BinaryOperator", "random": 0.011002758536969859, "src_text": "(|a0|) +\n                                                                                                                       (|a1|) +\n                                                                                                                       (|a2|) +\n                                                                                                                       (|a3|) +\n                                                                                                                       (|a4|) +\n                                                                                                                       (|a5|) +\n                                                                                                                       (|a6|) +\n                                                                                                                       (|a7|) +\n                                                                                                                       (|a8|) +\n                                                                                                                       (|a9|) +\n                                                                                                                       (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|)", "unbound_vals": [["(|a0|)", 53], ["(|a1|)", 53], ["(|a2|)", 53], ["(|a3|)", 53], ["(|a4|)", 53], ["(|a5|)", 53], ["(|a6|)", 53], ["(|a7|)", 53], ["(|a8|)", 53], ["(|a9|)", 53], ["(|a10|)", 53], ["(|a11|)", 53], ["(|a12|)", 53], ["(|a13|)", 53], ["(|a14|)", 53], ["(|a15|)", 53], ["(|a16|)", 53], ["(|a17|)", 53], ["(|a18|)", 53], ["(|a19|)", 53], ["(|a20|)", 53], ["(|a21|)", 53], ["(|a22|)", 53], ["(|a23|)", 53], ["(|a24|)", 53]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -783591036178194915, "ast_class": "ArraySubscriptExpr", "random": 0.011019819209226345, "src_text": "(|nummap|)[(|abundant|)[(|i|)] + (|abundant|)[(|j|)]]", "unbound_vals": [["(|nummap|)", 4], ["(|abundant|)", 4], ["(|i|)", 2], ["(|j|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 396068454091499556, "ast_class": "IntegerLiteral", "random": 0.01103154625873215, "src_text": "555322", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 7163796237473362578, "ast_class": "DeclRefExpr", "random": 0.011047142844620605, "src_text": "(|spiral|)", "unbound_vals": [["(|spiral|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 7518327048669616921, "ast_class": "UnaryOperator", "random": 0.011048686691779164, "src_text": "-11", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 8675485684710025157, "ast_class": "UnaryOperator", "random": 0.011052871617885596, "src_text": "!(|done|)", "unbound_vals": [["(|done|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "55 89 e5 83 ec 10 8b 45 0c 8b 4d 08 89 4d fc 89 45 f8 c7 45 f0 00 00 00 00 c7 45 f4 00 00 00 00 8b 45 f4 3b 45 f8 0f 8d 1d 00 00 00 8b 45 f4 8b 4d fc 8b 04 81 03 45 f0 89 45 f0 8b 45 f4 83 c0 01 89 45 f4 e9 d7 ff ff ff 8b 45 f0 83 c4 10 5d c3 66 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00", "hash": -4279128348114973560, "ast_class": "Function", "random": 0.011060640337880234, "src_text": "int sum(int *a, int len) {\n  int i, s = 0;\n  for (i = 0; i < len; i++)\n    s += a[i];\n  return s;\n}", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:PUSH :EBP) (:MOV :ESP :EBP) (:SUB 16 :ESP) (:MOV (+ (:EBP) 12) :EAX) (:MOV (+ (:EBP) 8) :ECX) (:MOV :ECX (- (:EBP) 4)) (:MOV :EAX (- (:EBP) 8)) (:MOVL 0 (- (:EBP) 16)) (:MOVL 0 (- (:EBP) 12)) (:MOV (- (:EBP) 12) :EAX) (:CMP (- (:EBP) 8) :EAX) (:JGE :ADDR) (:MOV (- (:EBP) 12) :EAX) (:MOV (- (:EBP) 4) :ECX) (:MOV (:ECX) :EAX) (:ADD (- (:EBP) 16) :EAX) (:MOV :EAX (- (:EBP) 16)) (:MOV (- (:EBP) 12) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 12)) (:JMP :ADDR) (:MOV (- (:EBP) 16) :EAX) (:ADD 16 :ESP) (:POP :EBP) (:RET) (:DATA32))", "types": [-5849325953548989793, -5849325953548989792], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": 632830965231673689, "ast_class": "DeclRefExpr", "random": 0.01106303473296344, "src_text": "(|a10|)", "unbound_vals": [["(|a10|)", 80]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -3971150349752198097, "ast_class": "ImplicitCastExpr", "random": 0.011073243694498025, "src_text": "(|a27|)", "unbound_vals": [["(|a27|)", 68]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -5717590445947496022, "ast_class": "BinaryOperator", "random": 0.011080058246627056, "src_text": "(|p|) > 2", "unbound_vals": [["(|p|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -2110441900848975348, "ast_class": "BinaryOperator", "random": 0.011081904346034177, "src_text": "(|a0|) +\n                                                                                                                                     (|a1|) +\n                                                                                                                                     (|a2|) +\n                                                                                                                                     (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|)", "unbound_vals": [["(|a0|)", 59], ["(|a1|)", 59], ["(|a2|)", 59], ["(|a3|)", 59], ["(|a4|)", 59], ["(|a5|)", 59], ["(|a6|)", 59], ["(|a7|)", 59], ["(|a8|)", 59]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": null, "hash": -3972023221102163957, "ast_class": "BinaryOperator", "random": 0.011094368573008495, "src_text": "(|count|) = ((|count|) + 2000000) % 1000000", "unbound_vals": [["(|count|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 3447554126530142317, "ast_class": "ImplicitCastExpr", "random": 0.0111191828404128, "src_text": "(|a47|)", "unbound_vals": [["(|a47|)", 88]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 4664897036544166639, "ast_class": "Var", "random": 0.011129546442945837, "src_text": "numer_dig", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [-4605258830889951363], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": 7523805950529049869, "ast_class": "Var", "random": 0.01113455834253907, "src_text": "unsigned long lim", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [-4865021300304785594], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": 2593355381946606249, "ast_class": "ImplicitCastExpr", "random": 0.011138991876792903, "src_text": "(|a54|)", "unbound_vals": [["(|a54|)", 80]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 1202770960555928453, "ast_class": "ImplicitCastExpr", "random": 0.01114738788696068, "src_text": "(|a42|)", "unbound_vals": [["(|a42|)", 77]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 37373080918339478, "ast_class": "InitListExpr", "random": 0.011149652042628078, "src_text": "{4, 52, 8, 83, 97, 35, 99, 16, 7, 97, 57, 32, 16, 26, 26, 79, 33, 27, 98,\n       66}", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -6890394409143450798, "ast_class": "ImplicitCastExpr", "random": 0.0111510144853465, "src_text": "(|a12|)", "unbound_vals": [["(|a12|)", 39]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 3028128995622109024, "ast_class": "ImplicitCastExpr", "random": 0.011157068547474891, "src_text": "(|odd|)", "unbound_vals": [["(|odd|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -8991881421783254568, "ast_class": "BinaryOperator", "random": 0.011174579848297173, "src_text": "(|s|) - (|s|) * ((|n|) & 7) / (2 * (|d|))", "unbound_vals": [["(|d|)", 2], ["(|s|)", 1], ["(|n|)", 2]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "55 89 e5 83 ec 28 c7 45 fc 00 00 00 00 c7 45 f0 00 00 00 00 c7 45 f8 02 00 00 00 81 7d f8 e0 2e 00 00 0f 8f 7b 00 00 00 c7 45 f4 01 00 00 00 8b 45 f4 3b 45 f8 0f 8d 55 00 00 00 8b 45 f8 8b 4d f4 89 04 24 89 4c 24 04 e8 53 ff ff ff 83 f8 01 0f 85 27 00 00 00 8b 45 f8 6b 4d f4 03 39 c8 0f 8d 18 00 00 00 8b 45 f4 c1 e0 01 3b 45 f8 0f 8d 09 00 00 00 8b 45 f0 83 c0 01 89 45 f0 e9 00 00 00 00 8b 45 f4 83 c0 01 89 45 f4 e9 9f ff ff ff e9 00 00 00 00 8b 45 f8 83 c0 01 89 45 f8 e9 78 ff ff ff 8d 05 a0 86 04 08 8b 4d f0 89 04 24 89 4c 24 04 e8 a8 fd ff ff 89 45 ec e8 b0 fd ff ff 31 c9 89 45 e8 89 c8 83 c4 28 5d c3", "hash": -4721627053563796511, "ast_class": "CompoundStmt", "random": 0.011181263886325898, "src_text": "{\n  long i, j, n = 0;\n\n  for (i = 2; i <= M; i++)\n    for (j = 1; j < i; j++)\n      if ((|gcd|)(i, j) == 1 && i < 3 * j && 2 * j < i)\n        n++;\n\n  printf(\"\\n\\n%d\", n);\n  getchar();\n  return 0;\n}", "unbound_vals": null, "includes": ["<stdio.h>"], "unbound_funs": [["(|gcd|)", null, null, 2]], "macros": [["M", "M 12000"]], "disasm": "((:PUSH :EBP) (:MOV :ESP :EBP) (:SUB 40 :ESP) (:MOVL 0 (- (:EBP) 4)) (:MOVL 0 (- (:EBP) 16)) (:MOVL 2 (- (:EBP) 8)) (:CMPL 12000 (- (:EBP) 8)) (:JG :ADDR) (:MOVL 1 (- (:EBP) 12)) (:MOV (- (:EBP) 12) :EAX) (:CMP (- (:EBP) 8) :EAX) (:JGE :ADDR) (:MOV (- (:EBP) 8) :EAX) (:MOV (- (:EBP) 12) :ECX) (:MOV :EAX (:ESP)) (:MOV :ECX (+ (:ESP) 4)) (:CALL :GCD) (:CMP 1 :EAX) (:JNE :ADDR) (:MOV (- (:EBP) 8) :EAX) (:IMUL 3 (- (:EBP) 12) :ECX) (:CMP :ECX :EAX) (:JGE :ADDR) (:MOV (- (:EBP) 12) :EAX) (:SHL 1 :EAX) (:CMP (- (:EBP) 8) :EAX) (:JGE :ADDR) (:MOV (- (:EBP) 16) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 16)) (:JMP :ADDR) (:MOV (- (:EBP) 12) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 12)) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 8) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 8)) (:JMP :ADDR) (:LEA \"\n\n%d\" :EAX) (:MOV (- (:EBP) 16) :ECX) (:MOV \"\n\n%d\" (:ESP)) (:MOV :ECX (+ (:ESP) 4)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:MOV \"\n\n%d\" (- (:EBP) 20)) (:CALL :PRINTF) (:XOR :ECX :ECX) (:MOV \"\n\n%d\" (- (:EBP) 24)) (:MOV :ECX :EAX) (:ADD 40 :ESP) (:POP :EBP) (:RET))", "types": [-6857659793473511817], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -261639969653149919, "ast_class": "BinaryOperator", "random": 0.011184218760126097, "src_text": "(|gcd|)((|m|), (|n|)) == 1", "unbound_vals": [["(|m|)", 2], ["(|n|)", 2]], "includes": [], "unbound_funs": [["(|gcd|)", false, false, 2]], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 5776310701975556637, "ast_class": "Var", "random": 0.011196516847851612, "src_text": "int da = (|denoma|) / (|gcda|)", "unbound_vals": [["(|denoma|)", 0], ["(|gcda|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [-5849325953548989793], "is_decl": true},
{"full_stmt": false, "binary_contents": "c7 45 d8 00 00 00 00 83 7d d8 0a 0f 8d 0a 03 00 00 8b 45 d8 3b 45 f4 0f 84 eb 02 00 00 8b 45 d8 3b 45 f0 0f 84 df 02 00 00 8b 45 d8 3b 45 ec 0f 84 d3 02 00 00 8b 45 d8 3b 45 e8 0f 84 c7 02 00 00 8b 45 d8 3b 45 e4 0f 84 bb 02 00 00 8b 45 d8 3b 45 e0 0f 84 af 02 00 00 8b 45 d8 3b 45 dc 0f 84 a3 02 00 00 c7 45 d4 00 00 00 00 83 7d d4 0a 0f 8d 8d 02 00 00 8b 45 d4 3b 45 f4 0f 84 6e 02 00 00 8b 45 d4 3b 45 f0 0f 84 62 02 00 00 8b 45 d4 3b 45 ec 0f 84 56 02 00 00 8b 45 d4 3b 45 e8 0f 84 4a 02 00 00 8b 45 d4 3b 45 e4 0f 84 3e 02 00 00 8b 45 d4 3b 45 e0 0f 84 32 02 00 00 8b 45 d4 3b 45 dc 0f 84 26 02 00 00 8b 45 d4 3b 45 d8 0f 84 1a 02 00 00 c7 45 d0 00 00 00 00 83 7d d0 0a 0f 8d 04 02 00 00 8b 45 d0 3b 45 f4 0f 84 e5 01 00 00 8b 45 d0 3b 45 f0 0f 84 d9 01 00 00 8b 45 d0 3b 45 ec 0f 84 cd 01 00 00 8b 45 d0 3b 45 e8 0f 84 c1 01 00 00 8b 45 d0 3b 45 e4 0f 84 b5 01 00 00 8b 45 d0 3b 45 e0 0f 84 a9 01 00 00 8b 45 d0 3b 45 dc 0f 84 9d 01 00 00 8b 45 d0 3b 45 d8 0f 84 91 01 00 00 8b 45 d0 3b 45 d4 0f 84 85 01 00 00 b8 02 00 00 00 6b 4d f0 64 6b 55 ec 0a 01 d1 03 4d e8 89 45 c4 89 c8 99 8b 4d c4 f7 f9 83 fa 00 0f 85 5a 01 00 00 b8 03 00 00 00 6b 4d ec 64 6b 55 e8 0a 01 d1 03 4d e4 89 45 c0 89 c8 99 8b 4d c0 f7 f9 83 fa 00 0f 85 34 01 00 00 b8 05 00 00 00 6b 4d e8 64 6b 55 e4 0a 01 d1 03 4d e0 89 45 bc 89 c8 99 8b 4d bc f7 f9 83 fa 00 0f 85 0e 01 00 00 b8 07 00 00 00 6b 4d e4 64 6b 55 e0 0a 01 d1 03 4d dc 89 45 b8 89 c8 99 8b 4d b8 f7 f9 83 fa 00 0f 85 e8 00 00 00 b8 0b 00 00 00 6b 4d e0 64 6b 55 dc 0a 01 d1 03 4d d8 89 45 b4 89 c8 99 8b 4d b4 f7 f9 83 fa 00 0f 85 c2 00 00 00 b8 0d 00 00 00 6b 4d dc 64 6b 55 d8 0a 01 d1 03 4d d4 89 45 b0 89 c8 99 8b 4d b0 f7 f9 83 fa 00 0f 85 9c 00 00 00 b8 11 00 00 00 6b 4d d8 64 6b 55 d4 0a 01 d1 03 4d d0 89 45 ac 89 c8 99 8b 4d ac f7 f9 83 fa 00 0f 85 76 00 00 00 8b 45 f4 69 c0 00 ca 9a 3b 8b 4d f0 69 c9 00 e1 f5 05 01 c8 8b 4d ec 69 c9 80 96 98 00 01 c8 8b 4d e8 69 c9 40 42 0f 00 01 c8 8b 4d e4 69 c9 a0 86 01 00 01 c8 8b 4d e0 69 c9 10 27 00 00 01 c8 8b 4d dc 69 c9 e8 03 00 00 01 c8 8b 4d d8 6b c9 64 01 c8 8b 4d d4 8d 0c 89 8d 04 48 8b 4d d0 01 c8 89 c1 c1 f9 1f 8b 55 c8 8b 75 cc 01 c2 11 ce 89 55 c8 89 75 cc e9 00 00 00 00 e9 00 00 00 00 8b 45 d0 83 c0 01 89 45 d0 e9 f2 fd ff ff e9 00 00 00 00 e9 00 00 00 00 8b 45 d4 83 c0 01 89 45 d4 e9 69 fd ff ff e9 00 00 00 00 e9 00 00 00 00 8b 45 d8 83 c0 01 89 45 d8 e9 ec fc ff ff e9 00 00 00 00 e9 00 00 00 00 8b 45 dc 83 c0 01 89 45 dc e9 7b fc ff ff e9 00 00 00 00 e9 00 00 00 00 8b 45 e0 83 c0 01 89 45 e0 e9 16 fc ff ff e9 00 00 00 00 e9 00 00 00 00 8b 45 e4 83 c0 01 89 45 e4 e9 bd fb ff ff e9 00 00 00 00 e9 00 00 00 00 8b 45 e8 83 c0 01 89 45 e8 e9 70 fb ff ff e9 00 00 00 00 e9 00 00 00 00 8b 45 ec 83 c0 01 89 45 ec e9 2f fb ff ff e9 00 00 00 00 e9 00 00 00 00 8b 45 f0 83 c0 01 89 45 f0 e9 fa fa ff ff e9 00 00 00 00", "hash": 4525386857999573452, "ast_class": "ForStmt", "random": 0.011201326742465434, "src_text": "for ((|a8|) = 0; (|a8|) < 10; (|a8|)++)\n\n                              if ((|a8|) != (|a1|) && (|a8|) != (|a2|) && (|a8|) != (|a3|) &&\n                                  (|a8|) != (|a4|) && (|a8|) != (|a5|) && (|a8|) != (|a6|) && (|a8|) != (|a7|))\n                                for ((|a9|) = 0; (|a9|) < 10; (|a9|)++)\n\n                                  if ((|a9|) != (|a1|) && (|a9|) != (|a2|) && (|a9|) != (|a3|) &&\n                                      (|a9|) != (|a4|) && (|a9|) != (|a5|) && (|a9|) != (|a6|) &&\n                                      (|a9|) != (|a7|) && (|a9|) != (|a8|))\n                                    for ((|a10|) = 0; (|a10|) < 10; (|a10|)++)\n\n                                      if ((|a10|) != (|a1|) && (|a10|) != (|a2|) && (|a10|) != (|a3|) &&\n                                          (|a10|) != (|a4|) && (|a10|) != (|a5|) && (|a10|) != (|a6|) &&\n                                          (|a10|) != (|a7|) && (|a10|) != (|a8|) && (|a10|) != (|a9|))\n\n                                        if (((|a2|) * 100 + (|a3|) * 10 + (|a4|)) % 2 ==\n                                                0 &&\n                                            ((|a3|) * 100 + (|a4|) * 10 + (|a5|)) % 3 ==\n                                                0 &&\n                                            ((|a4|) * 100 + (|a5|) * 10 + (|a6|)) % 5 ==\n                                                0 &&\n                                            ((|a5|) * 100 + (|a6|) * 10 + (|a7|)) % 7 ==\n                                                0 &&\n                                            ((|a6|) * 100 + (|a7|) * 10 + (|a8|)) % 11 ==\n                                                0 &&\n                                            ((|a7|) * 100 + (|a8|) * 10 + (|a9|)) % 13 ==\n                                                0 &&\n                                            ((|a8|) * 100 + (|a9|) * 10 + (|a10|)) % 17 ==\n                                                0)\n                                          (|s|) += (|a1|) * 1000000000 +\n                                               (|a2|) * 100000000 + (|a3|) * 10000000 +\n                                               (|a4|) * 1000000 + (|a5|) * 100000 +\n                                               (|a6|) * 10000 + (|a7|) * 1000 +\n                                               (|a8|) * 100 + (|a9|) * 10 + (|a10|)", "unbound_vals": [["(|s|)", 0], ["(|a1|)", 0], ["(|a2|)", 0], ["(|a3|)", 0], ["(|a4|)", 0], ["(|a5|)", 0], ["(|a6|)", 0], ["(|a7|)", 0], ["(|a8|)", 0], ["(|a9|)", 0], ["(|a10|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOVL 0 (- (:EBP) 40)) (:CMPL 10 (- (:EBP) 40)) (:JGE :ADDR) (:MOV (- (:EBP) 40) :EAX) (:CMP (- (:EBP) 12) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 40) :EAX) (:CMP (- (:EBP) 16) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 40) :EAX) (:CMP (- (:EBP) 20) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 40) :EAX) (:CMP (- (:EBP) 24) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 40) :EAX) (:CMP (- (:EBP) 28) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 40) :EAX) (:CMP (- (:EBP) 32) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 40) :EAX) (:CMP (- (:EBP) 36) :EAX) (:JE :ADDR) (:MOVL 0 (- (:EBP) 44)) (:CMPL 10 (- (:EBP) 44)) (:JGE :ADDR) (:MOV (- (:EBP) 44) :EAX) (:CMP (- (:EBP) 12) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 44) :EAX) (:CMP (- (:EBP) 16) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 44) :EAX) (:CMP (- (:EBP) 20) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 44) :EAX) (:CMP (- (:EBP) 24) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 44) :EAX) (:CMP (- (:EBP) 28) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 44) :EAX) (:CMP (- (:EBP) 32) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 44) :EAX) (:CMP (- (:EBP) 36) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 44) :EAX) (:CMP (- (:EBP) 40) :EAX) (:JE :ADDR) (:MOVL 0 (- (:EBP) 48)) (:CMPL 10 (- (:EBP) 48)) (:JGE :ADDR) (:MOV (- (:EBP) 48) :EAX) (:CMP (- (:EBP) 12) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 48) :EAX) (:CMP (- (:EBP) 16) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 48) :EAX) (:CMP (- (:EBP) 20) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 48) :EAX) (:CMP (- (:EBP) 24) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 48) :EAX) (:CMP (- (:EBP) 28) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 48) :EAX) (:CMP (- (:EBP) 32) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 48) :EAX) (:CMP (- (:EBP) 36) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 48) :EAX) (:CMP (- (:EBP) 40) :EAX) (:JE :ADDR) (:MOV (- (:EBP) 48) :EAX) (:CMP (- (:EBP) 44) :EAX) (:JE :ADDR) (:MOV 2 :EAX) (:IMUL 100 (- (:EBP) 16) :ECX) (:IMUL 10 (- (:EBP) 20) :EDX) (:ADD :EDX :ECX) (:ADD (- (:EBP) 24) :ECX) (:MOV 2 (- (:EBP) 60)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 60) :ECX) (:IDIV :ECX) (:CMP 0 :EDX) (:JNE :ADDR) (:MOV 3 :EAX) (:IMUL 100 (- (:EBP) 20) :ECX) (:IMUL 10 (- (:EBP) 24) :EDX) (:ADD :EDX :ECX) (:ADD (- (:EBP) 28) :ECX) (:MOV 3 (- (:EBP) 64)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 64) :ECX) (:IDIV :ECX) (:CMP 0 :EDX) (:JNE :ADDR) (:MOV 5 :EAX) (:IMUL 100 (- (:EBP) 24) :ECX) (:IMUL 10 (- (:EBP) 28) :EDX) (:ADD :EDX :ECX) (:ADD (- (:EBP) 32) :ECX) (:MOV 5 (- (:EBP) 68)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 68) :ECX) (:IDIV :ECX) (:CMP 0 :EDX) (:JNE :ADDR) (:MOV 7 :EAX) (:IMUL 100 (- (:EBP) 28) :ECX) (:IMUL 10 (- (:EBP) 32) :EDX) (:ADD :EDX :ECX) (:ADD (- (:EBP) 36) :ECX) (:MOV 7 (- (:EBP) 72)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 72) :ECX) (:IDIV :ECX) (:CMP 0 :EDX) (:JNE :ADDR) (:MOV 11 :EAX) (:IMUL 100 (- (:EBP) 32) :ECX) (:IMUL 10 (- (:EBP) 36) :EDX) (:ADD :EDX :ECX) (:ADD (- (:EBP) 40) :ECX) (:MOV 11 (- (:EBP) 76)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 76) :ECX) (:IDIV :ECX) (:CMP 0 :EDX) (:JNE :ADDR) (:MOV 13 :EAX) (:IMUL 100 (- (:EBP) 36) :ECX) (:IMUL 10 (- (:EBP) 40) :EDX) (:ADD :EDX :ECX) (:ADD (- (:EBP) 44) :ECX) (:MOV 13 (- (:EBP) 80)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 80) :ECX) (:IDIV :ECX) (:CMP 0 :EDX) (:JNE :ADDR) (:MOV 17 :EAX) (:IMUL 100 (- (:EBP) 40) :ECX) (:IMUL 10 (- (:EBP) 44) :EDX) (:ADD :EDX :ECX) (:ADD (- (:EBP) 48) :ECX) (:MOV 17 (- (:EBP) 84)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 84) :ECX) (:IDIV :ECX) (:CMP 0 :EDX) (:JNE :ADDR) (:MOV (- (:EBP) 12) :EAX) (:IMUL 1000000000 :EAX :EAX) (:MOV (- (:EBP) 16) :ECX) (:IMUL 100000000 :ECX :ECX) (:ADD :ECX :EAX) (:MOV (- (:EBP) 20) :ECX) (:IMUL 10000000 :ECX :ECX) (:ADD :ECX :EAX) (:MOV (- (:EBP) 24) :ECX) (:IMUL 1000000 :ECX :ECX) (:ADD :ECX :EAX) (:MOV (- (:EBP) 28) :ECX) (:IMUL 100000 :ECX :ECX) (:ADD :ECX :EAX) (:MOV (- (:EBP) 32) :ECX) (:IMUL 10000 :ECX :ECX) (:ADD :ECX :EAX) (:MOV (- (:EBP) 36) :ECX) (:IMUL 1000 :ECX :ECX) (:ADD :ECX :EAX) (:MOV (- (:EBP) 40) :ECX) (:IMUL 100 :ECX :ECX) (:ADD :ECX :EAX) (:MOV (- (:EBP) 44) :ECX) (:LEA (:ECX) :ECX) (:LEA (:EAX) :EAX) (:MOV (- (:EBP) 48) :ECX) (:ADD :ECX :EAX) (:MOV :EAX :ECX) (:SAR 31 :ECX) (:MOV (- (:EBP) 56) :EDX) (:MOV (- (:EBP) 52) :ESI) (:ADD :EAX :EDX) (:ADC :ECX :ESI) (:MOV :EDX (- (:EBP) 56)) (:MOV :ESI (- (:EBP) 52)) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 48) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 48)) (:JMP :ADDR) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 44) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 44)) (:JMP :ADDR) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 40) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 40)) (:JMP :ADDR) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 36) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 36)) (:JMP :ADDR) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 32) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 32)) (:JMP :ADDR) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 28) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 28)) (:JMP :ADDR) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 24) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 24)) (:JMP :ADDR) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 20) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 20)) (:JMP :ADDR) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 16) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 16)) (:JMP :ADDR) (:JMP :ADDR))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -706538407887273262, "ast_class": "DeclRefExpr", "random": 0.011252542289379774, "src_text": "(|a45|)", "unbound_vals": [["(|a45|)", 91]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 8406121347945171107, "ast_class": "DeclRefExpr", "random": 0.011264707202593205, "src_text": "(|a21|)", "unbound_vals": [["(|a21|)", 94]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -7056224454585306721, "ast_class": "ImplicitCastExpr", "random": 0.011284340999578868, "src_text": "(|second|).numerator", "unbound_vals": [["(|second|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "c7 85 1c cb fc ff 00 00 00 00", "hash": 7895600445583507764, "ast_class": "DeclStmt", "random": 0.0112866716188611, "src_text": "int ne = 0", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOVL 0 (- (:EBP) 210148)))", "types": [-5849325953548989793], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 4736378871611163820, "ast_class": "BinaryOperator", "random": 0.01131228750461788, "src_text": "sizeof(\"forty\") - 1", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 8312421550361128210, "ast_class": "BinaryOperator", "random": 0.011352732236076246, "src_text": "(|y|) <= (|n|)", "unbound_vals": [["(|y|)", 3], ["(|n|)", 4]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": "8b 45 e8 8b 8c 85 34 f0 ff ff 83 c1 01 89 8c 85 34 f0 ff ff", "hash": 1964271224415814593, "ast_class": "UnaryOperator", "random": 0.01135390227314137, "src_text": "++(|solutions|)[(|p|)]", "unbound_vals": [["(|p|)", 4], ["(|solutions|)", 4]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 24) :EAX) (:MOV (- (:EBP) 4044) :ECX) (:ADD 1 :ECX) (:MOV :ECX (- (:EBP) 4044)))", "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "89 04 24 c7 44 24 04 00 00 00 00 c7 44 24 08 04 09 3d 00 89 55 f4 89 4d f0 e8 bf fe ff ff", "hash": 6204386363574125661, "ast_class": "CallExpr", "random": 0.011363784002278776, "src_text": "memset((|sumDivisorsTab|), 0, 1000001 * sizeof(int))", "unbound_vals": [["(|sumDivisorsTab|)", 2]], "includes": ["<string.h>"], "unbound_funs": null, "macros": null, "disasm": "((:MOV 134520880 (:ESP)) (:MOVL 0 (+ (:ESP) 4)) (:MOVL 4000004 (+ (:ESP) 8)) (:MOV 4000004 (- (:EBP) 12)) (:MOV :ECX (- (:EBP) 16)) (:CALL :__LIBC_START_MAIN))", "types": [-5849325953548989793], "is_decl": null},
{"full_stmt": true, "binary_contents": "8b 4d e8 89 04 24 89 4c 24 04 e8 9e fd ff ff 31 c9", "hash": 3082422012235056365, "ast_class": "CallExpr", "random": 0.01137923508143579, "src_text": "printf(\"There are %d winners\", (|count|))", "unbound_vals": [["(|count|)", 0]], "includes": ["<stdio.h>"], "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 24) :ECX) (:MOV \"There are %d winners\" (:ESP)) (:MOV :ECX (+ (:ESP) 4)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:XOR :ECX :ECX))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 3051312628087999725, "ast_class": "CallExpr", "random": 0.011395021129286365, "src_text": "(|isPalen|)((|ibin|), (|len|))", "unbound_vals": [["(|len|)", 1], ["(|ibin|)", 1]], "includes": null, "unbound_funs": [["(|isPalen|)", null, null, 2]], "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 3761305920967238722, "ast_class": "BinaryOperator", "random": 0.011406480198934865, "src_text": "(|k|) = 0", "unbound_vals": [["(|k|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 1595527927011640980, "ast_class": "ImplicitCastExpr", "random": 0.011416547612500216, "src_text": "(|k|)", "unbound_vals": [["(|k|)", 6]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -5122937703732007771, "ast_class": "BinaryOperator", "random": 0.011432456458750795, "src_text": "(|a0|) +\n                                                                                                                                                                                                    (|a1|) +\n                                                                                                                                                                                                    (|a2|) +\n                                                                                                                                                                                                    (|a3|) +\n                                                                                                                                                                                                    (|a4|) + (|a5|)", "unbound_vals": [["(|a0|)", 90], ["(|a1|)", 90], ["(|a2|)", 90], ["(|a3|)", 90], ["(|a4|)", 90], ["(|a5|)", 90]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "55 89 e5 56 83 ec 44 8b 45 0c 8b 4d 08 89 4d f4 89 45 f0 8b 45 f4 89 04 24 e8 e2 00 00 00 83 f8 00 0f 84 c5 00 00 00 83 7d f4 0a 0f 8d 0c 00 00 00 c7 45 f8 01 00 00 00 e9 b6 00 00 00 83 7d f0 00 0f 84 63 00 00 00 f2 0f 2a 45 f4 f2 0f 11 04 24 e8 aa fd ff ff dd 5d d8 f2 0f 10 45 d8 f2 0f 10 0d 10 88 04 08 f2 0f 2c c0 89 45 ec 8b 45 f4 f2 0f 2a 45 ec f2 0f 11 0c 24 f2 0f 11 44 24 08 89 45 d4 e8 68 fd ff ff dd 5d e0 f2 0f 10 45 e0 f2 0f 2c c0 8b 4d d4 89 45 d0 89 c8 99 8b 75 d0 f7 fe 89 55 e8 e9 16 00 00 00 b8 0a 00 00 00 8b 4d f4 89 45 cc 89 c8 99 8b 4d cc f7 f9 89 45 e8 8b 45 e8 8b 4d f0 89 04 24 89 4c 24 04 e8 2e ff ff ff 83 f8 00 0f 84 0c 00 00 00 c7 45 f8 01 00 00 00 e9 0c 00 00 00 e9 00 00 00 00 c7 45 f8 00 00 00 00 8b 45 f8 83 c4 44 5e 5d c3 0f 1f 40 00", "hash": -4138588528586317293, "ast_class": "CompoundStmt", "random": 0.011434096011372685, "src_text": "{\n  int size, next;\n\n  if ((|isPrime|)((|n|))) {\n    if ((|n|) < 10)\n      return 1;\n\n    if ((|rtl|)) {\n      size = (int)(|log10|)((double)(|n|));\n      next = (|n|) % (int)(|pow|)(10, size);\n    } else {\n      next = (|n|) / 10;\n    }\n\n    if ((|isTruncatablePrime|)(next, (|rtl|)))\n      return 1;\n  }\n\n  return 0;\n}", "unbound_vals": [["(|n|)", 1], ["(|rtl|)", 1]], "includes": null, "unbound_funs": [["(|pow|)", null, null, 2], ["(|log10|)", null, null, 1], ["(|isTruncatablePrime|)", null, null, 2], ["(|isPrime|)", null, null, 0]], "macros": null, "disasm": "((:PUSH :EBP) (:MOV :ESP :EBP) (:PUSH :ESI) (:SUB 68 :ESP) (:MOV (+ (:EBP) 12) :EAX) (:MOV (+ (:EBP) 8) :ECX) (:MOV :ECX (- (:EBP) 12)) (:MOV :EAX (- (:EBP) 16)) (:MOV (- (:EBP) 12) :EAX) (:MOV :EAX (:ESP)) (:CALL :ISPRIME) (:CMP 0 :EAX) (:JE :ADDR) (:CMPL 10 (- (:EBP) 12)) (:JGE :ADDR) (:MOVL 1 (- (:EBP) 8)) (:JMP :ADDR) (:CMPL 0 (- (:EBP) 16)) (:JE :ADDR) (:CVTSI2SDL (- (:EBP) 12) :XMM0) (:MOVSD :XMM0 (:ESP)) (:CALL :POW) (:FSTPL (- (:EBP) 40)) (:MOVSD (- (:EBP) 40) :XMM0) (:MOVSD 10.0D0 :XMM1) (:CVTTSD2SI :XMM0 :EAX) (:MOV :EAX (- (:EBP) 20)) (:MOV (- (:EBP) 12) :EAX) (:CVTSI2SDL (- (:EBP) 20) :XMM0) (:MOVSD 10.0D0 (:ESP)) (:MOVSD :XMM0 (+ (:ESP) 8)) (:MOV :EAX (- (:EBP) 44)) (:CALL :PRINTF) (:FSTPL (- (:EBP) 32)) (:MOVSD (- (:EBP) 32) :XMM0) (:CVTTSD2SI :XMM0 :EAX) (:MOV (- (:EBP) 44) :ECX) (:MOV :EAX (- (:EBP) 48)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 48) :ESI) (:IDIV :ESI) (:MOV :EDX (- (:EBP) 24)) (:JMP :ADDR) (:MOV 10 :EAX) (:MOV (- (:EBP) 12) :ECX) (:MOV 10 (- (:EBP) 52)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 52) :ECX) (:IDIV :ECX) (:MOV :EAX (- (:EBP) 24)) (:MOV (- (:EBP) 24) :EAX) (:MOV (- (:EBP) 16) :ECX) (:MOV :EAX (:ESP)) (:MOV :ECX (+ (:ESP) 4)) (:CALL :ISTRUNCATABLEPRIME) (:CMP 0 :EAX) (:JE :ADDR) (:MOVL 1 (- (:EBP) 8)) (:JMP :ADDR) (:JMP :ADDR) (:MOVL 0 (- (:EBP) 8)) (:MOV (- (:EBP) 8) :EAX) (:ADD 68 :ESP) (:POP :ESI) (:POP :EBP) (:RET) (:NOPL (+ (:EAX) 0)))", "types": [-5849325953548989793, -4605258830889951363], "is_decl": null},
{"full_stmt": true, "binary_contents": "c7 45 f4 00 00 00 00 c7 45 f0 01 00 00 00", "hash": -7767682725939165338, "ast_class": "DeclStmt", "random": 0.011464218395601411, "src_text": "int primenum = 0, allnum = 1", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOVL 0 (- (:EBP) 12)) (:MOVL 1 (- (:EBP) 16)))", "types": [-5849325953548989793], "is_decl": null},
{"full_stmt": true, "binary_contents": "8b 45 e8 8b 55 ec 83 c4 2c 5e 5d c3 66 66 66 66 66 2e 0f 1f 84 00 00 00 00 00", "hash": 238685588247635170, "ast_class": "ReturnStmt", "random": 0.011469411557892828, "src_text": "return (|count|)", "unbound_vals": [["(|count|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 24) :EAX) (:MOV (- (:EBP) 20) :EDX) (:ADD 44 :ESP) (:POP :ESI) (:POP :EBP) (:RET) (:DATA32))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -4267291231243636062, "ast_class": "BinaryOperator", "random": 0.011471336565605172, "src_text": "(|a0|) +\n                                                                                                                                                                                                               (|a1|) +\n                                                                                                                                                                                                               (|a2|) + (|a3|) + (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) +\n                                                                                                                                                                                                               (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) +\n                                                                                                                                                                                                               (|a39|) +\n                                                                                                                                                                                                               (|a40|) +\n                                                                                                                                                                                                               (|a41|) + (|a42|) + (|a43|) + (|a44|) + (|a45|) +\n                                                                                                                                                                                                               (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|)", "unbound_vals": [["(|a0|)", 95], ["(|a1|)", 95], ["(|a2|)", 95], ["(|a3|)", 95], ["(|a4|)", 95], ["(|a5|)", 95], ["(|a6|)", 95], ["(|a7|)", 95], ["(|a8|)", 95], ["(|a9|)", 95], ["(|a10|)", 95], ["(|a11|)", 95], ["(|a12|)", 95], ["(|a13|)", 95], ["(|a14|)", 95], ["(|a15|)", 95], ["(|a16|)", 95], ["(|a17|)", 95], ["(|a18|)", 95], ["(|a19|)", 95], ["(|a20|)", 95], ["(|a21|)", 95], ["(|a22|)", 95], ["(|a23|)", 95], ["(|a24|)", 95], ["(|a25|)", 95], ["(|a26|)", 95], ["(|a27|)", 95], ["(|a28|)", 95], ["(|a29|)", 95], ["(|a30|)", 95], ["(|a31|)", 95], ["(|a32|)", 95], ["(|a33|)", 95], ["(|a34|)", 95], ["(|a35|)", 95], ["(|a36|)", 95], ["(|a37|)", 95], ["(|a38|)", 95], ["(|a39|)", 95], ["(|a40|)", 95], ["(|a41|)", 95], ["(|a42|)", 95], ["(|a43|)", 95], ["(|a44|)", 95], ["(|a45|)", 95], ["(|a46|)", 95], ["(|a47|)", 95], ["(|a48|)", 95], ["(|a49|)", 95], ["(|a50|)", 95], ["(|a51|)", 95], ["(|a52|)", 95]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -606864772779115401, "ast_class": "Var", "random": 0.011473993814193562, "src_text": "uint p = (|lastP|)", "unbound_vals": [["(|lastP|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [-4865021300304785594], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": -3012932653098100016, "ast_class": "Var", "random": 0.011483485155643014, "src_text": "long f[10]", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [1324916278833965509], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": 1422725381244385671, "ast_class": "DeclRefExpr", "random": 0.011486870838913088, "src_text": "(|a37|)", "unbound_vals": [["(|a37|)", 95]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "81 7d f0 88 13 00 00 0f 8f 36 00 00 00 81 7d ec 88 13 00 00 0f 8f 29 00 00 00 8d 05 30 a0 04 08 8b 4d e8 8b 55 f0 69 75 ec 24 4e 00 00 89 c7 01 f7 89 0c 97 8b 55 ec 69 75 f0 24 4e 00 00 01 f0 89 0c 90", "hash": -7900267735428489278, "ast_class": "IfStmt", "random": 0.011487605856617011, "src_text": "if ((|a|) <= (|size|) && (|b|) <= (|size|)) {\n    (|ListGCD|)[(|a|)][(|b|)] = (|ListGCD|)[(|b|)][(|a|)] = (|t|);\n  }", "unbound_vals": [["(|a|)", 1], ["(|b|)", 1], ["(|size|)", 2], ["(|ListGCD|)", 2], ["(|t|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:CMPL 5000 (- (:EBP) 16)) (:JG :ADDR) (:CMPL 5000 (- (:EBP) 20)) (:JG :ADDR) (:LEA :ADDR :EAX) (:MOV (- (:EBP) 24) :ECX) (:MOV (- (:EBP) 16) :EDX) (:IMUL 20004 (- (:EBP) 20) :ESI) (:MOV 134520880 :EDI) (:ADD :ESI :EDI) (:MOV :ECX (:EDI)) (:MOV (- (:EBP) 20) :EDX) (:IMUL 20004 (- (:EBP) 16) :ESI) (:ADD :ESI :EAX) (:MOV :ECX (:EAX)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -7758279899433780466, "ast_class": "UnaryOperator", "random": 0.01151470071970051, "src_text": "*(|num|)", "unbound_vals": [["(|num|)", 2]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": null, "hash": -3528931847177662054, "ast_class": "Function", "random": 0.011515310833819847, "src_text": "int\n    main() {\n  int sum = 0;\n  for (int a = 3; a <= 1000; a++) {\n    if (a % 2)\n      sum += a * a - a;\n    else\n      sum += a * a - 2 * a;\n  }\n  printf(\"%d\\n\", sum);\n}", "unbound_vals": [], "includes": ["<stdio.h>"], "unbound_funs": [], "macros": [], "disasm": null, "types": [-5849325953548989793], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": -1256565553228100118, "ast_class": "BinaryOperator", "random": 0.011537135084231709, "src_text": "((|penta|) = (|pent|)((|j|))) <= (|n|)", "unbound_vals": [["(|n|)", 1], ["(|penta|)", 1], ["(|j|)", 1]], "includes": null, "unbound_funs": [["(|pent|)", null, null, 1]], "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 9052922821966312216, "ast_class": "ImplicitCastExpr", "random": 0.011541650182346652, "src_text": "283", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 1422725381244385635, "ast_class": "DeclRefExpr", "random": 0.011555965495097409, "src_text": "(|a37|)", "unbound_vals": [["(|a37|)", 59]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": null, "hash": -1732012671286825773, "ast_class": "DeclStmt", "random": 0.011559611337755182, "src_text": "int hits, misses, counter", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [-5849325953548989793], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -5918564733732531263, "ast_class": "BinaryOperator", "random": 0.011569208169678102, "src_text": "(|a|) * ((|x|) - (|a|))", "unbound_vals": [["(|x|)", 2], ["(|a|)", 3]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -6272977006874727309, "ast_class": "Var", "random": 0.011589597546124653, "src_text": "struct hash_list first = {NULL, 0, {0}, 0LL}", "unbound_vals": [], "includes": ["<malloc.h>"], "unbound_funs": [], "macros": [], "disasm": null, "types": [-6534947291467637091, -1284459838204199513], "is_decl": true},
{"full_stmt": true, "binary_contents": "2d 01 00 c8 4e 0f 92 c3 81 ea 67 6d c1 1b 0f 92 c7 88 7d b3 89 45 ac 89 55 a8 88 5d a7 0f 84 06 00 00 00 8a 45 b3 88 45 a7 8a 45 a7 84 c0 0f 85 18 00 00 00 e9 00 00 00 00 c7 45 ec 00 00 00 00 c7 45 e8 00 00 00 00 e9 94 01 00 00", "hash": 332969477056778540, "ast_class": "IfStmt", "random": 0.011593869804283896, "src_text": "if ((|nums|) > 2000000000000000000)\n    return 0", "unbound_vals": [["(|nums|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:SUB 1321730049 :EAX) (:SETB :BL) (:SUB 465661287 :EDX) (:SETB :B) (:MOV :B (- (:EBP) 77)) (:MOV :EAX (- (:EBP) 84)) (:MOV :EDX (- (:EBP) 88)) (:MOV :BL (- (:EBP) 89)) (:JE :ADDR) (:MOV (- (:EBP) 77) :AL) (:MOV :AL (- (:EBP) 89)) (:MOV (- (:EBP) 89) :AL) (:TEST :AL :AL) (:JNE :ADDR) (:JMP :ADDR) (:MOVL 0 (- (:EBP) 20)) (:MOVL 0 (- (:EBP) 24)) (:JMP :ADDR))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -8618540435494473976, "ast_class": "DeclRefExpr", "random": 0.011613564400622, "src_text": "(|a2|)", "unbound_vals": [["(|a2|)", 49]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "e9 af ff ff ff b8 0a 00 00 00", "hash": 4041228871051041579, "ast_class": "GotoStmt", "random": 0.011642445165746085, "src_text": "goto A", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:JMP :ADDR) (:MOV 10 :EAX))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -4580927942133453922, "ast_class": "IntegerLiteral", "random": 0.011650470958848524, "src_text": "770", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 4788025996130151052, "ast_class": "ImplicitCastExpr", "random": 0.011652951309764403, "src_text": "-77", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -3248578271543054195, "ast_class": "BinaryOperator", "random": 0.011657623515179294, "src_text": "(|j|) = (|j|) + (|i|)", "unbound_vals": [["(|i|)", 3], ["(|j|)", 3]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": null, "hash": 5023752721161269588, "ast_class": "IfStmt", "random": 0.011658707879114716, "src_text": "if ((|a45|) <\n                                                                                                    (|a46|))\n                                                                                                  break", "unbound_vals": [["(|a45|)", 47], ["(|a46|)", 47]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -91390265350470865, "ast_class": "DeclRefExpr", "random": 0.01167825604841588, "src_text": "(|a50|)", "unbound_vals": [["(|a50|)", 58]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -4177526908581309270, "ast_class": "ImplicitCastExpr", "random": 0.01169284444542018, "src_text": "98137", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 4638945071676695058, "ast_class": "DeclRefExpr", "random": 0.011695997883952036, "src_text": "(|memset|)", "unbound_vals": null, "includes": null, "unbound_funs": [["(|memset|)", null, null, 3]], "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": "c7 85 34 a2 ff ff 00 00 00 00 81 bd 34 a2 ff ff 70 17 00 00 0f 8d 93 02 00 00 8b 85 34 a2 ff ff 8b 84 85 38 a2 ff ff 8b 8d 34 a2 ff ff 8b 8c 8d 44 a2 ff ff 8b 95 34 a2 ff ff 2b 8c 95 4c a2 ff ff 0f af c1 8b 8d 34 a2 ff ff 8b 8c 8d 40 a2 ff ff 8b 95 34 a2 ff ff 8b 94 95 4c a2 ff ff 8b b5 34 a2 ff ff 2b 94 b5 3c a2 ff ff 0f af ca 01 c8 8b 8d 34 a2 ff ff 8b 8c 8d 48 a2 ff ff 8b 95 34 a2 ff ff 8b 94 95 3c a2 ff ff 8b b5 34 a2 ff ff 2b 94 b5 44 a2 ff ff 0f af ca 01 c8 89 85 2c a2 ff ff 83 bd 2c a2 ff ff 00 0f 8f 0d 00 00 00 6b 85 2c a2 ff ff ff 89 85 2c a2 ff ff 8d 05 90 e6 04 08 8b 8d 2c a2 ff ff 89 04 24 89 4c 24 04 e8 96 fd ff ff 8b 8d 34 a2 ff ff 8b 8c 8d 38 a2 ff ff 8b 95 34 a2 ff ff 0f af 8c 95 44 a2 ff ff 8b 95 34 a2 ff ff 8b 94 95 40 a2 ff ff 8b b5 34 a2 ff ff 0f af 94 b5 3c a2 ff ff 29 d1 89 8d 28 a2 ff ff 83 bd 28 a2 ff ff 00 89 85 20 a2 ff ff 0f 8f 0d 00 00 00 6b 85 28 a2 ff ff ff 89 85 28 a2 ff ff 8d 05 95 e6 04 08 8b 8d 28 a2 ff ff 89 04 24 89 4c 24 04 e8 20 fd ff ff 8b 8d 28 a2 ff ff 8b 95 2c a2 ff ff 29 ca 89 95 2c a2 ff ff 8b 8d 34 a2 ff ff 8b 8c 8d 40 a2 ff ff 8b 95 34 a2 ff ff 0f af 8c 95 4c a2 ff ff 8b 95 34 a2 ff ff 8b 94 95 48 a2 ff ff 8b b5 34 a2 ff ff 0f af 94 b5 44 a2 ff ff 29 d1 89 8d 28 a2 ff ff 83 bd 28 a2 ff ff 00 89 85 1c a2 ff ff 0f 8f 0d 00 00 00 6b 85 28 a2 ff ff ff 89 85 28 a2 ff ff 8d 05 95 e6 04 08 8b 8d 28 a2 ff ff 89 04 24 89 4c 24 04 e8 96 fc ff ff 8b 8d 28 a2 ff ff 8b 95 2c a2 ff ff 29 ca 89 95 2c a2 ff ff 8b 8d 34 a2 ff ff 8b 8c 8d 48 a2 ff ff 8b 95 34 a2 ff ff 0f af 8c 95 3c a2 ff ff 8b 95 34 a2 ff ff 8b 94 95 38 a2 ff ff 8b b5 34 a2 ff ff 0f af 94 b5 4c a2 ff ff 29 d1 89 8d 28 a2 ff ff 83 bd 28 a2 ff ff 00 89 85 18 a2 ff ff 0f 8f 0d 00 00 00 6b 85 28 a2 ff ff ff 89 85 28 a2 ff ff 8d 05 95 e6 04 08 8b 8d 28 a2 ff ff 89 04 24 89 4c 24 04 e8 0c fc ff ff 8b 8d 28 a2 ff ff 8b 95 2c a2 ff ff 29 ca 89 95 2c a2 ff ff 83 bd 2c a2 ff ff 00 89 85 14 a2 ff ff 0f 85 0f 00 00 00 8b 85 30 a2 ff ff 83 c0 01 89 85 30 a2 ff ff e9 00 00 00 00 8b 85 34 a2 ff ff 83 c0 06 89 85 34 a2 ff ff e9 5d fd ff ff 8d 05 9b e6 04 08", "hash": -6565116938394112672, "ast_class": "ForStmt", "random": 0.01170040482258805, "src_text": "for ((|i|) = 0; (|i|) < 6000; (|i|) += 6) {\n    //    printf(\"%ld \", p[i]);\n    (|ta|) = (|p|)[(|i|)] * ((|p|)[(|i|) + 3] - (|p|)[(|i|) + 5]) + (|p|)[(|i|) + 2] * ((|p|)[(|i|) + 5] - (|p|)[(|i|) + 1]) +\n         (|p|)[(|i|) + 4] * ((|p|)[(|i|) + 1] - (|p|)[(|i|) + 3]);\n\n    if ((|ta|) <= 0)\n      (|ta|) *= -1;\n\n    printf(\"\\n%ld\", (|ta|));\n\n    (|a|) = ((|p|)[(|i|)] * (|p|)[(|i|) + 3]) - ((|p|)[(|i|) + 2] * (|p|)[(|i|) + 1]);\n    if ((|a|) <= 0)\n      (|a|) *= -1;\n\n    printf(\"  %ld\", (|a|));\n    (|ta|) -= (|a|);\n\n    (|a|) = ((|p|)[(|i|) + 2] * (|p|)[(|i|) + 5]) - ((|p|)[(|i|) + 4] * (|p|)[(|i|) + 3]);\n    if ((|a|) <= 0)\n      (|a|) *= -1;\n\n    printf(\"  %ld\", (|a|));\n    (|ta|) -= (|a|);\n\n    (|a|) = ((|p|)[(|i|) + 4] * (|p|)[(|i|) + 1]) - ((|p|)[(|i|)] * (|p|)[(|i|) + 5]);\n    if ((|a|) <= 0)\n      (|a|) *= -1;\n\n    printf(\"  %ld\", (|a|));\n    (|ta|) -= (|a|);\n\n    if ((|ta|) == 0) {\n      //      printf(\" %ld \",i);\n      (|n|)++;\n    }\n  }", "unbound_vals": [["(|a|)", 0], ["(|p|)", 0], ["(|i|)", 0], ["(|n|)", 0], ["(|ta|)", 0]], "includes": ["<stdio.h>"], "unbound_funs": null, "macros": null, "disasm": "((:MOVL 0 (- (:EBP) 24012)) (:CMPL 6000 (- (:EBP) 24012)) (:JGE :ADDR) (:MOV (- (:EBP) 24012) :EAX) (:MOV (- (:EBP) 24008) :EAX) (:MOV (- (:EBP) 24012) :ECX) (:MOV (- (:EBP) 23996) :ECX) (:MOV (- (:EBP) 24012) :EDX) (:SUB (- (:EBP) 23988) :ECX) (:IMUL :ECX :EAX) (:MOV (- (:EBP) 24012) :ECX) (:MOV (- (:EBP) 24000) :ECX) (:MOV (- (:EBP) 24012) :EDX) (:MOV (- (:EBP) 23988) :EDX) (:MOV (- (:EBP) 24012) :ESI) (:SUB (- (:EBP) 24004) :EDX) (:IMUL :EDX :ECX) (:ADD :ECX :EAX) (:MOV (- (:EBP) 24012) :ECX) (:MOV (- (:EBP) 23992) :ECX) (:MOV (- (:EBP) 24012) :EDX) (:MOV (- (:EBP) 24004) :EDX) (:MOV (- (:EBP) 24012) :ESI) (:SUB (- (:EBP) 23996) :EDX) (:IMUL :EDX :ECX) (:ADD :ECX :EAX) (:MOV :EAX (- (:EBP) 24020)) (:CMPL 0 (- (:EBP) 24020)) (:JG :ADDR) (:IMUL 4294967295 (- (:EBP) 24020) :EAX) (:MOV :EAX (- (:EBP) 24020)) (:LEA \"\n%ld\" :EAX) (:MOV (- (:EBP) 24020) :ECX) (:MOV \"\n%ld\" (:ESP)) (:MOV :ECX (+ (:ESP) 4)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:MOV (- (:EBP) 24012) :ECX) (:MOV (- (:EBP) 24008) :ECX) (:MOV (- (:EBP) 24012) :EDX) (:IMUL (- (:EBP) 23996) :ECX) (:MOV (- (:EBP) 24012) :EDX) (:MOV (- (:EBP) 24000) :EDX) (:MOV (- (:EBP) 24012) :ESI) (:IMUL (- (:EBP) 24004) :EDX) (:SUB :EDX :ECX) (:MOV :ECX (- (:EBP) 24024)) (:CMPL 0 (- (:EBP) 24024)) (:MOV \"\n%ld\" (- (:EBP) 24032)) (:JG :ADDR) (:IMUL 4294967295 (- (:EBP) 24024) :EAX) (:MOV :EAX (- (:EBP) 24024)) (:LEA \"  %ld\" :EAX) (:MOV (- (:EBP) 24024) :ECX) (:MOV \"  %ld\" (:ESP)) (:MOV :ECX (+ (:ESP) 4)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:MOV (- (:EBP) 24024) :ECX) (:MOV (- (:EBP) 24020) :EDX) (:SUB :ECX :EDX) (:MOV :EDX (- (:EBP) 24020)) (:MOV (- (:EBP) 24012) :ECX) (:MOV (- (:EBP) 24000) :ECX) (:MOV (- (:EBP) 24012) :EDX) (:IMUL (- (:EBP) 23988) :ECX) (:MOV (- (:EBP) 24012) :EDX) (:MOV (- (:EBP) 23992) :EDX) (:MOV (- (:EBP) 24012) :ESI) (:IMUL (- (:EBP) 23996) :EDX) (:SUB :EDX :ECX) (:MOV :ECX (- (:EBP) 24024)) (:CMPL 0 (- (:EBP) 24024)) (:MOV \"  %ld\" (- (:EBP) 24036)) (:JG :ADDR) (:IMUL 4294967295 (- (:EBP) 24024) :EAX) (:MOV :EAX (- (:EBP) 24024)) (:LEA \"  %ld\" :EAX) (:MOV (- (:EBP) 24024) :ECX) (:MOV \"  %ld\" (:ESP)) (:MOV :ECX (+ (:ESP) 4)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:MOV (- (:EBP) 24024) :ECX) (:MOV (- (:EBP) 24020) :EDX) (:SUB :ECX :EDX) (:MOV :EDX (- (:EBP) 24020)) (:MOV (- (:EBP) 24012) :ECX) (:MOV (- (:EBP) 23992) :ECX) (:MOV (- (:EBP) 24012) :EDX) (:IMUL (- (:EBP) 24004) :ECX) (:MOV (- (:EBP) 24012) :EDX) (:MOV (- (:EBP) 24008) :EDX) (:MOV (- (:EBP) 24012) :ESI) (:IMUL (- (:EBP) 23988) :EDX) (:SUB :EDX :ECX) (:MOV :ECX (- (:EBP) 24024)) (:CMPL 0 (- (:EBP) 24024)) (:MOV \"  %ld\" (- (:EBP) 24040)) (:JG :ADDR) (:IMUL 4294967295 (- (:EBP) 24024) :EAX) (:MOV :EAX (- (:EBP) 24024)) (:LEA \"  %ld\" :EAX) (:MOV (- (:EBP) 24024) :ECX) (:MOV \"  %ld\" (:ESP)) (:MOV :ECX (+ (:ESP) 4)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:MOV (- (:EBP) 24024) :ECX) (:MOV (- (:EBP) 24020) :EDX) (:SUB :ECX :EDX) (:MOV :EDX (- (:EBP) 24020)) (:CMPL 0 (- (:EBP) 24020)) (:MOV \"  %ld\" (- (:EBP) 24044)) (:JNE :ADDR) (:MOV (- (:EBP) 24016) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 24016)) (:JMP :ADDR) (:MOV (- (:EBP) 24012) :EAX) (:ADD 6 :EAX) (:MOV :EAX (- (:EBP) 24012)) (:JMP :ADDR) (:LEA \"\n\n %ld\" :EAX))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -5165425690241852399, "ast_class": "ImplicitCastExpr", "random": 0.011720019080405208, "src_text": "(|a61|)", "unbound_vals": [["(|a61|)", 96]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "55 89 e5 83 ec 10 8b 45 08 89 45 fc c7 45 f8 00 00 00 00 83 7d fc 00 0f 8e 36 00 00 00 b8 0a 00 00 00 8b 4d fc 89 45 f0 89 c8 99 8b 4d f0 f7 f9 89 55 f4 8b 55 f4 8b 14 95 20 a0 04 08 03 55 f8 89 55 f8 8b 55 fc 89 d0 99 f7 f9 89 45 fc e9 c0 ff ff ff 8b 45 f8 83 c4 10 5d c3 0f 1f 44 00 00", "hash": -5816071339226117455, "ast_class": "Function", "random": 0.01172537432807974, "src_text": "long GetSumDigitFactorials(long n) {\n  long result = 0;\n  int digit;\n\n  while (n > 0) {\n    digit = n % 10;\n    result += (|factorial|)[digit];\n    n /= 10;\n  }\n  return result;\n}", "unbound_vals": [["(|factorial|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:PUSH :EBP) (:MOV :ESP :EBP) (:SUB 16 :ESP) (:MOV (+ (:EBP) 8) :EAX) (:MOV :EAX (- (:EBP) 4)) (:MOVL 0 (- (:EBP) 8)) (:CMPL 0 (- (:EBP) 4)) (:JLE :ADDR) (:MOV 10 :EAX) (:MOV (- (:EBP) 4) :ECX) (:MOV 10 (- (:EBP) 16)) (:MOV :ECX :EAX) (:CLTD) (:MOV (- (:EBP) 16) :ECX) (:IDIV :ECX) (:MOV :EDX (- (:EBP) 12)) (:MOV (- (:EBP) 12) :EDX) (:MOV (+ (:EDX) 134520864) :EDX) (:ADD (- (:EBP) 8) :EDX) (:MOV :EDX (- (:EBP) 8)) (:MOV (- (:EBP) 4) :EDX) (:MOV :EDX :EAX) (:CLTD) (:IDIV :ECX) (:MOV :EAX (- (:EBP) 4)) (:JMP :ADDR) (:MOV (- (:EBP) 8) :EAX) (:ADD 16 :ESP) (:POP :EBP) (:RET) (:NOPL (+ (:EAX) 0)))", "types": [-6857659793473511817, -5849325953548989793], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": 8992371073620274210, "ast_class": "BinaryOperator", "random": 0.011736832921479978, "src_text": "(|d|)[(|i|)] != 1 || (|e|)[(|i|)] != 1", "unbound_vals": [["(|d|)", 0], ["(|i|)", 0], ["(|e|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -7217377015521463489, "ast_class": "DeclRefExpr", "random": 0.011751932893590555, "src_text": "(|x|)", "unbound_vals": [["(|x|)", 2]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -94257066165048950, "ast_class": "BinaryOperator", "random": 0.011758777247987462, "src_text": "(|stat|)[10] = 0", "unbound_vals": [["(|stat|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": null, "hash": -5861672547838539381, "ast_class": "ForStmt", "random": 0.011787470071630946, "src_text": "for ((|j|) = 2; (|j|) < 10; (|j|)++) {\n      if (!(|s|)[(|j|)] && (|j|); != 5) {\n        s[j] = 1;\n        num = i * 10 + j;\n        three_digits();\n        s[j] = 0;\n      }\n    }", "unbound_vals": [["(|s|)", 3], ["(|j|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": null, "hash": 5704637388417101172, "ast_class": "Var", "random": 0.011801357650079725, "src_text": "somme", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [-6857659793473511817], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": -2655993833276780121, "ast_class": "DeclRefExpr", "random": 0.011819409221205057, "src_text": "(|a38|)", "unbound_vals": [["(|a38|)", 88]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 7215807340900849983, "ast_class": "BinaryOperator", "random": 0.01183048082338456, "src_text": "(|a87|) < (|a88|)", "unbound_vals": [["(|a87|)", 89], ["(|a88|)", 89]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "89 45 e4 89 c8 83 c4 28 5d c3 66 66 2e 0f 1f 84 00 00 00 00 00", "hash": 5292588284897374058, "ast_class": "ReturnStmt", "random": 0.011832863003887306, "src_text": "return 0", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV \"%d\n\" (- (:EBP) 28)) (:MOV :ECX :EAX) (:ADD 40 :ESP) (:POP :EBP) (:RET) (:DATA32))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -6080027313915404228, "ast_class": "ParmVar", "random": 0.011843392773676853, "src_text": "char *s", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [342363981814211589], "is_decl": true},
{"full_stmt": true, "binary_contents": "c7 45 f0 00 00 00 00 c7 45 ec 00 00 00 00", "hash": -4738802847860881494, "ast_class": "DeclStmt", "random": 0.01184563614663292, "src_text": "unsigned long n, sum = 0, final = 0", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOVL 0 (- (:EBP) 16)) (:MOVL 0 (- (:EBP) 20)))", "types": [-4865021300304785594], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -1393189939080481432, "ast_class": "BinaryOperator", "random": 0.011848889379299954, "src_text": "(|a0|) +\n                                                                                                 (|a1|) +\n                                                                                                 (|a2|) +\n                                                                                                 (|a3|)", "unbound_vals": [["(|a0|)", 43], ["(|a1|)", 43], ["(|a2|)", 43], ["(|a3|)", 43]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "c7 45 d8 02 00 00 00 81 7d d8 3f 42 0f 00 0f 8f 5b 02 00 00 8d 05 e0 88 04 08 8d 4d c8 31 d2 be 08 00 00 00 89 cf 89 3c 24 c7 44 24 04 00 00 00 00 c7 44 24 08 08 00 00 00 89 45 c4 89 4d c0 89 55 bc 89 75 b8 e8 4f fe ff ff 8b 45 d8 8b 4d c0 89 0c 24 8b 55 c4 89 54 24 04 89 44 24 08 e8 46 fe ff ff 80 7d c8 00 89 45 b4 0f 84 0f 00 00 00 0f be 45 c8 83 e8 30 89 45 f0 e9 07 00 00 00 c7 45 f0 00 00 00 00 80 7d c9 00 0f 84 0f 00 00 00 0f be 45 c9 83 e8 30 89 45 ec e9 07 00 00 00 c7 45 ec 00 00 00 00 80 7d ca 00 0f 84 0f 00 00 00 0f be 45 ca 83 e8 30 89 45 e8 e9 07 00 00 00 c7 45 e8 00 00 00 00 80 7d cb 00 0f 84 0f 00 00 00 0f be 45 cb 83 e8 30 89 45 e4 e9 07 00 00 00 c7 45 e4 00 00 00 00 80 7d cc 00 0f 84 0f 00 00 00 0f be 45 cc 83 e8 30 89 45 e0 e9 07 00 00 00 c7 45 e0 00 00 00 00 80 7d cd 00 0f 84 0f 00 00 00 0f be 45 cd 83 e8 30 89 45 dc e9 07 00 00 00 c7 45 dc 00 00 00 00 c7 45 d0 00 00 00 00 83 7d f0 00 0f 84 21 00 00 00 b8 05 00 00 00 8b 4d f0 89 0c 24 c7 44 24 04 05 00 00 00 89 45 b0 e8 47 01 00 00 03 45 d0 89 45 d0 83 7d ec 00 0f 84 21 00 00 00 b8 05 00 00 00 8b 4d ec 89 0c 24 c7 44 24 04 05 00 00 00 89 45 ac e8 1c 01 00 00 03 45 d0 89 45 d0 83 7d e8 00 0f 84 21 00 00 00 b8 05 00 00 00 8b 4d e8 89 0c 24 c7 44 24 04 05 00 00 00 89 45 a8 e8 f1 00 00 00 03 45 d0 89 45 d0 83 7d e4 00 0f 84 21 00 00 00 b8 05 00 00 00 8b 4d e4 89 0c 24 c7 44 24 04 05 00 00 00 89 45 a4 e8 c6 00 00 00 03 45 d0 89 45 d0 83 7d e0 00 0f 84 21 00 00 00 b8 05 00 00 00 8b 4d e0 89 0c 24 c7 44 24 04 05 00 00 00 89 45 a0 e8 9b 00 00 00 03 45 d0 89 45 d0 83 7d dc 00 0f 84 21 00 00 00 b8 05 00 00 00 8b 4d dc 89 0c 24 c7 44 24 04 05 00 00 00 89 45 9c e8 70 00 00 00 03 45 d0 89 45 d0 8b 45 d0 3b 45 d8 0f 85 21 00 00 00 8d 05 e3 88 04 08 8b 4d d8 89 04 24 89 4c 24 04 e8 19 fc ff ff 8b 4d d8 03 4d d4 89 4d d4 89 45 98 e9 00 00 00 00 8b 45 d8 83 c0 01 89 45 d8 e9 98 fd ff ff 8d 05 e7 88 04 08", "hash": 6139110089595267946, "ast_class": "ForStmt", "random": 0.011863514411266096, "src_text": "for ((|x|) = 2; (|x|) <= 999999; (|x|)++) {\n    memset((|buf|), 0, sizeof((|buf|)));\n    sprintf((|buf|), \"%d\", (|x|));\n\n    if ((|buf|)[0])\n      (|a|) = (|buf|)[0] - 48;\n    else\n      (|a|) = 0;\n    if ((|buf|)[1])\n      (|b|) = (|buf|)[1] - 48;\n    else\n      (|b|) = 0;\n    if ((|buf|)[2])\n      (|c|) = (|buf|)[2] - 48;\n    else\n      (|c|) = 0;\n    if ((|buf|)[3])\n      (|d|) = (|buf|)[3] - 48;\n    else\n      (|d|) = 0;\n    if ((|buf|)[4])\n      (|e|) = (|buf|)[4] - 48;\n    else\n      (|e|) = 0;\n    if ((|buf|)[5])\n      (|f|) = (|buf|)[5] - 48;\n    else\n      (|f|) = 0;\n\n    (|z|) = 0;\n\n    if ((|a|))\n      (|z|) += (|powi|)((|a|), 5);\n    if ((|b|))\n      (|z|) += (|powi|)((|b|), 5);\n    if ((|c|))\n      (|z|) += (|powi|)((|c|), 5);\n    if ((|d|))\n      (|z|) += (|powi|)((|d|), 5);\n    if ((|e|))\n      (|z|) += (|powi|)((|e|), 5);\n    if ((|f|))\n      (|z|) += (|powi|)((|f|), 5);\n\n    if ((|z|) == (|x|)) {\n      printf(\"%d\\n\", (|x|));\n      (|y|) += (|x|);\n    }\n  }", "unbound_vals": [["(|x|)", 0], ["(|y|)", 0], ["(|a|)", 0], ["(|b|)", 0], ["(|d|)", 0], ["(|c|)", 0], ["(|e|)", 0], ["(|f|)", 0], ["(|z|)", 0], ["(|buf|)", 0]], "includes": ["<stdio.h>", "<string.h>"], "unbound_funs": [["(|powi|)", null, null, 2]], "macros": null, "disasm": "((:MOVL 2 (- (:EBP) 40)) (:CMPL 999999 (- (:EBP) 40)) (:JG :ADDR) (:LEA \"%d\" :EAX) (:LEA (- (:EBP) 56) :ECX) (:XOR :EDX :EDX) (:MOV 8 :ESI) (:MOV :ECX :EDI) (:MOV :EDI (:ESP)) (:MOVL 0 (+ (:ESP) 4)) (:MOVL 8 (+ (:ESP) 8)) (:MOV \"%d\" (- (:EBP) 60)) (:MOV :ECX (- (:EBP) 64)) (:MOV :EDX (- (:EBP) 68)) (:MOV 8 (- (:EBP) 72)) (:CALL :__LIBC_START_MAIN) (:MOV (- (:EBP) 40) :EAX) (:MOV (- (:EBP) 64) :ECX) (:MOV :ECX (:ESP)) (:MOV (- (:EBP) 60) :EDX) (:MOV :EDX (+ (:ESP) 4)) (:MOV :EAX (+ (:ESP) 8)) (:CALL :MEMSET) (:CMPB 0 (- (:EBP) 56)) (:MOV :EAX (- (:EBP) 76)) (:JE :ADDR) (:MOVSBL (- (:EBP) 56) :EAX) (:SUB 48 :EAX) (:MOV :EAX (- (:EBP) 16)) (:JMP :ADDR) (:MOVL 0 (- (:EBP) 16)) (:CMPB 0 (- (:EBP) 55)) (:JE :ADDR) (:MOVSBL (- (:EBP) 55) :EAX) (:SUB 48 :EAX) (:MOV :EAX (- (:EBP) 20)) (:JMP :ADDR) (:MOVL 0 (- (:EBP) 20)) (:CMPB 0 (- (:EBP) 54)) (:JE :ADDR) (:MOVSBL (- (:EBP) 54) :EAX) (:SUB 48 :EAX) (:MOV :EAX (- (:EBP) 24)) (:JMP :ADDR) (:MOVL 0 (- (:EBP) 24)) (:CMPB 0 (- (:EBP) 53)) (:JE :ADDR) (:MOVSBL (- (:EBP) 53) :EAX) (:SUB 48 :EAX) (:MOV :EAX (- (:EBP) 28)) (:JMP :ADDR) (:MOVL 0 (- (:EBP) 28)) (:CMPB 0 (- (:EBP) 52)) (:JE :ADDR) (:MOVSBL (- (:EBP) 52) :EAX) (:SUB 48 :EAX) (:MOV :EAX (- (:EBP) 32)) (:JMP :ADDR) (:MOVL 0 (- (:EBP) 32)) (:CMPB 0 (- (:EBP) 51)) (:JE :ADDR) (:MOVSBL (- (:EBP) 51) :EAX) (:SUB 48 :EAX) (:MOV :EAX (- (:EBP) 36)) (:JMP :ADDR) (:MOVL 0 (- (:EBP) 36)) (:MOVL 0 (- (:EBP) 48)) (:CMPL 0 (- (:EBP) 16)) (:JE :ADDR) (:MOV 5 :EAX) (:MOV (- (:EBP) 16) :ECX) (:MOV :ECX (:ESP)) (:MOVL 5 (+ (:ESP) 4)) (:MOV 5 (- (:EBP) 80)) (:CALL :POWI) (:ADD (- (:EBP) 48) :EAX) (:MOV :EAX (- (:EBP) 48)) (:CMPL 0 (- (:EBP) 20)) (:JE :ADDR) (:MOV 5 :EAX) (:MOV (- (:EBP) 20) :ECX) (:MOV :ECX (:ESP)) (:MOVL 5 (+ (:ESP) 4)) (:MOV 5 (- (:EBP) 84)) (:CALL :POWI) (:ADD (- (:EBP) 48) :EAX) (:MOV :EAX (- (:EBP) 48)) (:CMPL 0 (- (:EBP) 24)) (:JE :ADDR) (:MOV 5 :EAX) (:MOV (- (:EBP) 24) :ECX) (:MOV :ECX (:ESP)) (:MOVL 5 (+ (:ESP) 4)) (:MOV 5 (- (:EBP) 88)) (:CALL :POWI) (:ADD (- (:EBP) 48) :EAX) (:MOV :EAX (- (:EBP) 48)) (:CMPL 0 (- (:EBP) 28)) (:JE :ADDR) (:MOV 5 :EAX) (:MOV (- (:EBP) 28) :ECX) (:MOV :ECX (:ESP)) (:MOVL 5 (+ (:ESP) 4)) (:MOV 5 (- (:EBP) 92)) (:CALL :POWI) (:ADD (- (:EBP) 48) :EAX) (:MOV :EAX (- (:EBP) 48)) (:CMPL 0 (- (:EBP) 32)) (:JE :ADDR) (:MOV 5 :EAX) (:MOV (- (:EBP) 32) :ECX) (:MOV :ECX (:ESP)) (:MOVL 5 (+ (:ESP) 4)) (:MOV 5 (- (:EBP) 96)) (:CALL :POWI) (:ADD (- (:EBP) 48) :EAX) (:MOV :EAX (- (:EBP) 48)) (:CMPL 0 (- (:EBP) 36)) (:JE :ADDR) (:MOV 5 :EAX) (:MOV (- (:EBP) 36) :ECX) (:MOV :ECX (:ESP)) (:MOVL 5 (+ (:ESP) 4)) (:MOV 5 (- (:EBP) 100)) (:CALL :POWI) (:ADD (- (:EBP) 48) :EAX) (:MOV :EAX (- (:EBP) 48)) (:MOV (- (:EBP) 48) :EAX) (:CMP (- (:EBP) 40) :EAX) (:JNE :ADDR) (:LEA \"%d\n\" :EAX) (:MOV (- (:EBP) 40) :ECX) (:MOV \"%d\n\" (:ESP)) (:MOV :ECX (+ (:ESP) 4)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:MOV (- (:EBP) 40) :ECX) (:ADD (- (:EBP) 44) :ECX) (:MOV :ECX (- (:EBP) 44)) (:MOV \"%d\n\" (- (:EBP) 104)) (:JMP :ADDR) (:MOV (- (:EBP) 40) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 40)) (:JMP :ADDR) (:LEA \"\nAnswer = %d\n\n\" :EAX))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 8634849708149885654, "ast_class": "Var", "random": 0.011868185591835556, "src_text": "k = a % 10", "unbound_vals": [["(|a|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [-6857659793473511817], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": -5848783475006938998, "ast_class": "BinaryOperator", "random": 0.011873728824561947, "src_text": "(|a|) = (int)(|sqrt|)((double)(|m|))", "unbound_vals": [["(|a|)", 0], ["(|m|)", 1]], "includes": null, "unbound_funs": [["(|sqrt|)", null, null, 1]], "macros": null, "disasm": null, "types": [-5849325953548989793, -4605258830889951363], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 1760024634015747844, "ast_class": "InitListExpr", "random": 0.011875246128570827, "src_text": "{551, -496, 772, -541, -702, -45}", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 60302562134613760, "ast_class": "ImplicitCastExpr", "random": 0.011883460076122176, "src_text": "(|a7|)", "unbound_vals": [["(|a7|)", 38]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": "8b 45 f4 83 c0 01 89 45 f4", "hash": 8704869600133263423, "ast_class": "UnaryOperator", "random": 0.011918656125615157, "src_text": "++(|p|)", "unbound_vals": [["(|p|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 12) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 12)))", "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": null, "hash": 8209714299601047789, "ast_class": "CallExpr", "random": 0.011920749882594506, "src_text": "(|minSum|)()", "unbound_vals": [], "includes": [], "unbound_funs": [["(|minSum|)", true, false, 0]], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -4967565860362190232, "ast_class": "BinaryOperator", "random": 0.01193024389703512, "src_text": "(|l|) = 0", "unbound_vals": [["(|l|)", 2]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -1788608035705058117, "ast_class": "BinaryOperator", "random": 0.011940215270974885, "src_text": "(|e|) > 0", "unbound_vals": [["(|e|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -2655993833276780151, "ast_class": "DeclRefExpr", "random": 0.011941449341703492, "src_text": "(|a38|)", "unbound_vals": [["(|a38|)", 58]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -3737125930391859890, "ast_class": "ImplicitCastExpr", "random": 0.011963515894716892, "src_text": "strlen((|no2|)) - 1", "unbound_vals": [["(|no2|)", 1]], "includes": ["<string.h>"], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "8b 95 68 e8 ff ff 89 d0 99 f7 f9 89 85 6c e8 ff ff", "hash": -5138830940879935441, "ast_class": "BinaryOperator", "random": 0.0119816717434309, "src_text": "(|r|) = (|m|) / 10", "unbound_vals": [["(|r|)", 3], ["(|m|)", 3]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 6040) :EDX) (:MOV :EDX :EAX) (:CLTD) (:IDIV :ECX) (:MOV :EAX (- (:EBP) 6036)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 4390481207974030355, "ast_class": "UnaryOperator", "random": 0.011982171597989089, "src_text": "-756", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -1156356673308576757, "ast_class": "ImplicitCastExpr", "random": 0.011982513708643228, "src_text": "(|b|)[(|k|) - 1]", "unbound_vals": [["(|b|)", 1], ["(|k|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -194922357368476074, "ast_class": "DeclRefExpr", "random": 0.011989735277245672, "src_text": "(|sqrlen3|)", "unbound_vals": [["(|sqrlen3|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -3569674652706321491, "ast_class": "DeclRefExpr", "random": 0.012011039156207048, "src_text": "(|ftriangle|)", "unbound_vals": [["(|ftriangle|)", 2]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": null, "hash": 5163424453082161570, "ast_class": "DeclStmt", "random": 0.012038279306328503, "src_text": "char n[MAX_NR]", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": [["MAX_NR", "MAX_NR 40 + 1"]], "disasm": null, "types": [5753727017960068073], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -6645407515754193455, "ast_class": "BinaryOperator", "random": 0.012038541567356398, "src_text": "(|n|) * (|n|) + 1 - (|n|)", "unbound_vals": [["(|n|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 4228670423600407804, "ast_class": "BinaryOperator", "random": 0.012040610450552935, "src_text": "(|result|) + (|lastDigits|)", "unbound_vals": [["(|result|)", 1], ["(|lastDigits|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -1442006075628547814, "ast_class": "CStyleCastExpr", "random": 0.012045852335386797, "src_text": "(float)(int)(|f1|)", "unbound_vals": [["(|f1|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [3529751552447467760, -5849325953548989793], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -849310493339573025, "ast_class": "Var", "random": 0.012073293558136133, "src_text": "char a", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [342363981814211588], "is_decl": true},
{"full_stmt": false, "binary_contents": null, "hash": 6761158301552652309, "ast_class": "BinaryOperator", "random": 0.01209186208266888, "src_text": "(|a0|) +\n                                                                                                                                                                                                    (|a1|) +\n                                                                                                                                                                                                    (|a2|) +\n                                                                                                                                                                                                    (|a3|) +\n                                                                                                                                                                                                    (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) +\n                                                                                                                                                                                                    (|a15|) +\n                                                                                                                                                                                                    (|a16|) +\n                                                                                                                                                                                                    (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) +\n                                                                                                                                                                                                    (|a30|) +\n                                                                                                                                                                                                    (|a31|) + (|a32|) + (|a33|)", "unbound_vals": [["(|a0|)", 89], ["(|a1|)", 89], ["(|a2|)", 89], ["(|a3|)", 89], ["(|a4|)", 89], ["(|a5|)", 89], ["(|a6|)", 89], ["(|a7|)", 89], ["(|a8|)", 89], ["(|a9|)", 89], ["(|a10|)", 89], ["(|a11|)", 89], ["(|a12|)", 89], ["(|a13|)", 89], ["(|a14|)", 89], ["(|a15|)", 89], ["(|a16|)", 89], ["(|a17|)", 89], ["(|a18|)", 89], ["(|a19|)", 89], ["(|a20|)", 89], ["(|a21|)", 89], ["(|a22|)", 89], ["(|a23|)", 89], ["(|a24|)", 89], ["(|a25|)", 89], ["(|a26|)", 89], ["(|a27|)", 89], ["(|a28|)", 89], ["(|a29|)", 89], ["(|a30|)", 89], ["(|a31|)", 89], ["(|a32|)", 89], ["(|a33|)", 89]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -2410239031992751877, "ast_class": "MemberExpr", "random": 0.01209716221072843, "src_text": "(|np1|).sl", "unbound_vals": [["(|np1|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -6069736238818142100, "ast_class": "BinaryOperator", "random": 0.012105624884485189, "src_text": "(|abundant|)[(|i|)] + (|abundant|)[(|j|)] >= MaxLimit", "unbound_vals": [["(|abundant|)", 4], ["(|i|)", 2], ["(|j|)", 2]], "includes": null, "unbound_funs": null, "macros": [["MaxLimit", "MaxLimit 28124"]], "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 3729094711939242242, "ast_class": "ImplicitCastExpr", "random": 0.012155129222647387, "src_text": "-664", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 4228939765572955632, "ast_class": "BinaryOperator", "random": 0.012181059974802788, "src_text": "(|a2|) >= 0", "unbound_vals": [["(|a2|)", 2]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 5640305138545968258, "ast_class": "IntegerLiteral", "random": 0.012190699622042112, "src_text": "595655", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -8235737118176307324, "ast_class": "BinaryOperator", "random": 0.012197228460605447, "src_text": "(|a0|) +\n                                                                                                                                                         (|a1|) +\n                                                                                                                                                         (|a2|) +\n                                                                                                                                                         (|a3|)", "unbound_vals": [["(|a0|)", 70], ["(|a1|)", 70], ["(|a2|)", 70], ["(|a3|)", 70]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": null, "hash": 2399086676067080698, "ast_class": "BinaryOperator", "random": 0.012213112100025847, "src_text": "(|fact|)[(|i|)] = (|r|) % 10", "unbound_vals": [["(|fact|)", 4], ["(|i|)", 2], ["(|r|)", 2]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": "8b 45 e8 8b 4d ec 89 e2 89 4a 04 89 02 c7 42 0c 00 00 00 00 c7 42 08 64 00 00 00 e8 a8 00 00 00 09 d0 89 85 78 ff ff ff 0f 85 5f 00 00 00 e9 00 00 00 00 8d 05 e9 8f 04 08 8b 4d e8 8b 55 ec f2 0f 10 45 b8 f2 0f 10 4d b0 0f 28 d0 f2 0f 5e d1 8b 75 ac 8b 7e 08 8b 76 0c 89 e3 89 73 28 89 7b 24 f2 0f 11 53 1c f2 0f 11 4b 14 f2 0f 11 43 0c 89 53 08 89 4b 04 c7 03 e9 8f 04 08 89 85 74 ff ff ff e8 21 f6 ff ff 89 85 70 ff ff ff", "hash": -1810313630924932264, "ast_class": "CompoundStmt", "random": 0.012232215760887843, "src_text": "{\n      printf(\"i:%llu,p:%g,t:%g,pt:%g,ln:%llu\\n\", (|i|), (|p|), (|t|), (|p|) / (|t|), ((|pr|)->cur));\n    }", "unbound_vals": [["(|i|)", 2], ["(|p|)", 2], ["(|t|)", 2], ["(|pr|)", 2]], "includes": ["<stdio.h>"], "unbound_funs": null, "macros": null, "disasm": "((:MOV (- (:EBP) 24) :EAX) (:MOV (- (:EBP) 20) :ECX) (:MOV :ESP :EDX) (:MOV :ECX (+ (:EDX) 4)) (:MOV :EAX (:EDX)) (:MOVL 0 (+ (:EDX) 12)) (:MOVL 100 (+ (:EDX) 8)) (:CALL :__UMODDI3) (:OR :EDX :EAX) (:MOV :EAX (- (:EBP) 136)) (:JNE :ADDR) (:JMP :ADDR) (:LEA \"i:%llu,p:%g,t:%g,pt:%g,ln:%llu\n\" :EAX) (:MOV (- (:EBP) 24) :ECX) (:MOV (- (:EBP) 20) :EDX) (:MOVSD (- (:EBP) 72) :XMM0) (:MOVSD (- (:EBP) 80) :XMM1) (:MOVAPS :XMM0 :XMM2) (:DIVSD :XMM1 :XMM2) (:MOV (- (:EBP) 84) :ESI) (:MOV (+ (:ESI) 8) :EDI) (:MOV (+ (:ESI) 12) :ESI) (:MOV :ESP :EBX) (:MOV :ESI (+ (:EBX) 40)) (:MOV :EDI (+ (:EBX) 36)) (:MOVSD :XMM2 (+ (:EBX) 28)) (:MOVSD :XMM1 (+ (:EBX) 20)) (:MOVSD :XMM0 (+ (:EBX) 12)) (:MOV :EDX (+ (:EBX) 8)) (:MOV :ECX (+ (:EBX) 4)) (:MOVL \"i:%llu,p:%g,t:%g,pt:%g,ln:%llu\n\" (:EBX)) (:MOV \"i:%llu,p:%g,t:%g,pt:%g,ln:%llu\n\" (- (:EBP) 140)) (:CALL :_ITM_DEREGISTERTMCLONETABLE) (:MOV \"i:%llu,p:%g,t:%g,pt:%g,ln:%llu\n\" (- (:EBP) 144)))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -4287126464162023660, "ast_class": "ImplicitCastExpr", "random": 0.012242482480104733, "src_text": "876", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -2134897603765604709, "ast_class": "UnaryOperator", "random": 0.012243574873524454, "src_text": "!(|s|)[(|k|)]", "unbound_vals": [["(|s|)", 7], ["(|k|)", 5]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 8759121912755120834, "ast_class": "IntegerLiteral", "random": 0.012255744312783867, "src_text": "127", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": null, "hash": 5598333864133149277, "ast_class": "Function", "random": 0.0122869525802769, "src_text": "bool Right(int x1, int x2, int y1, int y2) {\n  int a = (|x1|) * (|x1|) + (|y1|) * (|y1|);\n  int b = (|x2|) * (|x2|) + (|y2|) * (|y2|);\n  int c = ((|x1|) - (|x2|)) * ((|x1|) - (|x2|)) + ((|y1|) - (|y2|)) * ((|y1|) - (|y2|));\n  if (!a || !b || !c)\n    return false;\n  return (a == b + c) || (b == c + a) || (c == a + b);\n}", "unbound_vals": [["(|x1|)", 0], ["(|x2|)", 0], ["(|y1|)", 0], ["(|y2|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [-5849325953548989793], "is_decl": true},
{"full_stmt": true, "binary_contents": "e9 00 00 00 00 83 7d f8 00 0f 8c 1e 00 00 00 8b 45 f8 8b 04 85 20 a0 04 08 03 45 f4 89 45 f4 8b 45 f8 83 c0 ff 89 45 f8 e9 d8 ff ff ff 8d 05 70 86 04 08", "hash": 8630717726722135426, "ast_class": "ForStmt", "random": 0.012287821214796102, "src_text": "for (; (|i|) >= 0; --(|i|))\n    (|sum|) += (|num|)[(|i|)]", "unbound_vals": [["(|num|)", 2], ["(|i|)", 0], ["(|sum|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:JMP :ADDR) (:CMPL 0 (- (:EBP) 8)) (:JL :ADDR) (:MOV (- (:EBP) 8) :EAX) (:MOV (+ (:EAX) 134520864) :EAX) (:ADD (- (:EBP) 12) :EAX) (:MOV :EAX (- (:EBP) 12)) (:MOV (- (:EBP) 8) :EAX) (:ADD 4294967295 :EAX) (:MOV :EAX (- (:EBP) 8)) (:JMP :ADDR) (:LEA \"%d\" :EAX))", "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -7256089176140460953, "ast_class": "CStyleCastExpr", "random": 0.01229274946245107, "src_text": "(long long)(|n1|)", "unbound_vals": [["(|n1|)", 1]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [-6252000326173323660], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -7403730279983389634, "ast_class": "StringLiteral", "random": 0.012298828219762026, "src_text": "\" %d \"", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -551191790788408089, "ast_class": "BinaryOperator", "random": 0.01233253950291735, "src_text": "(|a0|) + (|a1|) + (|a2|) + (|a3|) + (|a4|) + (|a5|)", "unbound_vals": [["(|a0|)", 73], ["(|a1|)", 73], ["(|a2|)", 73], ["(|a3|)", 73], ["(|a4|)", 73], ["(|a5|)", 73]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 7459417125253411912, "ast_class": "ImplicitCastExpr", "random": 0.012338010857083082, "src_text": "(|angles|)[(|counterB|)]", "unbound_vals": [["(|angles|)", 4], ["(|counterB|)", 4]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 1392097641051948535, "ast_class": "BinaryOperator", "random": 0.012359034348016884, "src_text": "(|a0|) +\n                                                                          (|a1|) +\n                                                                          (|a2|) +\n                                                                          (|a3|) +\n                                                                          (|a4|) +\n                                                                          (|a5|) +\n                                                                          (|a6|) +\n                                                                          (|a7|) +\n                                                                          (|a8|) +\n                                                                          (|a9|) +\n                                                                          (|a10|) +\n                                                                          (|a11|) +\n                                                                          (|a12|) +\n                                                                          (|a13|) +\n                                                                          (|a14|) +\n                                                                          (|a15|) +\n                                                                          (|a16|) +\n                                                                          (|a17|)", "unbound_vals": [["(|a0|)", 30], ["(|a1|)", 30], ["(|a2|)", 30], ["(|a3|)", 30], ["(|a4|)", 30], ["(|a5|)", 30], ["(|a6|)", 30], ["(|a7|)", 30], ["(|a8|)", 30], ["(|a9|)", 30], ["(|a10|)", 30], ["(|a11|)", 30], ["(|a12|)", 30], ["(|a13|)", 30], ["(|a14|)", 30], ["(|a15|)", 30], ["(|a16|)", 30], ["(|a17|)", 30]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 2213723292772304320, "ast_class": "IntegerLiteral", "random": 0.012374674943128716, "src_text": "189758", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -4465417316310625052, "ast_class": "DeclRefExpr", "random": 0.012375334033991492, "src_text": "(|a67|)", "unbound_vals": [["(|a67|)", 85]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -1302135053778512998, "ast_class": "DeclRefExpr", "random": 0.012376281753882279, "src_text": "(|a29|)", "unbound_vals": [["(|a29|)", 77]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -5306486556534561941, "ast_class": "ImplicitCastExpr", "random": 0.012376740204739889, "src_text": "(|end|)", "unbound_vals": [["(|end|)", 3]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -2562471886838470184, "ast_class": "IntegerLiteral", "random": 0.012382296020088779, "src_text": "1621", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 6856100157869966685, "ast_class": "ArraySubscriptExpr", "random": 0.01239797774181195, "src_text": "(|num|)[1]", "unbound_vals": [["(|num|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": null, "hash": -8092762831588811050, "ast_class": "ForStmt", "random": 0.012402347860993923, "src_text": "for ((|i|) = 2; (|i|) <= N; (|i|)++)\n    for ((|j|) = 2; (|j|) <= (|i|); (|j|)++)\n      (|nways|)[(|i|)][(|j|)] = -1", "unbound_vals": [["(|nways|)", 2], ["(|i|)", 0], ["(|j|)", 0]], "includes": [], "unbound_funs": [], "macros": [["N", "N 100"]], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -2461033095366725992, "ast_class": "IntegerLiteral", "random": 0.012403536171010532, "src_text": "506953", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 967897181572075166, "ast_class": "ImplicitCastExpr", "random": 0.012408079494268143, "src_text": "1459", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 2694206128368008383, "ast_class": "ImplicitCastExpr", "random": 0.012448323054842558, "src_text": "(|prev_len|)", "unbound_vals": [["(|prev_len|)", 4]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": "c7 45 dc 02 00 00 00 81 7d dc 41 42 0f 00 0f 83 1e 02 00 00 8b 45 dc 8b 4d e0 83 3c 81 00 0f 84 91 00 00 00 8b 45 dc f2 0f 10 05 60 88 04 08 0f 28 c8 66 0f 6e d0 66 0f eb d1 f2 0f 5c d0 f2 0f 11 55 e8 c7 45 d8 02 00 00 00 8b 45 d8 8b 4d dc 8b 55 e0 8b 0c 8a 3b 41 04 0f 83 51 00 00 00 f2 0f 10 05 68 88 04 08 8b 45 d8 8b 4d dc 8b 55 e0 8b 0c 8a 8b 04 81 66 0f 6e c8 f2 0f 10 15 60 88 04 08 0f 28 da 66 0f eb cb f2 0f 5c ca 0f 28 d0 f2 0f 5e d1 f2 0f 5c c2 f2 0f 59 45 e8 f2 0f 11 45 e8 8b 45 d8 83 c0 01 89 45 d8 e9 9a ff ff ff e9 26 01 00 00 8b 45 dc 48 f2 0f 10 05 60 88 04 08 0f 28 c8 66 0f 6e d0 66 0f eb d1 f2 0f 5c d0 f2 0f 11 55 e8 8b 45 dc c1 e0 01 89 45 d4 81 7d d4 41 42 0f 00 0f 83 eb 00 00 00 8b 45 d4 8b 4d e0 83 3c 81 00 0f 84 7d 00 00 00 8b 45 d4 8b 4d e0 8b 04 81 8b 00 8b 4d d4 8b 55 e0 8b 0c 8a 3b 41 04 0f 85 2e 00 00 00 8b 45 d4 8b 4d e0 8b 04 81 8b 4d d4 8b 55 e0 8b 0c 8a 8b 11 83 c2 10 89 11 89 04 24 89 54 24 04 e8 3e fd ff ff 8b 4d d4 8b 55 e0 89 04 8a 8b 45 dc 8b 4d d4 8b 55 e0 8b 0c 8a 8b 49 04 8b 55 d4 8b 75 e0 8b 14 96 89 04 8a 8b 45 d4 8b 4d e0 8b 04 81 8b 48 04 83 c1 01 89 48 04 e9 4b 00 00 00 b8 18 00 00 00 c7 04 24 18 00 00 00 89 45 c8 e8 ff fc ff ff 8b 4d d4 8b 55 e0 89 04 8a 8b 45 d4 8b 4d e0 8b 04 81 c7 00 18 00 00 00 8b 45 d4 8b 4d e0 8b 04 81 c7 40 04 03 00 00 00 8b 45 dc 8b 4d d4 8b 55 e0 8b 0c 8a 89 41 08 e9 00 00 00 00 8b 45 dc 03 45 d4 89 45 d4 e9 08 ff ff ff e9 00 00 00 00 8b 45 dc f2 0f 10 05 60 88 04 08 0f 28 c8 66 0f 6e d0 66 0f eb d1 f2 0f 5c d0 f2 0f 5e 55 e8 f2 0f 11 55 e8 f2 0f 10 45 e8 66 0f 2e 45 f0 0f 86 10 00 00 00 f2 0f 10 45 e8 f2 0f 11 45 f0 8b 45 dc 89 45 e4 e9 00 00 00 00 8b 45 dc 83 c0 01 89 45 dc e9 d5 fd ff ff 8d 05 70 88 04 08", "hash": 4082891322731781463, "ast_class": "CompoundStmt", "random": 0.012450401934948174, "src_text": "{\n    if ((|tab|)[(|i|)]) {\n      (|tmp|) = (double)(|i|);\n      for (uint32_t j = 2; j < (|tab|)[(|i|)][1]; j++) {\n        (|tmp|) *= 1 - 1 / ((double)(|tab|)[(|i|)][j]);\n      }\n    } else {\n      (|tmp|) = ((double)((|i|) - 1));\n      for (uint32_t j = 2 * (|i|); j < MAX + 1; j += (|i|)) {\n        if ((|tab|)[j]) {\n          if ((|tab|)[j][0] == (|tab|)[j][1]) {\n            (|tab|)[j] = realloc((|tab|)[j], ((|tab|)[j][0] += 4 * sizeof(uint32_t)));\n          }\n          (|tab|)[j][(|tab|)[j][1]] = (|i|);\n          ++(|tab|)[j][1];\n        } else {\n          (|tab|)[j] = (uint32_t *)malloc(6 * sizeof(uint32_t));\n          (|tab|)[j][0] = 6 * sizeof(uint32_t);\n          (|tab|)[j][1] = 3;\n          (|tab|)[j][2] = (|i|);\n        }\n      }\n    }\n\n    (|tmp|) = ((double)(|i|)) / (|tmp|);\n    if ((|tmp|) > (|mrto|)) {\n      (|mrto|) = (|tmp|);\n      (|msd|) = (|i|);\n    }\n  }", "unbound_vals": [["(|mrto|)", 1], ["(|tmp|)", 1], ["(|msd|)", 1], ["(|tab|)", 1], ["(|i|)", 1]], "includes": ["<stdlib.h>"], "unbound_funs": null, "macros": [["MAX", "MAX 1000000"]], "disasm": "((:MOVL 2 (- (:EBP) 36)) (:CMPL 1000001 (- (:EBP) 36)) (:JAE :ADDR) (:MOV (- (:EBP) 36) :EAX) (:MOV (- (:EBP) 32) :ECX) (:CMPL 0 (:ECX)) (:JE :ADDR) (:MOV (- (:EBP) 36) :EAX) (:MOVSD 4.503599627370496D+15 :XMM0) (:MOVAPS 4.503599627370496D+15 :XMM1) (:MOVD :EAX :XMM2) (:POR :XMM1 :XMM2) (:SUBSD 4.503599627370496D+15 :XMM2) (:MOVSD :XMM2 (- (:EBP) 24)) (:MOVL 2 (- (:EBP) 40)) (:MOV (- (:EBP) 40) :EAX) (:MOV (- (:EBP) 36) :ECX) (:MOV (- (:EBP) 32) :EDX) (:MOV (:EDX) :ECX) (:CMP (+ (:ECX) 4) :EAX) (:JAE :ADDR) (:MOVSD 1.0D0 :XMM0) (:MOV (- (:EBP) 40) :EAX) (:MOV (- (:EBP) 36) :ECX) (:MOV (- (:EBP) 32) :EDX) (:MOV (:EDX) :ECX) (:MOV (:ECX) :EAX) (:MOVD :EAX :XMM1) (:MOVSD 4.503599627370496D+15 :XMM2) (:MOVAPS 4.503599627370496D+15 :XMM3) (:POR :XMM3 :XMM1) (:SUBSD 4.503599627370496D+15 :XMM1) (:MOVAPS 1.0D0 :XMM2) (:DIVSD :XMM1 :XMM2) (:SUBSD :XMM2 :XMM0) (:MULSD (- (:EBP) 24) :XMM0) (:MOVSD :XMM0 (- (:EBP) 24)) (:MOV (- (:EBP) 40) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 40)) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 36) :EAX) (:DEC :EAX) (:MOVSD 4.503599627370496D+15 :XMM0) (:MOVAPS 4.503599627370496D+15 :XMM1) (:MOVD :EAX :XMM2) (:POR :XMM1 :XMM2) (:SUBSD 4.503599627370496D+15 :XMM2) (:MOVSD :XMM2 (- (:EBP) 24)) (:MOV (- (:EBP) 36) :EAX) (:SHL 1 :EAX) (:MOV :EAX (- (:EBP) 44)) (:CMPL 1000001 (- (:EBP) 44)) (:JAE :ADDR) (:MOV (- (:EBP) 44) :EAX) (:MOV (- (:EBP) 32) :ECX) (:CMPL 0 (:ECX)) (:JE :ADDR) (:MOV (- (:EBP) 44) :EAX) (:MOV (- (:EBP) 32) :ECX) (:MOV (:ECX) :EAX) (:MOV (:EAX) :EAX) (:MOV (- (:EBP) 44) :ECX) (:MOV (- (:EBP) 32) :EDX) (:MOV (:EDX) :ECX) (:CMP (+ (:ECX) 4) :EAX) (:JNE :ADDR) (:MOV (- (:EBP) 44) :EAX) (:MOV (- (:EBP) 32) :ECX) (:MOV (:ECX) :EAX) (:MOV (- (:EBP) 44) :ECX) (:MOV (- (:EBP) 32) :EDX) (:MOV (:EDX) :ECX) (:MOV (:ECX) :EDX) (:ADD 16 :EDX) (:MOV :EDX (:ECX)) (:MOV :EAX (:ESP)) (:MOV :EDX (+ (:ESP) 4)) (:CALL :PRINTF) (:MOV (- (:EBP) 44) :ECX) (:MOV (- (:EBP) 32) :EDX) (:MOV :EAX (:EDX)) (:MOV (- (:EBP) 36) :EAX) (:MOV (- (:EBP) 44) :ECX) (:MOV (- (:EBP) 32) :EDX) (:MOV (:EDX) :ECX) (:MOV (+ (:ECX) 4) :ECX) (:MOV (- (:EBP) 44) :EDX) (:MOV (- (:EBP) 32) :ESI) (:MOV (:ESI) :EDX) (:MOV :EAX (:EDX)) (:MOV (- (:EBP) 44) :EAX) (:MOV (- (:EBP) 32) :ECX) (:MOV (:ECX) :EAX) (:MOV (+ (:EAX) 4) :ECX) (:ADD 1 :ECX) (:MOV :ECX (+ (:EAX) 4)) (:JMP :ADDR) (:MOV 24 :EAX) (:MOVL 24 (:ESP)) (:MOV 24 (- (:EBP) 56)) (:CALL :REALLOC) (:MOV (- (:EBP) 44) :ECX) (:MOV (- (:EBP) 32) :EDX) (:MOV 24 (:EDX)) (:MOV (- (:EBP) 44) :EAX) (:MOV (- (:EBP) 32) :ECX) (:MOV (:ECX) :EAX) (:MOVL 24 (:EAX)) (:MOV (- (:EBP) 44) :EAX) (:MOV (- (:EBP) 32) :ECX) (:MOV (:ECX) :EAX) (:MOVL 3 (+ (:EAX) 4)) (:MOV (- (:EBP) 36) :EAX) (:MOV (- (:EBP) 44) :ECX) (:MOV (- (:EBP) 32) :EDX) (:MOV (:EDX) :ECX) (:MOV :EAX (+ (:ECX) 8)) (:JMP :ADDR) (:MOV (- (:EBP) 36) :EAX) (:ADD (- (:EBP) 44) :EAX) (:MOV :EAX (- (:EBP) 44)) (:JMP :ADDR) (:JMP :ADDR) (:MOV (- (:EBP) 36) :EAX) (:MOVSD 4.503599627370496D+15 :XMM0) (:MOVAPS 4.503599627370496D+15 :XMM1) (:MOVD :EAX :XMM2) (:POR :XMM1 :XMM2) (:SUBSD 4.503599627370496D+15 :XMM2) (:DIVSD (- (:EBP) 24) :XMM2) (:MOVSD :XMM2 (- (:EBP) 24)) (:MOVSD (- (:EBP) 24) :XMM0) (:UCOMISD (- (:EBP) 16) :XMM0) (:JBE :ADDR) (:MOVSD (- (:EBP) 24) :XMM0) (:MOVSD :XMM0 (- (:EBP) 16)) (:MOV (- (:EBP) 36) :EAX) (:MOV :EAX (- (:EBP) 28)) (:JMP :ADDR) (:MOV (- (:EBP) 36) :EAX) (:ADD 1 :EAX) (:MOV :EAX (- (:EBP) 36)) (:JMP :ADDR) (:LEA \"%u\n\" :EAX))", "types": [7822317086334075805, 7822317086334075806, -4605258830889951363], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 1324330394033613715, "ast_class": "DeclRefExpr", "random": 0.012464545820350614, "src_text": "(|dell|)", "unbound_vals": [["(|dell|)", 2]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 519859887508752974, "ast_class": "IntegerLiteral", "random": 0.012475222739614322, "src_text": "7013", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -2873371475761792976, "ast_class": "IntegerLiteral", "random": 0.012493220668099325, "src_text": "984", "unbound_vals": [], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -7478516700997907113, "ast_class": "DeclRefExpr", "random": 0.012504802231067425, "src_text": "(|a7|)", "unbound_vals": [["(|a7|)", 93]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 170854737883701065, "ast_class": "ArraySubscriptExpr", "random": 0.012528867738576976, "src_text": "(|d|)[(|i|)]", "unbound_vals": [["(|d|)", 0], ["(|i|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -5178063235776529741, "ast_class": "DeclRefExpr", "random": 0.012544798189196182, "src_text": "(|month|)", "unbound_vals": [["(|month|)", 0]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 6885065818530048580, "ast_class": "MemberExpr", "random": 0.012546317403123841, "src_text": "(|newr|)->next", "unbound_vals": [["(|newr|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -4097368879269239659, "ast_class": "ArraySubscriptExpr", "random": 0.012566540900804779, "src_text": "(|str1|)[(|i|)]", "unbound_vals": [["(|i|)", 2], ["(|str1|)", 3]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 5562254020014318041, "ast_class": "ImplicitCastExpr", "random": 0.012567773591816156, "src_text": "(|a13|)", "unbound_vals": [["(|a13|)", 15]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 8941020095744704073, "ast_class": "BinaryOperator", "random": 0.012573987590482005, "src_text": "(|yb|) - (|ya|)", "unbound_vals": [["(|ya|)", 0], ["(|yb|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -2664894651919308937, "ast_class": "BinaryOperator", "random": 0.01258157522622827, "src_text": "(|a0|) +\n                                                                                                                                                      (|a1|) +\n                                                                                                                                                      (|a2|) +\n                                                                                                                                                      (|a3|) +\n                                                                                                                                                      (|a4|) + (|a5|) + (|a6|) + (|a7|) + (|a8|) + (|a9|) + (|a10|) + (|a11|) + (|a12|) + (|a13|) + (|a14|) + (|a15|) + (|a16|) + (|a17|) + (|a18|) + (|a19|) + (|a20|) + (|a21|) + (|a22|) + (|a23|) + (|a24|) + (|a25|) + (|a26|) + (|a27|) + (|a28|) + (|a29|) + (|a30|) + (|a31|) + (|a32|) + (|a33|) + (|a34|) + (|a35|) + (|a36|) + (|a37|) + (|a38|) + (|a39|) +\n                                                                                                                                                      (|a40|) +\n                                                                                                                                                      (|a41|) +\n                                                                                                                                                      (|a42|) +\n                                                                                                                                                      (|a43|) +\n                                                                                                                                                      (|a44|) +\n                                                                                                                                                      (|a45|) + (|a46|) + (|a47|) + (|a48|) + (|a49|) + (|a50|) + (|a51|) + (|a52|) + (|a53|) + (|a54|) + (|a55|) + (|a56|) + (|a57|) + (|a58|) + (|a59|) + (|a60|) + (|a61|) + (|a62|)", "unbound_vals": [["(|a0|)", 66], ["(|a1|)", 66], ["(|a2|)", 66], ["(|a3|)", 66], ["(|a4|)", 66], ["(|a5|)", 66], ["(|a6|)", 66], ["(|a7|)", 66], ["(|a8|)", 66], ["(|a9|)", 66], ["(|a10|)", 66], ["(|a11|)", 66], ["(|a12|)", 66], ["(|a13|)", 66], ["(|a14|)", 66], ["(|a15|)", 66], ["(|a16|)", 66], ["(|a17|)", 66], ["(|a18|)", 66], ["(|a19|)", 66], ["(|a20|)", 66], ["(|a21|)", 66], ["(|a22|)", 66], ["(|a23|)", 66], ["(|a24|)", 66], ["(|a25|)", 66], ["(|a26|)", 66], ["(|a27|)", 66], ["(|a28|)", 66], ["(|a29|)", 66], ["(|a30|)", 66], ["(|a31|)", 66], ["(|a32|)", 66], ["(|a33|)", 66], ["(|a34|)", 66], ["(|a35|)", 66], ["(|a36|)", 66], ["(|a37|)", 66], ["(|a38|)", 66], ["(|a39|)", 66], ["(|a40|)", 66], ["(|a41|)", 66], ["(|a42|)", 66], ["(|a43|)", 66], ["(|a44|)", 66], ["(|a45|)", 66], ["(|a46|)", 66], ["(|a47|)", 66], ["(|a48|)", 66], ["(|a49|)", 66], ["(|a50|)", 66], ["(|a51|)", 66], ["(|a52|)", 66], ["(|a53|)", 66], ["(|a54|)", 66], ["(|a55|)", 66], ["(|a56|)", 66], ["(|a57|)", 66], ["(|a58|)", 66], ["(|a59|)", 66], ["(|a60|)", 66], ["(|a61|)", 66], ["(|a62|)", 66]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 4741225058960840302, "ast_class": "StringLiteral", "random": 0.012583093685521796, "src_text": "\"Answer: %li\\n\"", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 3035613407522536920, "ast_class": "BinaryOperator", "random": 0.012585443178870115, "src_text": "(|i|) < LIMIT2", "unbound_vals": [["(|i|)", 0]], "includes": null, "unbound_funs": null, "macros": [["LIMIT2", "LIMIT2 50000000"]], "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 882923266083245737, "ast_class": "ImplicitCastExpr", "random": 0.012597504074389088, "src_text": "(|a23|)", "unbound_vals": [["(|a23|)", 66]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 6285590285823913467, "ast_class": "ImplicitCastExpr", "random": 0.012624449096122148, "src_text": "(|ans|)", "unbound_vals": [["(|ans|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 1393407084368516298, "ast_class": "CallExpr", "random": 0.012634106059794536, "src_text": "(|f|)((|n|) * (|n|))", "unbound_vals": [["(|n|)", 1]], "includes": [], "unbound_funs": [["(|f|)", false, false, 1]], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -2756307429626897846, "ast_class": "ArraySubscriptExpr", "random": 0.01265649884319997, "src_text": "(|rad|)[(|i|)]", "unbound_vals": [["(|rad|)", 1], ["(|i|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": null, "hash": 3016442166884955513, "ast_class": "ReturnStmt", "random": 0.012657411244646477, "src_text": "return (|res|)", "unbound_vals": [["(|res|)", 0]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -4288901480546060796, "ast_class": "ImplicitCastExpr", "random": 0.012671251079385826, "src_text": "854", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -6921168354200236938, "ast_class": "BinaryOperator", "random": 0.012686855313559509, "src_text": "100 * (|count|) / (|i|)", "unbound_vals": [["(|i|)", 1], ["(|count|)", 1]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 6624133807617258579, "ast_class": "BinaryOperator", "random": 0.012706594366594937, "src_text": "(|a0|) +\n                                                                                                 (|a1|) +\n                                                                                                 (|a2|) +\n                                                                                                 (|a3|) +\n                                                                                                 (|a4|) +\n                                                                                                 (|a5|) +\n                                                                                                 (|a6|) +\n                                                                                                 (|a7|) +\n                                                                                                 (|a8|) +\n                                                                                                 (|a9|) +\n                                                                                                 (|a10|) +\n                                                                                                 (|a11|) +\n                                                                                                 (|a12|) +\n                                                                                                 (|a13|) +\n                                                                                                 (|a14|) +\n                                                                                                 (|a15|) +\n                                                                                                 (|a16|) +\n                                                                                                 (|a17|) +\n                                                                                                 (|a18|) +\n                                                                                                 (|a19|) +\n                                                                                                 (|a20|) +\n                                                                                                 (|a21|)", "unbound_vals": [["(|a0|)", 43], ["(|a1|)", 43], ["(|a2|)", 43], ["(|a3|)", 43], ["(|a4|)", 43], ["(|a5|)", 43], ["(|a6|)", 43], ["(|a7|)", 43], ["(|a8|)", 43], ["(|a9|)", 43], ["(|a10|)", 43], ["(|a11|)", 43], ["(|a12|)", 43], ["(|a13|)", 43], ["(|a14|)", 43], ["(|a15|)", 43], ["(|a16|)", 43], ["(|a17|)", 43], ["(|a18|)", 43], ["(|a19|)", 43], ["(|a20|)", 43], ["(|a21|)", 43]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 6062879582478433598, "ast_class": "CompoundAssignOperator", "random": 0.012724047952567652, "src_text": "(|k|) += (|p|)", "unbound_vals": [["(|k|)", 2], ["(|p|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": true, "binary_contents": null, "hash": -5164298187590986624, "ast_class": "DeclStmt", "random": 0.012726472041930115, "src_text": "unsigned int i, k", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": [6059612999785877620], "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": -3614346425252055440, "ast_class": "BinaryOperator", "random": 0.01273857986498006, "src_text": "(|a|)[(|i|)] = 1", "unbound_vals": [["(|a|)", 2], ["(|i|)", 2]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": 1901277897626872164, "ast_class": "IntegerLiteral", "random": 0.012755281364638549, "src_text": "82", "unbound_vals": null, "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 1218828948251972312, "ast_class": "ImplicitCastExpr", "random": 0.012755458497107797, "src_text": "2 * (|sum|)", "unbound_vals": [["(|sum|)", 2]], "includes": null, "unbound_funs": null, "macros": null, "disasm": null, "types": null, "is_decl": null},
{"full_stmt": false, "binary_contents": null, "hash": 464033030985218466, "ast_class": "ImplicitCastExpr", "random": 0.012771993609417942, "src_text": "(|a60|)", "unbound_vals": [["(|a60|)", 82]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": false, "binary_contents": null, "hash": -9163051189069303055, "ast_class": "BinaryOperator", "random": 0.012774468269222572, "src_text": "(|a0|) + (|a1|) +\n                                                                      (|a2|) + (|a3|) +\n                                                                      (|a4|) + (|a5|) +\n                                                                      (|a6|) + (|a7|) +\n                                                                      (|a8|) + (|a9|) +\n                                                                      (|a10|) +\n                                                                      (|a11|) +\n                                                                      (|a12|) +\n                                                                      (|a13|) +\n                                                                      (|a14|) +\n                                                                      (|a15|) +\n                                                                      (|a16|) +\n                                                                      (|a17|) +\n                                                                      (|a18|)", "unbound_vals": [["(|a0|)", 29], ["(|a1|)", 29], ["(|a2|)", 29], ["(|a3|)", 29], ["(|a4|)", 29], ["(|a5|)", 29], ["(|a6|)", 29], ["(|a7|)", 29], ["(|a8|)", 29], ["(|a9|)", 29], ["(|a10|)", 29], ["(|a11|)", 29], ["(|a12|)", 29], ["(|a13|)", 29], ["(|a14|)", 29], ["(|a15|)", 29], ["(|a16|)", 29], ["(|a17|)", 29], ["(|a18|)", 29]], "includes": [], "unbound_funs": [], "macros": [], "disasm": null, "types": [], "is_decl": false},
{"full_stmt": true, "binary_contents": "c7 05 3c a0 04 08 00 00 00 00", "hash": 8689109276296836942, "ast_class": "BinaryOperator", "random": 0.01285557170908802, "src_text": "(|co|) = 0", "unbound_vals": [["(|co|)", 3]], "includes": null, "unbound_funs": null, "macros": null, "disasm": "((:MOVL 0 134520892))", "types": null, "is_decl": null},
{"decl": "typedef int bf_t;", "hash": -9163640590133430249, "reqs": [-5849325953548989793]},
{"decl": "struct s {\n  unsigned int lpf;    // least prime factor\n  unsigned short n;    // number of copies of lpf\n  unsigned short rem;  // number of factors when divided by lpf^n\n};", "hash": -9132024407105021998, "reqs": [6059612999785877620, -5680734546461692154, -1272965151017857640]},
{"decl": "typedef unsigned uint32;", "hash": -9070725133094211122, "reqs": [6059612999785877620]},
{"decl": "typedef struct rootfrac rootfrac;", "hash": -8887145573021951232, "reqs": [-8597442654147082898]},
{"decl": "typedef unsigned int Uint32;", "hash": -8621894587257018691, "reqs": [6059612999785877620]},
{"decl": "struct rootfrac { int ip, rp, den; };", "hash": -8597442654147082898, "reqs": [-5849325953548989793, -3542963277648381506]},
{"decl": "struct node_t {\n  int val;\n  int cost;\n  node_t *right;\n  node_t *down;\n  node_t *parent;\n};", "hash": -8561535418045832662, "reqs": [6463480361363407886, -5849325953548989793, -3231139646120904411]},
{"decl": "typedef unsigned long int number;", "hash": -8522033527339238834, "reqs": [-4865021300304785594]},
{"decl": "struct { int n, rad; };", "hash": -8506583664335741734, "reqs": [-5849325953548989793]},
{"decl": "union\n      {\n\tlong int ru_msgsnd;\n\t__syscall_slong_t __ru_msgsnd_word;\n      };", "hash": -8415119667553067723, "reqs": [-6857659793473511817, -4113174766330690709]},
{"decl": "union\n      {\n\tlong int ru_nswap;\n\t__syscall_slong_t __ru_nswap_word;\n      };", "hash": -8306658728516076147, "reqs": [-6857659793473511817, -4113174766330690709]},
{"decl": "typedef long unsigned int number;", "hash": -8250526203272045966, "reqs": [-4865021300304785594]},
{"decl": "struct {\n  Coordinate PointA;\n  Coordinate PointB;\n  Coordinate PointC;\n};", "hash": -8244971482564843617, "reqs": [-4999839642757521288]},
{"decl": "typedef long unsigned int number;", "hash": -8065757705240158186, "reqs": [-4865021300304785594]},
{"decl": "union\n      {\n\tlong int ru_majflt;\n\t__syscall_slong_t __ru_majflt_word;\n      };", "hash": -7930628703629190915, "reqs": [-6857659793473511817, -4113174766330690709]},
{"decl": "typedef struct {\n  Coordinate PointA;\n  Coordinate PointB;\n  Coordinate PointC;\n} Triangle;", "hash": -7851377172017515681, "reqs": [-8244971482564843617]},
{"decl": "struct prime;", "hash": -7773805529869150190, "reqs": []},
{"decl": "struct prime;", "hash": -7773805529869150189, "reqs": []},
{"decl": "struct t { int num, count; };", "hash": -7377386254340114286, "reqs": [-5849325953548989793, -884411012245497347]},
{"decl": "struct num {\n  int len;\n\n  /* Digits stored in reverse order i.e. lowest first. */\n  int digits[MAXDIGITS];\n};", "hash": -7325891900167514875, "reqs": [-5849325953548989793, -927005089128639336]},
{"decl": "union\n      {\n\tlong int ru_nsignals;\n\t__syscall_slong_t __ru_nsignals_word;\n      };", "hash": -7279805166904574219, "reqs": [-6857659793473511817, -4113174766330690709]},
{"decl": "struct timer {\n  clock_t t;\n  timer() {\n    t = clock();\n  }\n  ~timer() {\n    printf(\"runtime %.3f secs\\n\", getTime());\n  }\n  double getTime() {\n    return ((double)clock() - (double)t) / (double)CLOCKS_PER_SEC;\n  }\n};", "hash": -7216832105039044141, "reqs": [-2520878625904140871, -1998842923834303499]},
{"decl": "struct ch;", "hash": -7024598402125829171, "reqs": []},
{"decl": "struct ch;", "hash": -7024598402125829170, "reqs": []},
{"decl": "typedef struct StructPartition Partition;", "hash": -6954419014172583256, "reqs": [3353228452121716542]},
{"decl": "typedef unsigned int UINT;", "hash": -6907056765200120000, "reqs": [6059612999785877620]},
{"decl": "struct round {\n  int letter;\n  struct round *previous;\n  struct round *next;\n};", "hash": -6906316399315657008, "reqs": [3087906059214601769, -5849325953548989793]},
{"decl": "typedef unsigned char Uint8;", "hash": -6555069043440948161, "reqs": [-7505413667825242643]},
{"decl": "struct SPrimeSieve;", "hash": -6127510574121407769, "reqs": []},
{"decl": "typedef unsigned long long ull;", "hash": -6101506103673087578, "reqs": [3456822550903822590]},
{"decl": "typedef unsigned long long u;", "hash": -5926351236391496716, "reqs": [3456822550903822590]},
{"decl": "typedef struct {\n  Coordinate PointA;\n  Coordinate PointB;\n  Coordinate PointC;\n} Triangle;", "hash": -5712694650517264291, "reqs": [-8244971482564843617]},
{"decl": "union load;", "hash": -5707592313359065890, "reqs": []},
{"decl": "union load;", "hash": -5707592313359065889, "reqs": []},
{"decl": "struct my3n {\n  double s1, s2, sl, ds;\n};", "hash": -5698234078718222848, "reqs": [-5685203986829004219, -4605258830889951363]},
{"decl": "struct my3n;", "hash": -5685203986829004219, "reqs": []},
{"decl": "struct s;", "hash": -5680734546461692155, "reqs": null},
{"decl": "struct s;", "hash": -5680734546461692154, "reqs": null},
{"decl": "typedef unsigned uint32;", "hash": -5458929180109949223, "reqs": [6059612999785877620]},
{"decl": "union\n      {\n\tlong int ru_isrss;\n\t __syscall_slong_t __ru_isrss_word;\n      };", "hash": -5410830253878024204, "reqs": [-6857659793473511817, -4113174766330690709]},
{"decl": "typedef struct t node;", "hash": -5273948605314061332, "reqs": [-7377386254340114286]},
{"decl": "typedef unsigned long long uint64_t;", "hash": -5070859295806003292, "reqs": [3456822550903822590]},
{"decl": "IntL**", "hash": -5025477631336618667, "reqs": [4240316478942263123]},
{"decl": "typedef struct {\n  int x;\n  int y;\n} Coordinate;", "hash": -4999839642757521288, "reqs": [8387132467900628235]},
{"decl": "struct prime {\n    int number;\n    struct prime *nextPrime;\n  };", "hash": -4816909240383868309, "reqs": [-7773805529869150190, -5849325953548989793]},
{"decl": "typedef unsigned int uint;", "hash": -4790325243296778081, "reqs": [6059612999785877620]},
{"decl": "typedef unsigned uint32;", "hash": -4675032405669991964, "reqs": [6059612999785877620]},
{"decl": "struct digit;", "hash": -4636641458736884994, "reqs": null},
{"decl": "struct digit {\n  int teen;\n  int tens;\n  int ones;\n};", "hash": -4474405511979512886, "reqs": [-5849325953548989793, -4636641458736884994]},
{"decl": "struct a {\n  char pn;\n  char s[10];\n  char np;\n  char pl;\n  unsigned int ind;\n};", "hash": -4288912907522472047, "reqs": [342363981814211588, 2480603137844839103, 6059612999785877620]},
{"decl": "struct {\n  unsigned short pr;\n  unsigned short ex;\n};", "hash": -4187105439853755113, "reqs": [-1272965151017857640]},
{"decl": "union\n      {\n\tlong int ru_oublock;\n\t__syscall_slong_t __ru_oublock_word;\n      };", "hash": -3951635316322344562, "reqs": [-6857659793473511817, -4113174766330690709]},
{"decl": "typedef long long LL;", "hash": -3939253349685167004, "reqs": [-6252000326173323660]},
{"decl": "struct {\n  int numerator;\n  int denominator;\n};", "hash": -3916388791794455504, "reqs": [-5849325953548989793]},
{"decl": "struct rusage\n  {\n    /* Total amount of user time used.  */\n    struct timeval ru_utime;\n    /* Total amount of system time used.  */\n    struct timeval ru_stime;\n    /* Maximum resident set size (in kilobytes).  */\n    __extension__ union\n      {\n\tlong int ru_maxrss;\n\t__syscall_slong_t __ru_maxrss_word;\n      };\n    /* Amount of sharing of text segment memory\n       with other processes (kilobyte-seconds).  */\n    /* Maximum resident set size (in kilobytes).  */\n    __extension__ union\n      {\n\tlong int ru_ixrss;\n\t__syscall_slong_t __ru_ixrss_word;\n      };\n    /* Amount of data segment memory used (kilobyte-seconds).  */\n    __extension__ union\n      {\n\tlong int ru_idrss;\n\t__syscall_slong_t __ru_idrss_word;\n      };\n    /* Amount of stack memory used (kilobyte-seconds).  */\n    __extension__ union\n      {\n\tlong int ru_isrss;\n\t __syscall_slong_t __ru_isrss_word;\n      };\n    /* Number of soft page faults (i.e. those serviced by reclaiming\n       a page from the list of pages awaiting reallocation.  */\n    __extension__ union\n      {\n\tlong int ru_minflt;\n\t__syscall_slong_t __ru_minflt_word;\n      };\n    /* Number of hard page faults (i.e. those that required I/O).  */\n    __extension__ union\n      {\n\tlong int ru_majflt;\n\t__syscall_slong_t __ru_majflt_word;\n      };\n    /* Number of times a process was swapped out of physical memory.  */\n    __extension__ union\n      {\n\tlong int ru_nswap;\n\t__syscall_slong_t __ru_nswap_word;\n      };\n    /* Number of input operations via the file system.  Note: This\n       and `ru_oublock' do not include operations with the cache.  */\n    __extension__ union\n      {\n\tlong int ru_inblock;\n\t__syscall_slong_t __ru_inblock_word;\n      };\n    /* Number of output operations via the file system.  */\n    __extension__ union\n      {\n\tlong int ru_oublock;\n\t__syscall_slong_t __ru_oublock_word;\n      };\n    /* Number of IPC messages sent.  */\n    __extension__ union\n      {\n\tlong int ru_msgsnd;\n\t__syscall_slong_t __ru_msgsnd_word;\n      };\n    /* Number of IPC messages received.  */\n    __extension__ union\n      {\n\tlong int ru_msgrcv;\n\t__syscall_slong_t __ru_msgrcv_word;\n      };\n    /* Number of signals delivered.  */\n    __extension__ union\n      {\n\tlong int ru_nsignals;\n\t__syscall_slong_t __ru_nsignals_word;\n      };\n    /* Number of voluntary context switches, i.e. because the process\n       gave up the process before it had to (usually to wait for some\n       resource to be available).  */\n    __extension__ union\n      {\n\tlong int ru_nvcsw;\n\t__syscall_slong_t __ru_nvcsw_word;\n      };\n    /* Number of involuntary context switches, i.e. a higher priority process\n       became runnable or the current process used up its time slice.  */\n    __extension__ union\n      {\n\tlong int ru_nivcsw;\n\t__syscall_slong_t __ru_nivcsw_word;\n      };\n  };", "hash": -3865172650719615132, "reqs": [1515055887013608481, 2346859116988713462, 3841038378773898487, 5083272730819096241, 5772397429248166854, 6565013492135316272, 6985807750479243134, 7237924114842676803, -8415119667553067723, -8306658728516076147, -7930628703629190915, -7279805166904574219, -5410830253878024204, -3951635316322344562, -3086100556514307713, -709232427657074074]},
{"decl": "char**", "hash": -3837621163332326337, "reqs": [342363981814211589]},
{"decl": "typedef unsigned char uint8_t;", "hash": -3826506522952203152, "reqs": [-7505413667825242643]},
{"decl": "struct rootfrac;", "hash": -3542963277648381506, "reqs": []},
{"decl": "typedef unsigned int Uint32;", "hash": -3501974748390366481, "reqs": [6059612999785877620]},
{"decl": "struct StructPartition;", "hash": -3419017302699453318, "reqs": []},
{"decl": "typedef struct node_t node_t;", "hash": -3231139646120904411, "reqs": [6463480361363407886]},
{"decl": "union\n      {\n\tlong int ru_nivcsw;\n\t__syscall_slong_t __ru_nivcsw_word;\n      };", "hash": -3086100556514307713, "reqs": [-6857659793473511817, -4113174766330690709]},
{"decl": "typedef struct num NUMBER;", "hash": -3032083210371887434, "reqs": [-7325891900167514875]},
{"decl": "typedef struct s_node node;", "hash": -2794258727913195079, "reqs": [7884480872492156496]},
{"decl": "typedef unsigned char Uint8;", "hash": -2786547191121505964, "reqs": [-7505413667825242643]},
{"decl": "typedef struct num NUMBER;", "hash": -2754023621212414361, "reqs": [-7325891900167514875]},
{"decl": "typedef unsigned int uint32_t;", "hash": -2322467300503926035, "reqs": [6059612999785877620]},
{"decl": "typedef struct { int n, rad; } el;", "hash": -2227369786369857513, "reqs": [-8506583664335741734]},
{"decl": "struct conf {\n  int start, count;\n  int *fact;\n};", "hash": -2204864161924294716, "reqs": [3272865548831104022, -5849325953548989793]},
{"decl": "typedef struct {\n  Coordinate PointA;\n  Coordinate PointB;\n  Coordinate PointC;\n} Triangle;", "hash": -2091470727857393204, "reqs": [-8244971482564843617]},
{"decl": "struct _IO_FILE {\n  int _flags;\t\t/* High-order word is _IO_MAGIC; rest is flags. */\n#define _IO_file_flags _flags\n\n  /* The following pointers correspond to the C++ streambuf protocol. */\n  /* Note:  Tk uses the _IO_read_ptr and _IO_read_end fields directly. */\n  char* _IO_read_ptr;\t/* Current read pointer */\n  char* _IO_read_end;\t/* End of get area. */\n  char* _IO_read_base;\t/* Start of putback+get area. */\n  char* _IO_write_base;\t/* Start of put area. */\n  char* _IO_write_ptr;\t/* Current put pointer. */\n  char* _IO_write_end;\t/* End of put area. */\n  char* _IO_buf_base;\t/* Start of reserve area. */\n  char* _IO_buf_end;\t/* End of reserve area. */\n  /* The following fields are used to support backing up and undo. */\n  char *_IO_save_base; /* Pointer to start of non-current get area. */\n  char *_IO_backup_base;  /* Pointer to first valid character of backup area */\n  char *_IO_save_end; /* Pointer to end of non-current get area. */\n\n  struct _IO_marker *_markers;\n\n  struct _IO_FILE *_chain;\n\n  int _fileno;\n#if 0\n  int _blksize;\n#else\n  int _flags2;\n#endif\n  _IO_off_t _old_offset; /* This used to be _offset but it's too small.  */\n\n#define __HAVE_COLUMN /* temporary */\n  /* 1+column number of pbase(); 0 is unknown. */\n  unsigned short _cur_column;\n  signed char _vtable_offset;\n  char _shortbuf[1];\n\n  /*  char* _save_gptr;  char* _save_egptr; */\n\n  _IO_lock_t *_lock;\n#ifdef _IO_USE_OLD_IO_FILE\n};\n\nstruct _IO_FILE_complete\n{\n  struct _IO_FILE _file;\n#endif\n#if defined _G_IO_IO_FILE_VERSION && _G_IO_IO_FILE_VERSION == 0x20001\n  _IO_off64_t _offset;\n# if defined _LIBC || defined _GLIBCPP_USE_WCHAR_T\n  /* Wide character stream stuff.  */\n  struct _IO_codecvt *_codecvt;\n  struct _IO_wide_data *_wide_data;\n  struct _IO_FILE *_freeres_list;\n  void *_freeres_buf;\n  size_t _freeres_size;\n# else\n  void *__pad1;\n  void *__pad2;\n  void *__pad3;\n  void *__pad4;\n  size_t __pad5;\n# endif\n  int _mode;\n  /* Make sure we don't get into trouble again.  */\n  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];\n#endif\n};", "hash": -2089167067535736131, "reqs": [342363981814211589, 574959233312179705, 2457047220935401525, 6658648549494590982, 8160496450740803631, 8568190033260874198, -6534947291467637091, -6220008062850799974, -5849325953548989793, -1921527538187515242, -1272965151017857640]},
{"decl": "struct fraction {\n  char nu[200];\n  char dino[200];\n};", "hash": -2051089457366902342, "reqs": [5753727017960068073, 7416799273931929923]},
{"decl": "struct timer;", "hash": -1998842923834303499, "reqs": []},
{"decl": "struct digit {\n  int teen;\n  int tens;\n  int ones;\n};", "hash": -1933582561747414285, "reqs": [2083064167201169635, -5849325953548989793]},
{"decl": "struct _IO_FILE;", "hash": -1921527538187515242, "reqs": null},
{"decl": "struct vector;", "hash": -1765876353529261540, "reqs": null},
{"decl": "struct vector;", "hash": -1765876353529261539, "reqs": null},
{"decl": "struct tms\n  {\n    clock_t tms_utime;\t\t/* User CPU time.  */\n    clock_t tms_stime;\t\t/* System CPU time.  */\n\n    clock_t tms_cutime;\t\t/* User CPU time of dead children.  */\n    clock_t tms_cstime;\t\t/* System CPU time of dead children.  */\n  };", "hash": -1747586140021028866, "reqs": [-2520878625904140871, -903814015389749566]},
{"decl": "typedef unsigned long ulong;", "hash": -1499188905359281239, "reqs": [-4865021300304785594]},
{"decl": "struct timeval\n  {\n    __time_t tv_sec;\t\t/* Seconds.  */\n    __suseconds_t tv_usec;\t/* Microseconds.  */\n  };", "hash": -1316734509911868917, "reqs": [4577147229286939905, 5571686755532672816, -5717163929895735812]},
{"decl": "struct hash_list {\n  struct hash_list* link;\n  int count;\n  int n[NPERM];\n  long long int hash;\n};", "hash": -1284459838204199513, "reqs": [-6252000326173323660, -5849325953548989793, -205900059819275605]},
{"decl": "struct s_node {\n  uint64_t powers[N];\n  unsigned num;\n  struct s_node *children[10];\n  struct s_node *nextmatch;\n};", "hash": -951458097357863463, "reqs": [1194129683126681690, 3669875340168232121, 6059612999785877620]},
{"decl": "struct num;", "hash": -927005089128639336, "reqs": []},
{"decl": "struct tms;", "hash": -903814015389749566, "reqs": []},
{"decl": "struct t;", "hash": -884411012245497347, "reqs": []},
{"decl": "struct ch {\n  int sum;\n\n  ch() : sum(-1) {\n  }\n};", "hash": -767433046600904114, "reqs": [-7024598402125829171, -5849325953548989793]},
{"decl": "union\n      {\n\tlong int ru_maxrss;\n\t__syscall_slong_t __ru_maxrss_word;\n      };", "hash": -709232427657074074, "reqs": [-6857659793473511817, -4113174766330690709]},
{"decl": "struct ch;", "hash": -477820061245555662, "reqs": []},
{"decl": "typedef unsigned char Uint8;", "hash": -320777000491547389, "reqs": [-7505413667825242643]},
{"decl": "struct hash_list;", "hash": -205900059819275605, "reqs": []},
{"decl": "struct hash_list;", "hash": -205900059819275604, "reqs": []},
{"decl": "struct { int x, y; };", "hash": -2447403458197300, "reqs": [-5849325953548989793]},
{"decl": "struct a {\n  char pn;\n  char s[10];\n  char np;\n  char pl;\n  unsigned int ind;\n};", "hash": 251094860609850405, "reqs": [342363981814211588, 4496859118774847302, 6059612999785877620]},
{"decl": "typedef unsigned int uint;", "hash": 334785519824499072, "reqs": [6059612999785877620]},
{"decl": "struct ch {\n  int sum;\n\n  ch() : sum(-1) {\n  }\n};", "hash": 363120468699686282, "reqs": [-7024598402125829170, -5849325953548989793]},
{"decl": "typedef struct {\n  int numerator;\n  int denominator;\n} Fraction;", "hash": 860555065149087415, "reqs": [-3916388791794455504]},
{"decl": "typedef struct StructPartition Partition;", "hash": 1333252003974211826, "reqs": [3353228452121716542]},
{"decl": "union\n      {\n\tlong int ru_nvcsw;\n\t__syscall_slong_t __ru_nvcsw_word;\n      };", "hash": 1515055887013608481, "reqs": [-6857659793473511817, -4113174766330690709]},
{"decl": "typedef __int64 bigint;", "hash": 1633024752095291632, "reqs": [-5529357556018609952]},
{"decl": "typedef __int64 int64;", "hash": 1653779482531720338, "reqs": [-5529357556018609952]},
{"decl": "typedef struct { int x, y; } Point;", "hash": 1727615149621752272, "reqs": [-2447403458197300]},
{"decl": "typedef unsigned char uint8_t;", "hash": 1822514954735648170, "reqs": [-7505413667825242643]},
{"decl": "struct tm\n{\n  int tm_sec;\t\t\t/* Seconds.\t[0-60] (1 leap second) */\n  int tm_min;\t\t\t/* Minutes.\t[0-59] */\n  int tm_hour;\t\t\t/* Hours.\t[0-23] */\n  int tm_mday;\t\t\t/* Day.\t\t[1-31] */\n  int tm_mon;\t\t\t/* Month.\t[0-11] */\n  int tm_year;\t\t\t/* Year\t- 1900.  */\n  int tm_wday;\t\t\t/* Day of week.\t[0-6] */\n  int tm_yday;\t\t\t/* Days in year.[0-365]\t*/\n  int tm_isdst;\t\t\t/* DST.\t\t[-1/0/1]*/\n\n# ifdef\t__USE_BSD\n  long int tm_gmtoff;\t\t/* Seconds east of UTC.  */\n  const char *tm_zone;\t\t/* Timezone abbreviation.  */\n# else\n  long int __tm_gmtoff;\t\t/* Seconds east of UTC.  */\n  const char *__tm_zone;\t/* Timezone abbreviation.  */\n# endif\n};", "hash": 1919004300773609557, "reqs": [342363981814211589, 5521831666095413911, -6857659793473511817, -5849325953548989793]},
{"decl": "round**", "hash": 1928493388986026592, "reqs": [7187275336003145214]},
{"decl": "typedef unsigned long long ull;", "hash": 2023555956566011283, "reqs": [3456822550903822590]},
{"decl": "struct bignum;", "hash": 2049500030727550752, "reqs": []},
{"decl": "struct digit;", "hash": 2083064167201169634, "reqs": null},
{"decl": "struct digit;", "hash": 2083064167201169635, "reqs": null},
{"decl": "typedef __int64 int64;", "hash": 2141994997517735427, "reqs": [-5849325953548989793]},
{"decl": "typedef struct {\n  unsigned short pr;\n  unsigned short ex;\n} Fact;", "hash": 2273046690783790894, "reqs": [-4187105439853755113]},
{"decl": "union\n      {\n\tlong int ru_inblock;\n\t__syscall_slong_t __ru_inblock_word;\n      };", "hash": 2346859116988713462, "reqs": [-6857659793473511817, -4113174766330690709]},
{"decl": "typedef long long int LLI;", "hash": 2360951977937269326, "reqs": [-6252000326173323660]},
{"decl": "struct a;", "hash": 2480603137844839103, "reqs": null},
{"decl": "typedef unsigned long int number;", "hash": 2513360273887713727, "reqs": [-4865021300304785594]},
{"decl": "typedef unsigned int number;", "hash": 2607351245507717402, "reqs": [6059612999785877620]},
{"decl": "struct a {\n  char pn;\n  char s[10];\n  char np;\n  char pl;\n  unsigned int ind;\n};", "hash": 2713125522997389253, "reqs": [342363981814211588, 4496859118774847303, 6059612999785877620]},
{"decl": "struct hash_list {\n  struct hash_list* link;\n  int count;\n  int n[NPERM];\n  long long int hash;\n};", "hash": 2827846712565111925, "reqs": [-6252000326173323660, -5849325953548989793, -205900059819275604]},
{"decl": "struct digit {\n  int teen;\n  int tens;\n  int ones;\n};", "hash": 2948341585210396946, "reqs": [2083064167201169634, -5849325953548989793]},
{"decl": "struct _IO_marker;", "hash": 2948831181088293393, "reqs": null},
{"decl": "struct round;", "hash": 3087906059214601769, "reqs": []},
{"decl": "struct round;", "hash": 3087906059214601770, "reqs": []},
{"decl": "typedef struct {\n  unsigned short pr;\n  unsigned short ex;\n} Fact;", "hash": 3209110057725541529, "reqs": [-4187105439853755113]},
{"decl": "struct conf;", "hash": 3272865548831104022, "reqs": []},
{"decl": "struct s {\n  unsigned int lpf;    // least prime factor\n  unsigned short n;    // number of copies of lpf\n  unsigned short rem;  // number of factors when divided by lpf^n\n};", "hash": 3316863871468121128, "reqs": [6059612999785877620, -5680734546461692155, -1272965151017857640]},
{"decl": "struct StructPartition {\n  int *a;\n  int m, n, q, n0;\n};", "hash": 3353228452121716542, "reqs": [-5849325953548989792, -3419017302699453318]},
{"decl": "typedef struct node_t node_t;", "hash": 3396360702207051021, "reqs": [-8561535418045832662]},
{"decl": "typedef unsigned long long ull;", "hash": 3467960853396962224, "reqs": [3456822550903822590]},
{"decl": "struct vector {\n  ULL len;\n  ULL cur;\n  ULL* arr;\n};", "hash": 3566267725414603914, "reqs": [3456822550903822590, -1765876353529261540]},
{"decl": "struct vector {\n  ULL len;\n  ULL cur;\n  ULL* arr;\n};", "hash": 3579867047603717796, "reqs": [3456822550903822590, -1765876353529261539]},
{"decl": "typedef struct t node;", "hash": 3619504910915484775, "reqs": [-7377386254340114286]},
{"decl": "struct s_node;", "hash": 3669875340168232120, "reqs": []},
{"decl": "struct s_node;", "hash": 3669875340168232121, "reqs": []},
{"decl": "union\n      {\n\tlong int ru_minflt;\n\t__syscall_slong_t __ru_minflt_word;\n      };", "hash": 3841038378773898487, "reqs": [-6857659793473511817, -4113174766330690709]},
{"decl": "struct tm\n{\n  int tm_sec;\t\t\t/* Seconds.\t[0-60] (1 leap second) */\n  int tm_min;\t\t\t/* Minutes.\t[0-59] */\n  int tm_hour;\t\t\t/* Hours.\t[0-23] */\n  int tm_mday;\t\t\t/* Day.\t\t[1-31] */\n  int tm_mon;\t\t\t/* Month.\t[0-11] */\n  int tm_year;\t\t\t/* Year\t- 1900.  */\n  int tm_wday;\t\t\t/* Day of week.\t[0-6] */\n  int tm_yday;\t\t\t/* Days in year.[0-365]\t*/\n  int tm_isdst;\t\t\t/* DST.\t\t[-1/0/1]*/\n\n# ifdef\t__USE_BSD\n  long int tm_gmtoff;\t\t/* Seconds east of UTC.  */\n  const char *tm_zone;\t\t/* Timezone abbreviation.  */\n# else\n  long int __tm_gmtoff;\t\t/* Seconds east of UTC.  */\n  const char *__tm_zone;\t/* Timezone abbreviation.  */\n# endif\n};", "hash": 3919401846997893858, "reqs": [342363981814211589, 5521831666095413910, -6857659793473511817, -5849325953548989793]},
{"decl": "struct ch {\n  int sum;\n\n  ch() : sum(-1) {\n  }\n};", "hash": 4226538348778532079, "reqs": [-5849325953548989793, -477820061245555662]},
{"decl": "typedef long IntL;", "hash": 4240316478942263123, "reqs": [-6857659793473511817]},
{"decl": "uint64_t**", "hash": 4257602534005481918, "reqs": [-6218620455765809592]},
{"decl": "struct a;", "hash": 4496859118774847302, "reqs": null},
{"decl": "struct a;", "hash": 4496859118774847303, "reqs": null},
{"decl": "struct timeval;", "hash": 4577147229286939904, "reqs": []},
{"decl": "struct timeval;", "hash": 4577147229286939905, "reqs": []},
{"decl": "typedef unsigned long long Uint64;", "hash": 4676381697716610987, "reqs": [3456822550903822590]},
{"decl": "typedef struct {\n  unsigned short pr;\n  unsigned short ex;\n} Fact;", "hash": 4794669518788129890, "reqs": [-4187105439853755113]},
{"decl": "typedef struct node_t node_t;", "hash": 5066652933009292170, "reqs": [-8561535418045832662]},
{"decl": "typedef enum RESULT { KEEPGOING, BINGO, BUST } Result;", "hash": 5082167062380998024, "reqs": []},
{"decl": "union\n      {\n\tlong int ru_idrss;\n\t__syscall_slong_t __ru_idrss_word;\n      };", "hash": 5083272730819096241, "reqs": [-6857659793473511817, -4113174766330690709]},
{"decl": "typedef struct node_t node_t;", "hash": 5190023544661565813, "reqs": [-8561535418045832662]},
{"decl": "struct bignum {\n  int digits[1000];\n  int sig;\n  bignum() {\n    memset(digits, 0, 1000);\n    sig = 0;\n  }\n  void setnum(long long i) {\n    int j = 0;\n    while (i > 0) {\n      digits[j] = i % 10;\n      i /= 10;\n      j++;\n    }\n    sig = j;\n  }\n};", "hash": 5249477132668443304, "reqs": [2049500030727550752, 7945934781761998363]},
{"decl": "union load {\n  char str[8];\n  int64_t integer;\n};", "hash": 5469529219080554311, "reqs": [5753727017960068073, 6874588785751912797, -5707592313359065890]},
{"decl": "struct tm;", "hash": 5521831666095413910, "reqs": []},
{"decl": "struct tm;", "hash": 5521831666095413911, "reqs": []},
{"decl": "union\n      {\n\tlong int ru_ixrss;\n\t__syscall_slong_t __ru_ixrss_word;\n      };", "hash": 5772397429248166854, "reqs": [-6857659793473511817, -4113174766330690709]},
{"decl": "typedef struct conf conf;", "hash": 5873308107081099233, "reqs": [-2204864161924294716]},
{"decl": "typedef struct { int n, rad; } el;", "hash": 5953258789645446873, "reqs": [-8506583664335741734]},
{"decl": "typedef unsigned long __u32;", "hash": 5956231200228014569, "reqs": [-4865021300304785594]},
{"decl": "typedef unsigned long long uint64;", "hash": 6143043048305462427, "reqs": [3456822550903822590]},
{"decl": "union load {\n  char str[8];\n  int64_t integer;\n};", "hash": 6158318734261430881, "reqs": [5753727017960068073, 6874588785751912797, -5707592313359065889]},
{"decl": "typedef long dist_t;", "hash": 6302688631447699747, "reqs": [-6857659793473511817]},
{"decl": "typedef long long ll;", "hash": 6434389052610802234, "reqs": [-6252000326173323660]},
{"decl": "struct node_t;", "hash": 6463480361363407886, "reqs": []},
{"decl": "typedef unsigned long int number;", "hash": 6545315258791163151, "reqs": [-4865021300304785594]},
{"decl": "struct rusage;", "hash": 6565013492135316272, "reqs": []},
{"decl": "struct _IO_marker {\n  struct _IO_marker *_next;\n  struct _IO_FILE *_sbuf;\n  /* If _pos >= 0\n it points to _buf->Gbase()+_pos. FIXME comment */\n  /* if _pos < 0, it points to _buf->eBptr()+_pos. FIXME comment */\n  int _pos;\n#if 0\n    void set_streampos(streampos sp) { _spos = sp; }\n    void set_offset(int offset) { _pos = offset; _spos = (streampos)(-2); }\n  public:\n    streammarker(streambuf *sb);\n    ~streammarker();\n    int saving() { return  _spos == -2; }\n    int delta(streammarker&);\n    int delta();\n#endif\n};", "hash": 6658648549494590982, "reqs": [2948831181088293393, -5849325953548989793, -1921527538187515242]},
{"decl": "typedef struct t node;", "hash": 6677935913653737400, "reqs": [-7377386254340114286]},
{"decl": "int***", "hash": 6729581603308598030, "reqs": [8016512494289041354]},
{"decl": "struct fraction {\n  int n;\n  int d;\n};", "hash": 6784091500511334346, "reqs": [7416799273931929922, -5849325953548989793]},
{"decl": "struct timeval\n  {\n    __time_t tv_sec;\t\t/* Seconds.  */\n    __suseconds_t tv_usec;\t/* Microseconds.  */\n  };", "hash": 6985807750479243134, "reqs": [4577147229286939904, 5571686755532672816, -5717163929895735812]},
{"decl": "typedef long unsigned int number;", "hash": 7075063941333238849, "reqs": [-4865021300304785594]},
{"decl": "struct round {\n  int letter;\n  struct round *previous;\n  struct round *next;\n};", "hash": 7187275336003145214, "reqs": [3087906059214601770, -5849325953548989793]},
{"decl": "union\n      {\n\tlong int ru_msgrcv;\n\t__syscall_slong_t __ru_msgrcv_word;\n      };", "hash": 7237924114842676803, "reqs": [-6857659793473511817, -4113174766330690709]},
{"decl": "s_node**", "hash": 7281324766940364307, "reqs": [-951458097357863463]},
{"decl": "typedef unsigned long long ull;", "hash": 7296567683078210215, "reqs": [3456822550903822590]},
{"decl": "typedef struct node_t node_t;", "hash": 7399550931845382401, "reqs": [-8561535418045832662]},
{"decl": "struct fraction;", "hash": 7416799273931929922, "reqs": []},
{"decl": "struct fraction;", "hash": 7416799273931929923, "reqs": []},
{"decl": "typedef struct rootfrac rootfrac;", "hash": 7811596698485416303, "reqs": [-8597442654147082898]},
{"decl": "typedef unsigned long Bitmap;", "hash": 7869655727698273816, "reqs": [-4865021300304785594]},
{"decl": "struct s_node {\n  uint64_t powers[N];\n  unsigned num;\n  struct s_node *children[10];\n  struct s_node *nextmatch;\n};", "hash": 7884480872492156496, "reqs": [1194129683126681690, 3669875340168232120, 6059612999785877620]},
{"decl": "int**", "hash": 8016512494289041354, "reqs": [-5849325953548989792]},
{"decl": "uint32_t**", "hash": 8017695111862451089, "reqs": [7822317086334075806]},
{"decl": "typedef unsigned long ULONG;", "hash": 8159224817009462123, "reqs": [-4865021300304785594]},
{"decl": "struct fraction {\n  char nu[200];\n  char dino[200];\n};", "hash": 8309523529235709774, "reqs": [5753727017960068073, 7416799273931929922]},
{"decl": "struct {\n  int x;\n  int y;\n};", "hash": 8387132467900628235, "reqs": [-5849325953548989793]},
{"decl": "typedef struct { int n, rad; } el;", "hash": 8425540235265066266, "reqs": [-8506583664335741734]},
{"decl": "struct prime {\n    int number;\n    struct prime *nextPrime;\n  };", "hash": 8560537290929369948, "reqs": [-7773805529869150189, -5849325953548989793]},
{"decl": "typedef struct {\n  unsigned short pr;\n  unsigned short ex;\n} Fact;", "hash": 8587767076249822936, "reqs": [-4187105439853755113]},
{"decl": "typedef unsigned int uint;", "hash": 8650934602420073814, "reqs": [6059612999785877620]},
{"decl": "typedef struct rootfrac rootfrac;", "hash": 8738125857413163639, "reqs": [-8597442654147082898]},
{"decl": "typedef unsigned int Uint32;", "hash": 8815144814823975690, "reqs": [6059612999785877620]},
{"decl": "unsigned short**", "hash": 8830075745365468733, "reqs": [-1272965151017857639]},
{"decl": "typedef struct s_node node;", "hash": 8951285575651613295, "reqs": [7884480872492156496]},
{"decl": "struct SPrimeSieve;", "hash": 8976242542462191260, "reqs": [-6127510574121407769]},
{"decl": "typedef long IntL;", "hash": 8978253496257518932, "reqs": [-6857659793473511817]},
{"decl": "typedef long long LL;", "hash": 9149439539362275187, "reqs": [-6252000326173323660]},
{"decl": "typedef int TYPE;", "hash": 9153468388279064974, "reqs": [-5849325953548989793]},
{"decl": "typedef long long LL;", "hash": 9164639950206425500, "reqs": [-6252000326173323660]}
]
