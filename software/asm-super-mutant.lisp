;;;;
;;;; asm-super-mutant.lisp --- combine super-mutant functionalities
;;;; with asm-heap
;;;;

(in-package :software-evolution-library)
(in-readtable :curry-compose-reader-macros)

;;; asm-super-mutant software objects
;;; This will consist of an asm-heap, which is based on a file of assembly
;;; source code, and input/output specifications, as well as a function
;;; boundary deliminator which determines the target of the mutation algorithm.
;;;
;;; Performance testing will take advantage of the assembly functionality built
;;; into SBCL, so, for now, this software class is SBCL-specific.
;;;
(define-software asm-super-mutant (asm-heap super-mutant)
  ((input-spec :initarg :input-spec :accessor asm-super-mutant-input-spec)
   (output-spec :initarg :output-spec :accessor asm-super-mutant-output-spec))
  (:documentation
   "Combine super-mutant capabilities with asm-heap framework."))

(defstruct memory-spec
  addr   ;; 64-bit address as an int
  mask   ;; bit set for each live byte starting at addr,
         ;; low-bit (bit 0) = addr, bit 1 = addr+1, etc.
  bytes)  ;; 8 bytes starting at addr

(defstruct input-specification
  rax
  rbx
  rcx
  rdx
  rso
  rbp
  rsi
  rdi
  ymm   ;; array of 16 x 32 bytes
  mem)   ;; vector of memory-spec to indicate all memory inputs


#|
I'll go ahead and describe the format that is simplest for me (partly because 
I can pull most of the code to generate it from previous projects), but there 
are several things we might want to change to make it easier for you or to 
expand/restrict the search space. So let me know if you have any suggestions 
or concerns.

The format I'm about to describe is in ASCII, which I've found can make it 
easier to debug and understand the code generated by the search. Basically, we 
just specify the values of all registers, one per line, followed by the 
values of relevant memory addresses.

Each line describing a register would contain the name of the register, 
followed by the bytes in big-endian order. The register would be separated 
from the bytes by whitespace, but any other whitespace on the line would 
be purely cosmetic (to make it easier for humans to process) and should 
be ignored. For example, the line,

%rax    00 00 00 00 00 00 01 00

indicates that register rax should contain the value 256. For the 
general-purpose registers rax, rcx, rdx, rbx, rsp, rbp, rsi, rdi, r8, r9, 
r10, r11, r12, r13, r14, and r15, all eight bytes will be explicitly 
included on the line. For the SIMD registers ymm0-ymm15, all 32 bytes 
will be explicit.

Memory would be specified with one 8-byte long per line, consisting of
an address, followed by a mask indicating which bytes are live, followed 
by the bytes themselves. The mask would be separated from the address and 
bytes by whitespace, but again any other whitespace on the line should be 
ignored. For example, the line,

00007fbb c1fcf768   v v v v v v v .   2f 04 9c d8 3b 95 7c 00

indicates that the byte at address 0x7fbbc1fcf768 has value 0x2f, 
the byte at 0x7fbbc1fcf769 has value 0x04, and so forth. Note that bytes 
0x7fbbc1fcf768-0x7fbbc1fcf76e are live (indicated with "v") while 
0x7fbbc1fcf76f is not (indicated with ".").

-----

We will want to be careful about how we handle non-live/unspecified memory. 
At the beginning of the function, it's probably fine if any unspecified 
addresses have arbitrary values in them. But, since we want to make sure 
that the optimized function doesn't clobber the rest of the program's memory 
when we replace it, we probably want to enforce that the function only ever 
writes to addresses that are part of the output state. We can also give it
a "red zone" from %rsp to %rsp-128 where it can write, but that won't be 
live on exit.
  |#
  
(defun parse-input-file (input)
  (declare (ignorable input))
  "Need to implement"
  nil)
