;;;;
;;;; asm-super-mutant.lisp --- combine SUPER-MUTANT functionalities
;;;; with ASM-HEAP
;;;;

;;; ASM-SUPER-MUTANT software object
;;;
;;; This consists of:
;;;
;;; -The ASM-HEAP, which is typically based on a file of assembly
;;;  source code
;;;
;;; -Input/output specifications, in a specific file format as generated using
;;;  the Intel monitoring application and our Python scripts
;;;
;;; -Boundary deliminators which determines the target of the mutation
;;;  algorithm
;;;
;;; The ASM-SUPER-MUTANT object itself contains the whole original binary
;;; application (in assembler source format).
;;;
;;; Note that the struct INPUT-SPECIFICATION is a bit of a misnomer, as it is
;;; used here for both input specification and output specification (their
;;; formats are identical so we use the same struct for both).
;;;
;;; SUPER-MUTANT slots:
;;;   MUTANTS will contain a list of ASM-HEAP objects.
;;;   SUPER-SOFT caches a combined ASM-HEAP representing the output fitness
;;;   program.
;;;   PHENOME-RESULTS caches the results obtained from calling the PHENOME
;;;   method.
;;;

(in-package :software-evolution-library)
(in-readtable :curry-compose-reader-macros)

(define-software asm-super-mutant (asm-heap super-mutant)
  ((input-spec
    :initarg :input-spec
    :accessor input-spec
    :initform (make-array 0 :fill-pointer 0 :adjustable t)
    :documentation
      "Vector of INPUT-SPECIFICATION structs, one for each test case.") 
   (output-spec
    :initarg :output-spec
    :accessor output-spec
    :initform (make-array 0 :fill-pointer 0 :adjustable t)
    :documentation
    "Vector of INPUT-SPECIFICATION structs, one for each test case.")
   (target-start-index
    :initarg :target-start-index
    :accessor target-start-index
    :documentation "Integer index represents the first line of target code.")
   (target-end-index
    :initarg :target-end-index
    :accessor target-end-index
    :documentation "Intege index represents the last line of target code.")
   (target-lines
    :initarg :target-lines
    :accessor target-lines
    :documentation "Cache the lines of the target code, as they are used often.")
   (assembler
    :initarg :assembler
    :accessor assembler
    :initform "nasm"
    :documentation "Assembler to use for assembling.")
   (fitness-harness
    :initarg :fitness-harness
    :accessor fitness-harness
    :initform "./asm-super-mutant-fitness.c"
    :documentation "Pathname to the fitness harness file (C program source)"))
   (:documentation
   "Combine SUPER-MUTANT capabilities with ASM-HEAP framework."))

;;;
;;; all the SIMD register names start with 'y'
;;;
(defun simd-reg-p (name) (char= (elt name 0) #\y))

(defstruct memory-spec
  addr   ; 64-bit address as an int
  mask   ; bit set for each live byte starting at addr,
					; low-bit (bit 0) = addr,
                                        ; bit 1 = addr+1, etc.
  bytes) ; 8 bytes starting at addr

(defun bytes-to-string (ba)
  (format nil "~{ ~2,'0X~}" (concatenate 'list ba)))

(defmethod print-object ((mem memory-spec) stream)
  (format stream "~16,'0X: ~T~A ~A"
	  (memory-spec-addr mem)
	  (Memory-spec-mask mem)
	  (bytes-to-string (memory-spec-bytes mem))))

(defstruct reg-contents
  name     ; name of register (string) i.e. "rax", "ymm1", etc.
  value)   ; integer value (64 bits for gen. purpose, 256 bit for SIMD)

(defmethod print-object ((reg reg-contents) stream)
  (format stream "~4A: ~A" (reg-contents-name reg)
    (bytes-to-string (reg-contents-value reg))))

;;;
;;; This struct also is used to specify outputs.
;;;
(defstruct input-specification
  regs
  simd-regs 
  mem)   ;; vector of memory-spec to indicate all memory inputs

(defmethod print-object ((spec input-specification) stream)
  (print-unreadable-object (spec stream)
    (format
      stream
      "input-specification: ~D registers, ~D SIMD registers, ~D memory addrs"
      (length (input-specification-regs spec))
      (length (input-specification-simd-regs spec))
      (length (input-specification-mem spec)))))
#|
(defmethod print-object ((spec input-specification) stream)
  (iter (for reg in-vector (input-specification-regs spec))
	(print reg))
  (iter (for reg in-vector (input-specification-simd-regs spec))
	(print reg))
  (iter (for mem in-vector (input-specification-mem spec))
	(print mem)))
|#

#|
Jonathan's comments about the format:

The format I'm about to describe is in ASCII, which I've found can make it 
easier to debug and understand the code generated by the search. Basically, we 
just specify the values of all registers, one per line, followed by the 
values of relevant memory addresses.

Each line describing a register would contain the name of the register, 
followed by the bytes in big-endian order. The register would be separated 
from the bytes by whitespace, but any other whitespace on the line would 
be purely cosmetic (to make it easier for humans to process) and should 
be ignored. For example, the line,

%rax    00 00 00 00 00 00 01 00

indicates that register rax should contain the value 256. For the 
general-purpose registers rax, rcx, rdx, rbx, rsp, rbp, rsi, rdi, r8, r9, 
r10, r11, r12, r13, r14, and r15, all eight bytes will be explicitly 
included on the line. For the SIMD registers ymm0-ymm15, all 32 bytes 
will be explicit.

Memory would be specified with one 8-byte long per line, consisting of
an address, followed by a mask indicating which bytes are live, followed 
by the bytes themselves. The mask would be separated from the address and 
bytes by whitespace, but again any other whitespace on the line should be 
ignored. For example, the line,

00007fbb c1fcf768   v v v v v v v .   2f 04 9c d8 3b 95 7c 00

indicates that the byte at address 0x7fbbc1fcf768 has value 0x2f, 
the byte at 0x7fbbc1fcf769 has value 0x04, and so forth. Note that bytes 
0x7fbbc1fcf768-0x7fbbc1fcf76e are live (indicated with "v") while 
0x7fbbc1fcf76f is not (indicated with ".").
|#

;;; whitespace handling
;;;
(defun is-whitespace (c)
  (member c '(#\space #\linefeed #\newline #\tab #\page)))

(defun get-next-line (input)
  (let ((line (read-line input nil 'eof)))
    (if (stringp line)
	(trim-whitespace line))))  ;; returns nil if end-of-file

(defparameter *fitness-harness* "./asm-super-mutant-fitness.c")

;;;
;;; The string argument should consist only of hex digits (at least in the first
;;; num * 2 characters). The number argument is the number of bytes to parse.
;;; Returns a byte array.
;;;
(defun parse-bytes (num str)
  (let ((result (make-array num :element-type '(unsigned-byte 8))))
    (dotimes (i num)
      (setf (aref result i)
	    (+ (* (digit-char-p (char str (* i 2)) #x10) #x10)
	       (digit-char-p (char str (+ 1 (* i 2))) #x10))))
    result))


;;;
;;; Returns a 64-bit integer representing an address, and the line position
;;; immediately following the address. The address should be in the format:
;;;   xxxxxxxx xxxxxxxx
;;; (16 hex digits, with 8 digits + space + 8 digits = 17 chars)
;;;;
(defun parse-address (line pos)
  (let ((result 0))
    (dotimes (i 8)
      (setf result (+ (* result #x10)
		      (digit-char-p (char line (+ i pos)) #x10))))
    (dotimes (i 8)
      (setf result (+ (* result #x10)
		      (digit-char-p (char line (+ i 9 pos)) #x10))))
    (values result (+ pos 17))))

(defun parse-mem-spec (line pos)
  (multiple-value-bind (addr i)
      (parse-address line pos)
    (setf pos i)
    (iter (while (is-whitespace (char line pos))) (incf pos)) ; skip spaces
    (let ((b (make-array 8 :element-type 'bit)))
      (dotimes (i 8)
	(setf (bit b i)
	      (if (char= (char line pos) #\v) 1 0))
	(incf pos 2))
      (make-memory-spec :addr addr
			:mask b
			:bytes (parse-bytes 8
					    (remove #\space
						    (subseq line pos))))))) 

(defun parse-reg-spec (line pos)
  (let ((name               ; get the register name (string)
	 (do ((c (char line (incf pos))(char line (incf pos)))
	      (chars '()))
	     ((is-whitespace c)
	      (concatenate 'string (nreverse chars)))
	   (push c chars))))
    (if (simd-reg-p name)  ; was it a SIMD register?
        (make-reg-contents
	 :name name
	 :value (parse-bytes 32
			     (remove #\space (subseq line pos))))
	;; else a general-purpose register
	(make-reg-contents
	 :name name
	 :value (parse-bytes 8
			     (remove #\space (subseq line pos)))))))

(defun new-io-spec ()
  (make-input-specification
   :regs (make-array 16 :fill-pointer 0)
   :simd-regs (make-array 16 :fill-pointer 0)
   :mem (make-array 0 :fill-pointer 0 :adjustable t)))

(defun load-io-file (super-asm filename)
  "Load the file containing input and output state information"
  (let ((input-spec (new-io-spec))
	(output-spec (new-io-spec))
	(parsing-inputs t))
    (with-open-file (input filename :direction :input)
      (do ((line (get-next-line input) (get-next-line input))
	   (pos 0 0))
	  ((null line)
	   (when (> (length (input-specification-regs output-spec)) 0)
	         (vector-push-extend output-spec (output-spec super-asm))))
	(cond ((zerop (length line))) ; do nothing, empty line
	      ((search "Input data" line)
	       (when (> (length (input-specification-regs output-spec)) 0)
	         (vector-push-extend output-spec (output-spec super-asm))
	         (setf output-spec (new-io-spec)))
	       (setf parsing-inputs t))
	      ((search "Output data" line)
	       (vector-push-extend input-spec (input-spec super-asm))
	       (setf input-spec (new-io-spec))
	       (setf parsing-inputs nil))
	      ((char= (char line 0) #\%) ; register spec?
	       (let ((spec (parse-reg-spec line pos)))
		 (if (simd-reg-p (reg-contents-name spec))  ; SIMD register?
		     (vector-push
		       spec
		       (input-specification-simd-regs
		       (if parsing-inputs input-spec output-spec)))
		     ;; else a general-purpose register
		     (vector-push
		       spec
		       (input-specification-regs
		         (if parsing-inputs input-spec output-spec))))))
	      (t ; assume memory specification
	       (vector-push-extend
		 (parse-mem-spec line pos)
		   (input-specification-mem
		    (if parsing-inputs input-spec output-spec))))))))
  t)

;;;
;;; takes 8 bit mask and converts to 8-byte mask, with each
;;; 1-bit converted to 0xff to mask a full byte.
;;;
(defun create-byte-mask (bit-mask)
  (map 'vector (lambda (x)(if (zerop x) #x00 #xff)) bit-mask))

;;;
;;; assume bytes are in little-endian order
;;;
(defun bytes-to-qword (bytes)
  (let ((result 0))
    (iter (for i from 7 downto 0)
	  (setf result (+ (ash result 8) (aref bytes i))))
    result))

;;;
;;; Assume bytes are in big-endian order
;;;
(defun be-bytes-to-qword (bytes)
  (let ((result 0))
    (iter (for i from 0 to 7)
	  (setf result (+ (ash result 8) (aref bytes i))))
    result))

;;;
;;; reg is a string, naming the register i.e. "rax" or "r13".
;;; bytes is an 8-element byte array containing the 64-bit unsigned contents
;;; to be stored, in big-endian order
;;;
(defun load-reg (reg bytes)
  (format nil "mov qword ~A, 0x~X"
	  reg
	  (be-bytes-to-qword bytes)))

;;;
;;; reg is a string, naming the register i.e. "rax" or "r13".
;;; bytes is an 8-element byte array containing the 64-bit unsigned contents
;;; to be compared, in big-endian order
;;;
(defun comp-reg (reg bytes)
  (let ((label (gensym "reg_cmp_")))
    (list
      (format nil "push ~A" reg)
      (format nil "mov qword ~A, 0x~X"
	  reg
	  (be-bytes-to-qword bytes))
      (format nil "cmp qword ~A, [rsp]" reg)
      (format nil "pop ~A" reg)
      (format nil "je ~A" label)
      "mov rdi, qword [$stdout@@GLIBC_2.2.5]"
      "mov rsi, $error_reg_compare"
      (format nil "mov qword rdx, 0x~X" (be-bytes-to-qword bytes)) ; expected
      "call $fprintf wrt ..plt"
      (format nil "jmp $output_reg_comparison_failure")
      (format nil "~A:" label))))
  

;;;
;;; Initialize 8 bytes of memory, using the mask to init only specified bytes.
;;; Returns list of lines to do the initialization.
;;;
(defun init-mem (spec)
  (let ((addr (memory-spec-addr spec))
	(mask (memory-spec-mask spec))
	(bytes (memory-spec-bytes spec)))
    (if (equal mask #*11111111)  ;; we can ignore the mask
      (list
        (format nil "mov qword rax, 0x~X" (be-bytes-to-qword bytes))
        (format nil "mov qword rcx, 0x~X" addr)
        "mov qword [rcx], rax")	
      (list
        (format nil "mov qword rax, 0x~X" (be-bytes-to-qword bytes))
        (format nil "mov qword rbx, 0x~X"
		(be-bytes-to-qword (create-byte-mask mask)))
        (format nil "mov qword rcx, 0x~X" addr)
        "and rax, rbx"   ; mask off unwanted bytes of src
        "not rbx"        ; invert mask
        "and qword [rcx], rbx" ; mask off bytes which will be overwritten
        "or qword [rcx], rax"))))

;;;
;;; Initialize 8 bytes of memory, using the mask to init only specified bytes.
;;; Returns list of lines to do the initialization.
;;;
(defun comp-mem (spec)
  (let ((addr (memory-spec-addr spec))
	(mask (memory-spec-mask spec))
	(bytes (memory-spec-bytes spec))
	(label (gensym "$mem_cmp_")))
    (if (equal mask #*11111111)  ;; we can ignore the mask
	(list
	 (format nil "mov qword rax, 0x~X" (be-bytes-to-qword bytes))
	 (format nil "mov qword rcx, 0x~X" addr)
	 "cmp qword [rcx], rax"
	 (format nil "je ~A" label)
         (format nil "jmp $output_comparison_failure")
         (format nil "~A:" label))
	(list
	 (format nil "mov qword rax, 0x~X" (be-bytes-to-qword bytes))
	 (format nil "mov qword rbx, 0x~X"
		 (be-bytes-to-qword (create-byte-mask mask)))
	 (format nil "mov qword rcx, 0x~X" addr)
	 "mov qword rdx, [rcx]"
	 "and rax, rbx"   ; mask off unwanted bytes of src
	 "and rdx, rbx" ; mask off unwanted bytes of dest
	 "cmp rdx, rax"
	 (format nil "je ~A" label)
         (format nil "jmp $output_comparison_failure")
         (format nil "~A:" label)))))

;;;
;;; Return asm-heap containing the lines to set up the environment
;;; for a fitness test.
;;; Skip SIMD registers for now.
;;;
(defun init-env (asm-super)
  (let* ((input-spec (input-spec asm-super))
	 (reg-lines
	  (iterate
	    (for x in-vector (input-specification-regs input-spec))
	    (collect (load-reg (reg-contents-name x)(reg-contents-value x)))))
	 (mem-lines
	  (apply 'append
		 (iterate
	           (for x in-vector (input-specification-mem input-spec))
		   (collect (init-mem x)))))
	 (asm (make-instance 'asm-heap)))
    (setf (lines asm) (append mem-lines reg-lines))
    asm))

;;;
;;; Return an asm-heap containing the lines to check the resulting outputs.
;;; Skip SIMD registers for now.
;;;
(defun check-env (asm-super)
  (let* ((output-spec (output-spec asm-super))
	 (reg-lines
	  (apply 'append
		 (iterate
	           (for x in-vector (input-specification-regs output-spec))
	           (collect
		       (comp-reg (reg-contents-name x)
				 (reg-contents-value x))))))
	 (mem-lines
	  (apply 'append
		 (iterate
	           (for x in-vector (input-specification-mem output-spec))
		   (collect (comp-mem x)))))
	 (asm (make-instance 'asm-heap)))
    (setf (lines asm) (append reg-lines mem-lines))
    asm))

(defun target-function (asm-super start-addr end-addr)
  (let* ((genome (genome asm-super))
	 (start-index
	  (position start-addr genome
		    :key 'asm-line-info-address
		    :test (lambda (x y)(and y (= x y))))) ;; skip null address
	 (end-index
	  (position end-addr genome
		    :key 'asm-line-info-address
		    :start (if start-index start-index 0)
		    :test (lambda (x y)(and y (= x y))))))
    (setf (target-start-index asm-super) start-index)
    (setf (target-end-index asm-super) end-index)
    (setf (target-lines asm-super)
	  (if (and start-index end-index)
	      (subseq genome start-index (+ 1 end-index))
	      nil))))

(defun find-main-line (asm-super)
  (find "$main:" (genome asm-super) :key 'asm-line-info-text :test 'equal))

(defun find-main-line-position (asm-super)
  (position "$main:" (genome asm-super) :key 'asm-line-info-text :test 'equal))

;;;
;;; Look for any label in the text (string starting with $ and ending with : or
;;; white space) and add suffix text to end of label (should be something like
;;; "_variant_1"). Returns the result (does not modify passed text).
;;; Do not change labels which are used as data, i.e. referenced in non-branch
;;; instructions. For now--we will assume branch instructions are all
;;; ops which start with the letter "j".
;;;
(defun add-label-suffix (text suffix)
  (multiple-value-bind (start end register-match-begin register-match-end)
      (ppcre:scan "\\$\\w+" text)
    (declare (ignore register-match-begin register-match-end))
    (if (and (integerp start)
	     (integerp end)
	     (or (char= #\j (char (string-trim '(#\space #\tab) text) 0))
		 (char= #\$ (char (string-trim '(#\space #\tab) text) 0))))
	(concatenate 'string
		     (subseq text 0 end)
		     suffix
		     (subseq text end))
	text)))

;;;
;;; Insert prolog code at the beginning of the file.
;;;
(defun add-prolog (asm-super)
  (insert-new-lines
   asm-super
   (list
    "; -------------- Globals (exported) ---------------"
    "        global variant_table"
    "        global input_regs"
    "        global output_regs"
    "        global input_mem"
    "        global output_mem"
    "        global num_tests"
    "        global save_return_address"    ; save address to return to
    "        global result_return_address   ; keep track of what we found"
    ""
    "; -------------- Stack Vars ---------------"
    "        $is_even.var_4 equ -4"
    ""
    "; -------------- Stack --------------"
    "section .note.GNU-stack noalloc noexec nowrite progbits"
    ""
    "; ----------- Code & Data ------------"
    "section .text exec nowrite  align=16"	
    "      align 4")
   0))

;;;
;;; Replace a RET operation with:
;;;    	pop qword [result_return_address]
;;;	jmp qword [save_return_address]
;;;
;;; This accomplishes the same thing, but ensures that we will be returning
;;  to the correct address (in case stack is corrupted).
;;; It also caches the stack return value so the C harness can determine
;;; whether there was a problem with the stack.
;;;
;;; The passed argument is a vector of asm-line-info, and this returns
;;; a list of asm-line-info.
;;;
(defun handle-ret-ops (asm-lines)
  (let ((new-lines '()))
    (iter (for line in-vector asm-lines)
	  (if (eq (asm-line-info-opcode line) 'sel/asm::ret)
	      (progn
		(push (car (parse-asm-line
			    "        pop qword [result_return_address]"))
		      new-lines)
	        (push (car (parse-asm-line
			    "        jmp qword [save_return_address]"))
		      new-lines))
	      (push line new-lines)))
    (nreverse new-lines)))

;;; Append a variant function, defined by the name and
;;; lines of assembler code, 
;;;
(defun add-variant-func (asm-variant name lines)
  (let* ((suffix (format nil "_~A" name))
	 (localized-lines
	  (mapcar
	   (lambda (line)
	     (add-label-suffix line suffix))
	   lines)))
    (insert-new-lines
     asm-variant
     (append
      (list
       (format nil "~A:" name)  ; function name
       "        pop qword [save_return_address] ; save the return address"
       "        push qword [save_return_address]")
      (cdr localized-lines)   ; skip first line, the function name
      (list "ret"   ; probably redundant, already in lines
	    "align 4"))
     (length (genome asm-variant)))))

(defun format-reg-specs (io-spec)
  (iter (for reg-spec in-vector (input-specification-regs io-spec))
	(collect
	    (format nil "    dq 0x~16,'0X  ; ~A"
		(be-bytes-to-qword (reg-contents-value reg-spec))
		(reg-contents-name reg-spec)))))

;;;
;;; for each memory entry, add three qwords: address, data, mask.
;;; The mask is in the format (eg.): 0xff00000000000000
;;; (this means the high byte only is used)
;;; The list is terminated with an address of 0.
;;;
(defun format-mem-specs (io-spec)
  (let ((lines
	 (iter (for spec in-vector (input-specification-mem io-spec))
	       (collect
		   (let ((addr (memory-spec-addr spec))
			 (mask (memory-spec-mask spec))
			 (bytes (memory-spec-bytes spec)))
		     (format
		      nil
		      "    dq 0x~16,'0X~%    dq 0x~16,'0X~%    dq 0x~A~%"
		      addr
		      (be-bytes-to-qword bytes)
		      (apply 'concatenate 'string
			     (map 'list
				  (lambda (x)
				    (if (= x 1) "FF" "00"))
				  mask))))))))
    (append lines (list "    dq 0"))))    ; and with zero address

(defun add-variant-table (asm num-variants)
  (insert-new-lines
   asm
   (list
    ""
    ";;;  table of function pointers, 0-terminated"
    "variant_table:")
   (length (genome asm)))
  (dotimes (i num-variants)
    (insert-new-line
     asm
     (format nil "        dq variant_~D" i)
     (length (genome asm))))
  (insert-new-line asm "        dq 0" (length (genome asm))))

(defun format-reg-info (asm-variants spec-vec label)
  (insert-new-lines asm-variants (list "" label) (length (genome asm-variants)))
  (dotimes (i (length spec-vec))
    (insert-new-lines
     asm-variants
     (format-reg-specs (aref spec-vec i))
     (length (genome asm-variants)))
    (insert-new-line asm-variants "" (length (genome asm-variants)))))

(defun format-mem-info (asm-variants spec-vec label)
  (insert-new-lines asm-variants (list "" label) (length (genome asm-variants)))
  (dotimes (i (length spec-vec))
    (insert-new-lines
     asm-variants
     (format-mem-specs (aref spec-vec i))
     (length (genome asm-variants)))
    (insert-new-line asm-variants "" (length (genome asm-variants)))))

(defun add-return-address-vars (asm-variants)
  (insert-new-lines
   asm-variants
   (list
        ""
	"section .bss noexec write align=1"
        "        ; save address to return back to, in case the stack gets messed up"
        "        save_return_address: resb 8"
        "        ; save the address found on the stack (should normally be the same)"
        "        result_return_address: resb 8"
        "")
   (length (genome asm-variants))))
   
(defun add-io-tests (asm-super asm-variants)
  "Copy the i/o data from the asm-super into the asm-variants assembly file"
  (insert-new-lines
   asm-variants
   (list
      ""    
      ";;;  number of test cases"
      "num_tests:")
   (length (genome asm-variants)))
  (insert-new-line
   asm-variants
   (format nil "        dq ~d" (length (input-spec asm-super)))
   (length (genome asm-variants)))
  (format-reg-info asm-variants (input-spec asm-super) "input_regs:")
  (format-reg-info asm-variants (output-spec asm-super) "output_regs:")
  (format-mem-info asm-variants (input-spec asm-super) "input_mem:")
  (format-mem-info asm-variants (output-spec asm-super) "output_mem:"))
  
(defun generate-file (asm-super output-path number-of-variants)
  (let ((asm-variants (make-instance 'asm-heap)))
    (setf (lines asm-variants) (list))  ;; empty heap
    (add-prolog asm-variants)
    (let ((count 0))
      (dolist (v (mutants asm-super))
        (add-variant-func
          asm-variants
          (format nil "variant_~D" count)
	  (mapcar 'asm-line-info-text (handle-ret-ops (genome v))))
	(incf count)))
    (add-variant-table asm-variants number-of-variants)
    (add-io-tests asm-super asm-variants)
    (add-return-address-vars asm-variants)
    (setf (super-soft asm-super) asm-variants)  ;; cache the asm-heap
    (with-open-file (os output-path :direction :output :if-exists :supersede)
      (dolist (line (lines asm-variants))
	(format os "~A~%" line)))
    (format t "File ~A successfully created.~%" output-path)
    output-path))

(defun create-target (asm-super)
  "Returns an ASM-HEAP software object which contains only the target lines."
  (let ((asm (make-instance 'asm-heap)))
    (setf (lines asm)(map 'list 'asm-line-info-text (target-lines asm-super)))
    asm))

(defun create-variant-file (input-source io-file output-path
		    start-addr end-addr)
  (let ((asm-super
	 (from-file (make-instance 'asm-super-mutant) input-source)))
    (load-io-file asm-super io-file)
    (target-function asm-super start-addr end-addr) ; nlscan function
    (generate-file asm-super output-path 2)))

(defmethod phenome ((asm asm-super-mutant)
		    &key (bin (temp-file-name "out"))
		         (src (temp-file-name "asm")))
  "Create ASM file, assemble it, and link to create binary BIN."
  (let ((src (generate-file asm src (length (mutants asm))))) 
    (with-temp-file (obj "o")
      ;; Assemble.
      (multiple-value-bind (stdout stderr errno)
        (shell "~a -f elf64 -o ~a ~a" (assembler asm) obj src)
	(declare (ignorable stdout stderr))
        (if (zerop errno)
            ;; Link.
	    (multiple-value-bind (stdout stderr errno)
		(shell "clang -g -lrt -o ~a ~a ~a ~a"
		       bin
		       (fitness-harness asm)
		       obj
		       "/usr/lib/x86_64-linux-gnu/libpapi.so.5.4.3")
	      (setf (phenome-results asm)
		    (list bin errno stderr stdout src))
	      (values bin errno stderr stdout src)))))))

(defmethod test-fitness ((asm asm-super-mutant))
  "Create ASM file, assemble it, and link to create binary BIN."
  (with-temp-file (bin)
    (multiple-value-bind (bin-path errno stderr stdout src)
	(phenome asm :bin bin)
      (declare (ignorable errno stderr stdout src))
      ;; run the program
      (multiple-value-bind (stdout stderr errno)
	  (shell "~a" bin-path)
	(declare (ignorable stderr errno))
	(let ((test-results
	       (read-from-string
		(concatenate 'string "#(" stdout ")"))))
	  (if (zerop errno)
	      (let* ((num-tests (length (input-spec asm)))
		     (num-variants (/ (length test-results) num-tests))
		     (results '()))
		(dotimes (i num-variants)
		  (let ((variant-results
			 (subseq test-results
				 (* i num-tests) (* (+ i 1) num-tests))))
		    (setf (fitness (elt (mutants asm) i)) variant-results)
		    (push variant-results results)))
		(setf test-results (nreverse results))))
	  (setf (fitness asm) test-results)
	  test-results)))))		    

(defun add-simple-cut-variant (asm-super i)
  (let* ((orig (create-target asm-super))
         (variant (apply-mutation orig 
           (make-instance 'simple-cut :object orig :targets i))))
    (push variant (mutants asm-super))))

;;;
;;; Returns a population of variants, to be added to the asm-super mutants list.
;;; It will not do simple-cut operations on label declaration lines (which will
;;; simply break compilation). It will also skip the first instruction which is
;;; typically "push rbp", as this will cause the return address to be lost and
;;; definitely break.
;;;
(defun create-all-simple-cut-variants (asm-super)
  (let* ((orig (create-target asm-super))
	 (lines (genome orig))
	 (variants '())
	 (index 0))
    (iter (for line in-vector lines)
      (unless
	  (or ;(= index 14) ;; causes infinite loop
		  (eq (asm-line-info-type line) ':label-decl))
        (push
	  (apply-mutation
	    (copy orig) 
	    (make-instance 'simple-cut :object orig :targets index))
	  variants)
	(format t "Cutting index ~D, line: ~A~%" index (asm-line-info-text line)))
      (incf index))
    (nreverse variants)))

#|

(create-variant-file 
  "/u1/rcorman/synth/sel/test/etc/asm-test/grep.asm"    ; input source asm file
  "/u1/rcorman/synth/sel/test/etc/asm-test/grep-io.txt" ; io file
  "/u1/rcorman/synth/grep-variant.asm"                  ; output file name
  #x4097d0                                              ; start addr of function
  #x409839)                                             ; end addr of function

(defparameter *asm-super* 
  (from-file (make-instance 'asm-super-mutant)
  "/u1/rcorman/synth/sel/test/etc/asm-test/grep.asm"))

(load-io-file *asm-super* 
  "/u1/rcorman/synth/sel/test/etc/asm-test/grep-io.txt") 

(target-function *asm-super* #x4097d0 #x409839) ; nlscan function

(generate-file *asm-super* "/u1/rcorman/synth/grep-variant.asm")

;; test with odd-even.asm, function is_even()
(defparameter *asm-super* 
  (from-file (make-instance 'asm-super-mutant)
  "/u1/rcorman/synth/sel/test/etc/asm-test/odd-even.asm"))
(setf (fitness-harness *asm-super*) 
  "/u1/rcorman/synth/sel/software/asm-super-mutant-fitness.c")
(load-io-file *asm-super* "/u1/rcorman/synth/sel/test/etc/asm-test/odd-even.io")
(target-function *asm-super* #x4005f6 #x400625)

;; add a variant to the population (currently just a duplicate)
(defun add-variant (asm-super)
  (let ((v (create-target asm-super)))
    (push v (mutants asm-super))))

(setf (mutants *asm-super*) (create-all-simple-cut-variants *asm-super*))
(push (create-target *asm-super*) (mutants *asm-super*))  ;; add original
(phenome *asm-super* :src "is_even-1.asm" :bin "is_even-1.out")

(test-fitness *asm-super*)

(mapcar 'fitness
  (lexicase-select-best (mutants *asm-super*) 
    :predicate (lambda (x y) (< x y))))   ;; lower fitness number is better

|#
