(in-package :se)

(defvar *isa-nbits* 64
  "Indicate 32- or 64-bit architecture.")

(define-software assembled-asm (asm)
  ((assembler :initarg :assembler :accessor assembler :initform "nasm")
   (asm-flags :initarg :asm-flags :accessor asm-flags :initform nil
              :documentation "Flags to pass to assembler.")
   (spec-file :initarg :spec-file :accessor spec-file :initform nil
              :documentation "Optionally specify name of CodeSurfer spec-file
to redirect elf copy relocations.")))

(defmethod elf-weaken-gmon-start (elf-objfile)
  "Reimplementation of CSURF elf:weaken-gmon-start. Mark a set of symbols,
including __gmon_start__, as weakly required. Requires GT_HOME environment
variable and `*isa-nbits*' to be set."
  (remove-if #'null
    (bind ((gt-home (getenv "GT_HOME"))
           (cmd-path (concatenate 'string
                                  gt-home
                                  "/libswyx/src/exe_map/elf_edit_symtab"
                                  (write-to-string *isa-nbits*))))
      (loop :for sym :in (list "__gmon_start__" "__imp___gmon_start__"
                               "_ITM_deregisterTMCloneTable"
                               "_ITM_registerTMCloneTable"
                               "_Jv_RegisterClasses")
         :collecting (bind (((:values _ _ errno)
                             (shell "~a ~a ~a 2" cmd-path elf-objfile sym)))
                       (unless (zerop errno)
                         (cons sym errno)))))))

(defmethod elf-copy-redirect (elf-file spec-file)
  "Reimplementation of CSURF elf:copy-redirect. Redirect ELF COPY relocations
and associated symbols, for entries described in spec-file. Requires GT_HOME
environment variable to be set."
  (bind ((gt-home (getenv "GT_HOME"))
         (cmd-path (concatenate 'string
                                gt-home
                                "/libswyx/src/exe_map/elf_copy_redirect"))
         ((:values stdout stderr errno)
          (shell "~a -v -s ~a ~a" cmd-path spec-file elf-file)))
    (values stdout stderr errno)))

(defmethod phenome ((asm assembled-asm) &key (bin (temp-file-name)))
  "Assemble and link ASM. Additionally, in case the ASM was generated by
CSURF, mark some symbols (such as __gmon_start__) as weakly required.
The first value returned will be the name of the binary on success, but may
be the name of the object file if there is a failure prior to linking."
  (with-temp-file-of (src "s") (genome-string asm)
    (with-temp-file (obj)
      ;; assemble
      (bind (((:values stdout stderr errno)
              (shell "~a -o ~a ~a ~{~a~^ ~}"
                     (assembler asm) obj src (asm-flags asm))))
        (if (not (zerop errno))
            (values obj errno stderr stdout src)
            ;; mark __gmon_start__ et al. weakly required
            (bind ((weaken-errors (elf-weaken-gmon-start obj)))
              (if weaken-errors
                  (values obj errno stderr stdout src)
                  ;; link
                  (bind (((:values stdout stderr errno)
                      (shell "~a -o ~a ~a ~{~a~^ ~}"
                        (or (linker asm) *asm-linker*) bin obj (flags asm))))
                (if (or (not (zerop errno)) (not (spec-file asm)))
                    (values bin errno stderr stdout src)
                    ;; elf copy-redirect
                    (bind (((:values stdout stderr errno)
                            (elf-copy-redirect bin (spec-file asm))))
                      (values bin errno stderr stdout src)))))))))))
