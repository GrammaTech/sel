
The Style Features component offers the ability to extract a set of features
from a software object into a feature vector. We use the Code Stylometry
Feature Set (CSFS) described in @cite{De-anonymizing Programmers via Code
Stylometry} at
@url{https://www.usenix.org/system/files/conference/usenixsecurity15/sec15-paper-caliskan-islam.pdf}).

Extracted feature vectors can be used as fitness vectors with the
@ref{lexicase-selection, lexicase evolution strategy}. One application
is to drive evolution towards solutions which better match the
features of the surrounding source code.


@subsection API Support for Style Features

API support for style features is documented in the entries for classes
@ref{api-style-features-class-style-feature, @code{style-feature}},
@ref{api-style-features-class-styleable, @code{styleable}}, and
@ref{api-style-features-class-style-project, @code{style-project}}. We provide a brief
overview here.


To extract the set of @ref{api-style-features-vectors,feature vectors}
from a @ref{Class software,@code{software}} object use
@ref{Generic-Function extract-features,@code{extract-features}},
providing a software object and a list of feature extractor functions.

Each feature extractor function is expected to operate on a clang
 object, and return a feature vector containing the values for that feature.
Function @code{extract-features} returns one large feature vector that
is the result of concatenating all of these vectors in order.

The SEL API provides several AST-related feature extractors for clang
software objects, i.e., features derived from properties of a clang
AST. The available feature extractors are:
@itemize
@item @ref{api-clang-feature-extractors, Included in the API documentation}.
@item Listed in parameter @ref{Variable *feature-extractors*,@code{*feature-extractors*}}.
@item Summarized in the following table.


@multitable {}{}

@item @ref{Generic-Function ast-node-type-tf-extractor,
      @code{ast-node-type-tf-extractor}}
      @tab number of nodes of each different ast-class (e.g., IfStmt
or DeclStmt) in the AST.

@item @ref{Generic-Function max-depth-ast-extractor,
      @code{max-depth-ast-extractor}}
      @tab maximum depth of any node in the AST.

@item @ref{Generic-Function avg-depth-ast-extractor,
           @code{avg-depth-ast-extractor}}
      @tab the average depth of nodes in the AST.

@item @ref{Generic-Function ast-full-stmt-bi-grams-extractor,
              @code{ast-full-stmt-bi-grams-extractor}}
      @tab the number of occurrences of each ast-class bi-gram for
           full statements in the AST.

@item @ref{Generic-Function ast-bi-grams-extractor,
           @code{ast-bi-grams-extractor}}
      @tab the number of occurrences of each ast-class bi-gram in the
           AST.

@item @ref{Generic-Function ast-keyword-tf-extractor,
              @code{ast-keyword-tf-extractor}}
      @tab for each C keyword, the number of occurrences of that
           keyword in the AST.

@end multitable

@end itemize

By convention, feature extractor functions have names ending in ``-extractor''.
