Fault localization loosely covers activities related to trying to
pinpoint the cause of a fault or bug.  In this context, the the goal
of such activities is to narrow down the search space (or prioritize
it) when attempting to automatically repair programs using
search-based methods.  One state-of-the-art, spectrum-based technique
was introduced by Long and Rinard in @cite{Automatic Patch Generation
by Learning Correct Code} available at
@url{http://groups.csail.mit.edu/pac/patchgen/papers/prophet-popl16.pdf}.

Taken directly from section 3.7 the above paper: ``Prophet prioritizes
statements that 1) are executed with more negative test cases, 2) are
executed with fewer positive test cases, and 3) are executed later
during executions with negative test cases.''  They use this
comparison methodology to sort all statements executed during a given
test suite.

We have implemented this comparator in fault-loc.lisp as
``rinard-compare'', along with an overall trace processing function,
``rinard-incremental''.
