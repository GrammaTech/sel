
@anchor{api-instrumentation}
@subsubsection Instrumentation

[
@ref{SEL API, API} |
@ref{api-software-objects,Software Objects} |
@ref{api-software-objects-spec-ops,Specialized Operations on Software Objects} |
Instrumentation
]

More information about instrumentation is provided in section
@ref{Tracing}.

@anchor{api-instrumentation-instrumenter}
@itemize
@item Class @refapiclass{instrumenter}

  @itemize
  @item Subclass @ref{api-instrumentation-clang-instrumenter,@code{clang-instrumenter}}

  @item Generic Functions
    @itemize
    @item @refapigeneric{get-entry}
    @item @refapigeneric{instrumented-p}
    @item @refapigeneric{instrument}
    @item @refapigeneric{instrumentation-files}
    @item @refapigeneric{uninstrument}
    @item @refapigeneric{var-instrument}
    @end itemize

  @item Methods
    @itemize
    @item @refapimethod{var-instrument,var-instrument}
    @end itemize
  @end itemize

@anchor{api-instrumentation-clang-instrumenter}
@item Class @refapiclass{clang-instrumenter}
  @itemize

  @item Functions
    @itemize
    @item @refapifunction{clang-instrument}
    @end itemize

  @item Methods
    @itemize
    @item @refapimethod{instrument,instrument}
    @end itemize
  @end itemize
@end itemize

@c ----------------------------------------

@c defvar *instrument-log-env-name*
@c defvar *instrument-handshake-env-name*
@c define-constant +write-trace-include+
@c define-constant +write-trace-impl+
@c define-constant +write-trace-initialization+
@c define-constant +write-trace-file-definition+
@c define-constant +write-trace-file-declaration+
@c defun array-or-pointer-type
@c defun get-ast-id
@c defmethod initialize-instance :after
@c defgeneric write-trace-id
@c defgeneric write-trace-aux
@c defgeneric write-end-entry
@c defgeneric instrument-return
@c defgeneric instrument-exit
@c defgeneric instrument-c-exprs
@c defun initialize-tracing
@c defmacro getopts
@c defun initialize-tracing
