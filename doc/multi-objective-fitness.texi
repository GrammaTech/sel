
For multi-objective fitness, a fitness score is a list or vector
(depending on selector) of values: one for each objective.

SEL provides two selection options for multi-objective optimization:
 @ref{pareto-selection,Pareto selection} and @ref{lexicase-selection,lexicase selection}.

@anchor{pareto-selection}
@subsection Pareto Selection

Function @refapifunction{pareto-selector} compares each candidate
against a random comparison set, preferring candidates which dominate
the comparison set. This will select for individuals along the Pareto
front of the population.

Because dominance is a partial order, @code{pareto-selector} will
often produce multiple winners, requiring a tie-breaker.

Pareto fitness scores are lists in which each list element can be a
vector, a list, or a number. When an element in this list is a
vector of numeric values, it can be subjected to lexicase selection.
The fitness score lists must be the same length (that is, contain
the same number of objectives) across the entire population.


@anchor{lexicase-selection}
@subsection Lexicase Selection

Function @refapifunction{lexicase-select-best} performs lexicase
selection: a form of multi-objective optimization which prioritizes
objectives in a different order for each selection event.

Lexicase fitness scores are vectors of numeric values. The vectors must be the same length across the entire population.


@subsection API Support for Multi-Objective Fitness

API support for multi-objective fitness is documented in section
@ref{api-multi-objective, API | Multi-Objective Fitness}.


@itemize

@item
Set variable @refapivariable{*fitness-predicate*} to specify how
fitness values should be compared. Note that this applies across all
objectives: it is not possible to maximize some objectives while
minimizing others.

@item
Set variable @refapivariable{*tournament-selector*} to specify the
selector function to use for multi-objective optimization. There are
currently two such functions:
  @itemize
  @item @refapifunction{pareto-selector}
  @item @refapifunction{lexicase-select-best}
  @end itemize

@item
Set variable @refapivariable{*tournament-tie-breaker*} to specify how
the tournament should break ties in the case where the selector
produces multiple winners. A useful tie-breaker for multi-objective
optimization is @refapifunction{pick-least-crowded}, which promotes
diversity by selecting individuals that are farther from their
neighbors in fitness space.

@end itemize


@subsection Example

The following code will enable multi-objective optimization with
Pareto selection.

@verbatiminclude ./doc/examples/005-multi-objective.lisp
