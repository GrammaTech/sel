

@anchor{api-software-object-classes}
@subsection Software Object Classes

[
@ref{SEL API, API} |
@ref{api-software-objects, Software Objects} |
Software Object Classes
]

@c TODO: Remove all of these manually generated
@c       api-software-objects-foo sections.  They will be a pain to
@c       keep up to date.  Instead if we really want to collect all
@c       methods defined on an object, we should update sb-texinfo to
@c       do this for us as part of the class documentation.
@itemize
@item @ref{api-software-objects-software,@code{software}}
   @itemize
   @item Language back end subclasses
     @itemize
     @item @ref{api-software-objects-asm,@code{asm}}
       @itemize
       @item @ref{api-software-objects-csurf-asm, @code{csurf-asm}}
       @end itemize
     @item @ref{api-software-objects-cil, @code{cil}}
     @item @ref{api-software-objects-clang, @code{clang}}
       @itemize
       @item @ref{api-software-objects-clang-w-fodder, @code{clang-w-fodder}}
       @end itemize
     @item @refapiclass{java}
     @item @ref{api-software-objects-elf, @code{elf}}
       @itemize
       @item @ref{api-software-objects-elf-cisc,  @code{elf-cisc}}
         @itemize
         @item @ref{api-software-objects-elf-arm, @code{elf-arm}}
         @item @ref{api-software-objects-elf-csurf, @code{elf-csurf}}
         @item @ref{api-software-objects-elf-x86, @code{elf-x86}}
         @end itemize
       @item @ref{api-software-objects-elf-risc, @code{elf-risc}}
         @itemize
         @item @ref{api-software-objects-elf-mips, @code{elf-mips}}
         @end itemize
       @end itemize
     @item @ref{api-software-objects-forth, @code{forth}}
     @item @ref{api-software-objects-lisp, @code{lisp}}
       @itemize
       @item @ref{api-software-objects-expression, @code{expression}}
       @itemize
       @item @ref{api-software-objects-clang-expression, @code{clang-expression}}
       @end itemize
     @end itemize
   @item @ref{api-software-objects-llvm, @code{llvm}}
  @end itemize

  @item Utility subclasses: base classes for language back ends
     @itemize
     @item @ref{api-software-objects-parseable, @code{parseable}}
     @item @ref{api-software-objects-source, @code{source}}
     @item @ref{api-software-objects-simple, @code{simple}}
       @itemize
       @item @ref{api-software-objects-light, @code{light}}
       @end itemize
     @end itemize


  @item Project subclasses
     @itemize
     @item @ref{api-software-objects-project, @code{project}}
       @itemize
       @item @ref{api-software-objects-clang-project, @code{clang-project}}
       @end itemize
     @end itemize
  @end itemize

@item Macro @refapimacro{define-software}

@end itemize




@anchor{api-software-objects-software}
@subsubsection Class @code{software}

[
@ref{SEL API, API} |
@ref{api-software-objects, Software Objects} |
@ref{api-software-object-classes,Software Object Classes} |
Class @code{software}
]


@itemize

@item Class @refapiclass {software}

@item Subclasses
  @itemize

  @item @ref{api-software-objects-source, @code{source}}
    @itemize
    @item @ref{api-software-objects-cil, @code{cil}}
    @item @refapiclass{java}
    @item @ref{api-software-objects-llvm, @code{llvm}}
    @item @ref{api-software-objects-parseable, @code{parseable}}
      @itemize
      @item @ref{api-software-objects-clang, @code{clang}}
        @itemize
        @item @ref{api-software-objects-clang-w-fodder, @code{clang-w-fodder}}
        @end itemize
      @item @ref{api-software-objects-javascript, @code{javascript}}
      @end itemize
    @end itemize

  @item @ref{api-software-objects-project, @code{project}}
    @itemize
    @item @ref{api-software-objects-clang-project, @code{clang-project}}
    @end itemize

  @item @ref{api-software-objects-simple, @code{simple}}
    @itemize
    @item @ref{api-software-objects-asm,@code{asm}}
       @itemize
       @item @ref{api-software-objects-csurf-asm, @code{csurf-asm}}
       @end itemize
    @item @ref{api-software-objects-diff, @code{diff}}
    @item @ref{api-software-objects-elf, @code{elf}}
      @itemize
      @item @ref{api-software-objects-elf-cisc,  @code{elf-cisc}}
        @itemize
        @item @ref{api-software-objects-elf-arm, @code{elf-arm}}
        @item @ref{api-software-objects-elf-csurf, @code{elf-csurf}}
        @item @ref{api-software-objects-elf-x86, @code{elf-x86}}
        @end itemize
      @item @ref{api-software-objects-elf-risc, @code{elf-risc}}
        @itemize
        @item @ref{api-software-objects-elf-mips, @code{elf-mips}}
        @end itemize
      @end itemize
     @item @ref{api-software-objects-forth, @code{forth}}
     @item @ref{api-software-objects-light, @code{light}}
     @item @ref{api-software-objects-lisp, @code{lisp}}
       @itemize
       @item @ref{api-software-objects-expression, @code{expression}}
         @itemize
         @item @ref{api-software-objects-clang-expression, @code{clang-expression}}
         @end itemize
       @end itemize
    @item @ref{api-software-objects-sw-range, @code{sw-range}}
    @end itemize
  @end itemize


@item Macro @refapimacro{define-software}

@item Generic Functions
  @itemize
  @item @refapigeneric{apply-path}
  @item @refapigeneric{copy}
  @item @refapigeneric{delete-decl-stmts}
@c  @item @refapigeneric{expression}
  @item @refapigeneric{one-point-crossover}
  @item @refapigeneric{two-point-crossover}
  @item @refapigeneric{from-file}
  @item @refapigeneric{from-string}
  @item @refapigeneric{genome}
  @item @refapigeneric{genome-string}
  @item @refapigeneric{lines}
  @item @refapigeneric{mutate}
  @item @refapigeneric{phenome}
  @item @refapigeneric{pick}
  @item @refapigeneric{pick-bad}
  @item @refapigeneric{pick-good}
  @item @refapigeneric{pick-bad-bad}
  @item @refapigeneric{pick-bad-good}
  @item @refapigeneric{pick-mutation-type}
  @item @refapigeneric{to-file}
@anchor{api-software-object-applying-mutations}
  @item Applying @ref{api-mutations,Mutations}
    @itemize
    @item @refapigeneric{apply-all-mutations}
    @item @refapigeneric{apply-mutations}
    @item @refapigeneric{apply-mutation}
    @item @refapigeneric{apply-picked-mutations}
    @item @refapigeneric{mutation-key}
    @end itemize
  @end itemize

@item Methods
  @itemize
  @item @refapimethod{apply-mutation,apply-mutation before}
  @item @refapimethod{collect-trace,collect-trace}
  @item @refapimethod{collect-traces,collect-traces}
  @end itemize
@end itemize


@c defmethod targets



@c ----------------------------------------


@anchor{api-software-objects-source}
@subsubsection Class @code{source}
@c done

[
@ref{SEL API, API} |
@ref{api-software-objects, Software Objects} |
@ref{api-software-object-classes,Software Object Classes} |
Class @code{source}
]

@itemize
@item Class @refapiclass{source}

@item Subclasses
  @itemize
  @item @ref{api-software-objects-cil, @code{cil}}
  @item @ref{api-software-objects-parseable, @code{parseable}}
    @itemize
    @item @ref{api-software-objects-clang, @code{clang}}
      @itemize
      @item @ref{api-software-objects-clang-w-fodder, @code{clang-w-fodder}}
      @end itemize
    @item @ref{api-software-objects-javascript, @code{javascript}}
    @end itemize
  @item @ref{api-software-objects-llvm, @code{llvm}}
  @end itemize

@item Generic Functions
  @itemize
  @item @refapigeneric{select-crossover-points}
  @end itemize

@item Methods
  @itemize
  @item @refapimethod{crossover,crossover}
  @item @refapimethod{from-file,from-file}
  @item @refapimethod{genome-string,genome-string}
  @item @refapimethod{genome-string,(setf genome-string)}
  @item @refapimethod{lines,lines}
  @item @refapimethod{mutate,mutate}
  @item @refapimethod{phenome,phenome}
  @item @refapimethod{size,size}
  @end itemize

@end itemize

@c ----------------------------------------


@anchor{api-software-objects-cil}
@subsubsection Class @code{cil}

[
@ref{SEL API, API} |
@ref{api-software-objects, Software Objects} |
@ref{api-software-object-classes,Software Object Classes} |
Class @code{cil}
]

@itemize
@item Class @refapiclass{cil}
@item Methods
  @itemize
  @item @refapimethod{apply-mutation,apply-mutation}
  @item @refapimethod{instrument,instrument}
  @end itemize
@end itemize

@c ----------------------------------------

@anchor{api-software-objects-parseable}
@subsubsection Class @code{parseable}
[
@ref{SEL API, API} |
@ref{api-software-objects, Software Objects} |
@ref{api-software-object-classes,Software Object Classes} |
Class @code{parseable}
]



@itemize

@item Class @refapiclass{parseable}

@item Subclass
  @itemize
  @item @ref{api-software-objects-clang, @code{clang}}
  @item @ref{api-software-objects-javascript, @code{javascript}}
  @end itemize

@item Generic Functions
  @itemize
  @item @refapigeneric{build-op}
  @item @refapigeneric{can-be-made-traceable-p}
  @item @refapigeneric{get-ast}
  @item @refapigeneric{get-immediate-children}
  @item @refapigeneric{get-unbound-funs}
  @item @refapigeneric{get-unbound-vals}
  @item @refapigeneric{get-vars-in-scope}
  @item @refapigeneric{parse-source-snippet}
  @item @refapigeneric{roots}
  @item @refapigeneric{size}
  @item @refapigeneric{update-asts}
  @end itemize

@c defvar *parseable-obj-code*

@item Methods
  @itemize
    @item @refapimethod{get-ast,get-ast}
    @item @refapimethod{get-immediate-children,get-immediate-children}
    @item @refapimethod{roots,roots}
    @item @refapimethod{size,size}
  @end itemize

@end itemize


@itemize

@item ASTs
  @itemize

  @item Structure @refapistruct{ast}

  @item Generic Functions
    @itemize
    @item @refapigeneric{source-text}
    @item @refapigeneric{replace-in-ast}
    @end itemize

  @item Functions
    @itemize
    @item @refapifunction{ast-later-p}
    @end itemize

  @item Methods
    @itemize
    @item @refapimethod{source-text,source-text} : multiple methods for arguments of type string, @refapistruct{ast}, @refapistruct{ast-node}
    @item @refapimethod{replace-in-ast,replace-in-ast} : multiple methods for arguments of type string, @refapistruct{ast}
    @end itemize
  @end itemize

@end itemize


@c ----------------------------------------

@anchor{api-software-objects-clang}
@subsubsection Class @code{clang}
[
@ref{SEL API, API} |
@ref{api-software-objects, Software Objects} |
@ref{api-software-object-classes,Software Object Classes} |
Class @code{clang}
]



@itemize

@item Class @refapiclass{clang}

@item Subclass
  @itemize
  @item @ref{api-software-objects-clang-w-fodder, @code{clang-w-fodder}}
  @end itemize


@anchor{api-clang-ast-mutations}
@item Mutations (subclasses of @refapiclass {mutation})
  @itemize
  @item @refapiclass{clang-mutation}
  @item @refapiclass{clang-cut}
  @item @refapiclass{clang-cut-full}
  @item @refapiclass{clang-insert}
  @item @refapiclass{clang-insert-full}
  @item @refapiclass{clang-insert-same}
  @item @refapiclass{clang-insert-full-same}
  @item @refapiclass{clang-swap}
  @item @refapiclass{clang-swap-full}
  @item @refapiclass{clang-swap-same}
  @item @refapiclass{clang-swap-full-same}
  @item @refapiclass{clang-move}
  @item @refapiclass{clang-nop}
  @item @refapiclass{clang-promote-guarded}
  @item @refapiclass{clang-replace}
  @item @refapiclass{clang-replace-full}
  @item @refapiclass{clang-replace-full-same}
  @item @refapiclass{clang-replace-same}
  @item @refapiclass{coalesce-while-loop}
  @item @refapiclass{cut-decl}
  @item @refapiclass{expand-arithmatic-op}
  @item @refapiclass{explode-for-loop}
  @item @refapiclass{rename-variable}
  @item @refapiclass{swap-decls}
  @end itemize


@item Generic Functions
  @itemize
  @item @refapigeneric{add-include}
  @item @refapigeneric{add-macro}
  @item @refapigeneric{add-type}
  @item @refapigeneric{adjust-stmt-range}
  @item @refapigeneric{bad-stmts}
  @item @refapigeneric{block-p}
  @item @refapigeneric{enclosing-full-stmt}
  @item @refapigeneric{find-var-type}
  @item @refapigeneric{force-include}
  @item @refapigeneric{function-containing-ast}
  @item @refapigeneric{get-parent-full-stmt}
  @item @refapigeneric{good-stmts}
  @item @refapigeneric{pick-guarded-compound}
  @item @refapigeneric{random-point-in-function}
  @item @refapigeneric{scopes}
  @item @refapigeneric{select-intraprocedural-pair}
  @item @refapigeneric{stmt-range}
  @item @refapigeneric{type-from-trace-string}
  @item @refapigeneric{type-trace-string}
  @item @refapigeneric{wrap-ast}
  @item @refapigeneric{wrap-child}
  @end itemize
@c @item find-or-add-type
@c @item pick-generic
@c  @item pick-bad-only

@item Variables
   @itemize
   @item @refapivariable{*clang-max-json-size*}
   @item @refapivariable{*clang-mutation-types*}
   @item @refapivariable{*clang-json-required-aux*}
   @item @refapivariable{*clang-json-required-fields*}
   @item @refapivariable{*clang-mutate-additional-args*}
   @end itemize


@item Methods
  @itemize
  @item @refapimethod{add-include,add-include}
  @item @refapimethod{add-macro,add-macro}
  @item @refapimethod{add-type,add-type} : multiple methods with different types for type argument
  @item @refapimethod{adjust-stmt-range,adjust-stmt-range}
  @item @refapimethod{apply-mutation,apply-mutation}
  @item @refapimethod{bad-stmts,bad-stmts}
  @item @refapimethod{bi-grams-hashtable-to-feature,bi-grams-hashtable-to-feature}
  @item @refapimethod{block-p,block-p}
  @item @refapimethod{build-op,build-op} : multiple methods with different mutation argument types
  @item @refapimethod{can-be-made-traceable-p,can-be-made-traceable-p}
  @item @refapimethod{crossover,crossover}
  @item @refapimethod{delete-decl-stmts,delete-decl-stmts}
  @item @refapimethod{enclosing-full-stmt,enclosing-full-stmt}
@c  @item @refapimethod{expression,expression}
  @item @refapimethod{find-macro,find-macro}
  @item @refapimethod{find-type,find-type}
  @item @refapimethod{find-var-type,find-var-type}
  @item @refapimethod{force-include,force-include}
  @item @refapimethod{format-genome,format-genome}
  @item @refapimethod{from-file,from-file}
  @item @refapimethod{function-containing-ast,function-containing-ast}
  @item @refapimethod{full-stmt-p,full-stmt-p}
  @item @refapimethod{get-ast-types,get-ast-types}
  @item @refapimethod{get-entry,get-entry}
  @item @refapimethod{get-parent-full-stmt,get-parent-full-stmt}
  @item @refapimethod{get-unbound-funs,get-unbound-funs} : methods for @refapistruct{clang-ast-node} and @refapistruct{clang-ast} arguments
  @item @refapimethod{get-unbound-vals,get-unbound-vals} : methods for @refapistruct{clang-ast-node} and @refapistruct{clang-ast} arguments
  @item @refapimethod{get-vars-in-scope,get-vars-in-scope}
  @item @refapimethod{good-stmts,good-stmts}
  @item @refapimethod{instrument,instrument}
  @item @refapimethod{instrumented-p,instrumented-p}
  @item @refapimethod{max-depth-ast,max-depth-ast}
  @item @refapimethod{pick-guarded-compound,pick-guarded-compound}
  @item @refapimethod{pick-mutation-type,pick-mutation-type}
  @item @refapimethod{random-point-in-function,random-point-in-function}
  @item @refapimethod{scopes,scopes}
  @item @refapimethod{select-crossover-points,select-crossover-points}
  @item @refapimethod{select-intraprocedural-pair,select-intraprocedural-pair}
  @item @refapimethod{update-asts,update-asts}
  @item @refapimethod{uninstrument,uninstrument}
  @item @refapimethod{wrap-ast,wrap-ast}
  @item @refapimethod{wrap-child,wrap-child}
  @item @refapimethod{parse-source-snippet,parse-source-snippet}
  @end itemize

  @item Functions
  @itemize
  @item @refapifunction{make-array-subscript-expr}
  @item @refapifunction{make-block}
  @item @refapifunction{make-call-expr}
  @item @refapifunction{make-cast-expr}
  @item @refapifunction{make-for-stmt}
  @item @refapifunction{make-if-stmt}
  @item @refapifunction{make-label}
  @item @refapifunction{make-literal}
  @item @refapifunction{make-operator}
  @item @refapifunction{make-parens}
  @item @refapifunction{make-statement}
  @item @refapifunction{make-var-decl}
  @item @refapifunction{make-var-reference}
  @item @refapifunction{make-while-stmt}
  @end itemize

@end itemize

@c defmethod clang-mutate

@c defmacro define-ast
@c define-ast clang-macro
@c defun asts->tree
@c defun types->hashtable
@c defun fixup-mutation
@c defun replace-nth-child
@c defmethod replace-ast
@c defmethod pick-bad-only
@c defun pick-general

@c ----------------------------------------


@anchor{api-software-objects-clang-w-fodder}
@subsubsection Class @code{clang-w-fodder}
[
@ref{SEL API, API} |
@ref{api-software-objects, Software Objects} |
@ref{api-software-object-classes,Software Object Classes} |
Class @code{clang-w-fodder}
]

@itemize

@item Class @refapiclass{clang-w-fodder}

@item Generic Function @refapigeneric{pick-snippet}

@item Functions
  @itemize
  @item @refapifunction{prepare-fodder}
  @end itemize

@item Variables
  @itemize
  @item @refapivariable{*database*}
  @item @refapivariable{*clang-w-fodder-new-mutation-types*}
  @item @refapivariable{*clang-w-fodder-mutation-types*}
  @end itemize

@anchor{api-clang-w-fodder-mutations}
@item Mutations (subclasses of @refapiclass{mutation})
  @itemize
  @item @refapiclass{insert-fodder-decl-rep}
  @item @refapiclass{insert-fodder-decl}
  @item @refapiclass{insert-fodder}
  @item @refapiclass{insert-fodder-full}
  @item @refapiclass{replace-fodder-same}
  @item @refapiclass{replace-fodder-full}
  @end itemize

@item Methods
  @itemize
  @item @refapimethod{apply-mutation,apply-mutation after}
  @item @refapimethod{build-op,build-op}
  @item @refapimethod{from-string,from-string before}
  @item @refapimethod{pick-mutation-type,pick-mutation-type}
  @item @refapimethod{pick-snippet,pick-snippet}
  @end itemize

@end itemize

@c defun pick-bad-fodder
@c defun pick-decl-fodder
@c defun pick-decl-fodder-and-rename
@c defun bind-vars-in-snippet
@c defun prepare-fodder-op
@c defmethod recontextualize-mutation :around

@c ----------------------------------------

@anchor{api-software-objects-javascript}
@subsubsection Class @code{javascript}
[
@ref{SEL API, API} |
@ref{api-software-objects, Software Objects} |
@ref{api-software-object-classes,Software Object Classes} |
Class @code{javascript}
]

@itemize

@item Class @refapiclass{javascript}

@item Methods
  @itemize
  @item @refapimethod{format-genome,format-genome}
  @item @refapimethod{from-string,from-string}
  @item @refapimethod{from-file,from-file}
  @item @refapimethod{get-unbound-vals,get-unbound-vals}
  @item @refapimethod{get-unbound-funs,get-unbound-funs}
  @item @refapimethod{get-vars-in-scope,get-vars-in-scope}
  @item @refapimethod{parse-source-snippet,parse-source-snippet}
  @item @refapimethod{phenome,phenome}
  @item @refapimethod{traceable-stmt-p,traceable-stmt-p}
  @item @refapimethod{scopes,scopes}
  @item @refapimethod{update-asts,update-asts}
  @end itemize

@end itemize

@c ----------------------------------------

@anchor{api-software-objects-llvm}
@subsubsection Class @code{llvm}

[
@ref{SEL API, API} |
@ref{api-software-objects, Software Objects} |
@ref{api-software-object-classes,Software Object Classes} |
Class @code{llvm}
]

@itemize
@item Class @refapiclass{llvm}
@item Methods
  @itemize
  @item @refapimethod{apply-mutation,apply-mutation}
  @item @refapimethod{from-file,from-file}
  @item @refapimethod{mutate,mutate}
  @item @refapimethod{phenome,phenome}
  @end itemize
@end itemize

@c PROJECT ----------------------------------------

@anchor{api-software-objects-project}
@subsubsection Class @code{project}

[
@ref{SEL API, API} |
@ref{api-software-objects, Software Objects} |
@ref{api-software-object-classes,Software Object Classes} |
Class @code{project}
]

@itemize
@item Class @refapiclass{project}
@item Macros
  @itemize
  @item @refapimacro{with-build-dir}
  @item @refapimacro{with-temp-build-dir}
  @end itemize

@item Generic Function @refapigeneric{write-genome-to-files}

@item Functions
  @itemize
  @item @refapifunction{full-path}
  @item @refapifunction{make-build-dir}
  @end itemize

@item Variable @refapivariable{*build-dir*}

@item Methods
  @itemize
  @item @refapimethod{apply-mutation,apply-mutation}
  @item @refapimethod{apply-mutations,apply-mutations}
  @item @refapimethod{apply-picked-mutations,apply-picked-mutations}
  @item @refapimethod{crossover,crossover}
  @item @refapimethod{genome,genome}
  @item @refapimethod{mutate,mutate}
  @item @refapimethod{phenome,phenome}
  @item @refapimethod{size,size}
  @item @refapimethod{write-genome-to-files,write-genome-to-files}
  @end itemize
@end itemize

@c defun copy-files
@c defmethod no-applicable-method :around
@c defmethod all-files
@c defmethod (setf genome)
@c defun pick-file
@c defmethod apply-to-project
@c defun make-build-dir-aux


@anchor{api-software-objects-clang-project}
@subsubsection Class @code{clang-project}

[
@ref{SEL API, API} |
@ref{api-software-objects, Software Objects} |
@ref{api-software-object-classes,Software Object Classes} |
Class @code{clang-project}
]

@itemize
@item Class @refapiclass{clang-project}
@item Methods
  @itemize
  @item @refapimethod{from-file,from-file}
  @item @refapimethod{format-genome,format-genome}
  @item @refapimethod{instrument,instrument}
  @item @refapimethod{instrumentation-files,instrumentation-files}
  @item @refapimethod{instrumented-p,instrumented-p}
  @item @refapimethod{to-file,to-file}
  @item @refapimethod{uninstrument,uninstrument}
  @end itemize
@end itemize

@c ----------------------------------------

@anchor{api-software-objects-simple}
@subsubsection Class @code{simple}

[
@ref{SEL API, API} |
@ref{api-software-objects, Software Objects} |
@ref{api-software-object-classes,Software Object Classes} |
Class @code{simple}
]

@itemize
@item Class @refapiclass{simple}

@item Subclasses
  @itemize
  @item @ref{api-software-objects-asm,@code{asm}}
    @itemize
    @item @ref{api-software-objects-csurf-asm, @code{csurf-asm}}
    @end itemize
  @item @ref{api-software-objects-diff, @code{diff}}
  @item @ref{api-software-objects-elf, @code{elf}}
    @itemize
    @item @ref{api-software-objects-elf-cisc,  @code{elf-cisc}}
      @itemize
      @item @ref{api-software-objects-elf-arm, @code{elf-arm}}
      @item @ref{api-software-objects-elf-csurf, @code{elf-csurf}}
      @item @ref{api-software-objects-elf-x86, @code{elf-x86}}
      @end itemize
    @item @ref{api-software-objects-elf-risc, @code{elf-risc}}
      @itemize
      @item @ref{api-software-objects-elf-mips, @code{elf-mips}}
      @end itemize
    @end itemize
  @item @ref{api-software-objects-forth, @code{forth}}
  @item @ref{api-software-objects-light, @code{light}}
  @item @ref{api-software-objects-lisp, @code{lisp}}
    @itemize
    @item @ref{api-software-objects-expression, @code{expression}}
      @itemize
      @item @ref{api-software-objects-clang-expression, @code{clang-expression}}
      @end itemize
    @end itemize
  @item @ref{api-software-objects-sw-range, @code{sw-range}}
  @end itemize


@item Variables
  @itemize
  @item @refapivariable{*simple-mutation-types*}
  @end itemize

@item Methods
  @itemize
  @item @refapimethod{apply-mutation,apply-mutation} multiple methods for mutations @refapiclass{simple-cut}, @refapiclass{simple-insert}, @refapiclass{simple-swap}
  @item @refapimethod{crossover,crossover}
  @item @refapimethod{from-file,from-file} multiple methods: can provide one path or a list of paths
  @item @refapimethod{genome-string,genome-string}
  @item @refapimethod{lines,lines}
  @item @refapimethod{mcmc-step,mcmc-step}
  @item @refapimethod{mutate,mutate}
  @item @refapimethod{pick-mutation-type,pick-mutation-type}
  @item @refapimethod{size,size}
  @item @refapimethod{to-file,to-file}
  @item @refapimethod{two-point-crossover,two-point-crossover}
  @item @refapimethod{one-point-crossover,one-point-crossover}
  @end itemize
@end itemize

@c defmethod (setf lines)
@c defun file-to-simple-genome-list
@c defun common-subseq
@c defclass simple-mutation
@c defmethod mcmc-step
@c defun context
@c defun contexts
@c defun synapsing-points
@c defmethod synapsing-crossover
@c defmethod similarity-crossover


@c ----------------------------------------

@anchor{api-software-objects-asm}
@subsubsection Class @code{asm}

[
@ref{SEL API, API} |
@ref{api-software-objects, Software Objects} |
@ref{api-software-object-classes,Software Object Classes} |
Class @code{asm}
]

@itemize
@item Class @refapiclass{asm}

@item Subclass
  @itemize
  @item @ref{api-software-objects-csurf-asm, @code{csurf-asm}}
  @end itemize

@anchor{api-asm-mutations}
@item Mutations (subclasses of @refapiclass{mutation})
  @itemize
  @item @refapiclass{asm-replace-operand}
  @end itemize

@item Functions
  @itemize
  @item @refapifunction{asm-nth-instruction}
  @item @refapifunction{asm-split-instruction}
  @end itemize

@item Variables
  @itemize
  @item @refapivariable{*asm-mutation-types*}
  @end itemize

@item Methods
  @itemize
  @item @refapimethod{apply-mutation,apply-mutation}
  @item @refapimethod{apply-path,apply-path}
  @item @refapimethod{phenome,phenome}
  @item @refapimethod{pick-mutation-type,pick-mutation-type}
  @end itemize
@end itemize
@c defvar *asm-linker*
@c defvar *asm-new-mutation-types*


@c ----------------------------------------

@anchor{api-software-objects-csurf-asm}
@subsubsection Class @code{csurf-asm}

[
@ref{SEL API, API} |
@ref{api-software-objects, Software Objects} |
@ref{api-software-object-classes,Software Object Classes} |
Class @code{csurf-asm}
]

@itemize
@item Class @refapiclass{csurf-asm}
@item Methods
  @itemize
  @item @refapimethod{phenome,phenome}
  @end itemize
@end itemize


@c defvar *gt-home*

@c ----------------------------------------

@anchor{api-software-objects-elf}
@subsubsection Class @code{elf}
[
@ref{SEL API, API} |
@ref{api-software-objects, Software Objects} |
@ref{api-software-object-classes,Software Object Classes} |
Class @code{elf}
]

@itemize
@item Class @refapiclass{elf}

@item Subclasses
  @itemize
  @item @ref{api-software-objects-elf-cisc,  @code{elf-cisc}}
    @itemize
    @item @ref{api-software-objects-elf-arm, @code{elf-arm}}
    @item @ref{api-software-objects-elf-csurf, @code{elf-csurf}}
    @item @ref{api-software-objects-elf-x86, @code{elf-x86}}
    @end itemize
  @item @ref{api-software-objects-elf-risc, @code{elf-risc}}
    @itemize
    @item @ref{api-software-objects-elf-mips, @code{elf-mips}}
    @end itemize
  @end itemize

@item Generic Functions
  @itemize
  @item @refapigeneric{elf}
  @item @refapigeneric{genome-bytes}
  @end itemize

@item Methods
  @itemize
  @item @refapimethod{from-file,from-file}
  @item @refapimethod{genome-bytes,genome-bytes}
  @item @refapimethod{genome-string,genome-string}
  @item @refapimethod{mutate,mutate}
  @item @refapimethod{phenome,phenome}
  @item @refapimethod{pick-bad,pick-bad}
  @item @refapimethod{pick-good,pick-good}
  @end itemize
@end itemize

@c defgeneric elf-cut
@c defgeneric elf-insert
@c defgeneric elfap

@c defun elf-weaken-gmon-start
@c defun elf-copy-redirect


@c ----------------------------------------

@anchor{api-software-objects-elf-cisc}
@subsubsection Class @code{elf-cisc}
[
@ref{SEL API, API} |
@ref{api-software-objects, Software Objects} |
@ref{api-software-object-classes,Software Object Classes} |
Class @code{elf-cisc}
]

@itemize
@item Class @refapiclass{elf-cisc}

@item Subclasses
  @itemize
  @item @ref{api-software-objects-elf-arm, @code{elf-arm}}
  @item @ref{api-software-objects-elf-csurf, @code{elf-csurf}}
  @item @ref{api-software-objects-elf-x86, @code{elf-x86}}
  @end itemize

@item Generic Functions
  @itemize
  @item @refapigeneric{nop-p}
  @item @refapigeneric{pad-nops}
  @end itemize

@item Methods
  @itemize
  @item @refapimethod{apply-mutation,apply-mutation}
  @item @refapimethod{apply-path,apply-path}
  @item @refapimethod{crossover,crossover}
  @item @refapimethod{elf,elf}
  @item @refapimethod{from-file,from-file}
  @item @refapimethod{lines,lines}
  @end itemize
@end itemize

@c defun parse-disasm
@c defun elf-pad
@c defun elf-strip
@c defgeneric elf-replace
@c defmethod elf-cut
@c defmethod elf-insert
@c defmethod elf-swap
@c defmethod (setf lines)


@c ----------------------------------------
@anchor{api-software-objects-elf-arm}

@subsubsection Class @code{elf-arm}
[
@ref{SEL API, API} |
@ref{api-software-objects, Software Objects} |
@ref{api-software-object-classes,Software Object Classes} |
Class @code{elf-arm}
]

@itemize
@item Class @refapiclass{elf-arm}
@item Methods
  @itemize
  @item @refapimethod{nop-p,nop-p}
  @item @refapimethod{pad-nops,pad-nops}
  @end itemize
@end itemize

@c defvar arm-nops

@c ----------------------------------------

@anchor{api-software-objects-elf-csurf}
@subsubsection Class @code{elf-csurf}

[
@ref{SEL API, API} |
@ref{api-software-objects, Software Objects} |
@ref{api-software-object-classes,Software Object Classes} |
Class @code{elf-csurf}
]

@itemize
@item Class @refapiclass{elf-csurf}
@item Methods
  @itemize
  @item @refapimethod{from-file,from-file}
  @end itemize
@end itemize


@c ----------------------------------------

@anchor{api-software-objects-elf-x86}
@subsubsection Class @code{elf-x86}

[
@ref{SEL API, API} |
@ref{api-software-objects, Software Objects} |
@ref{api-software-object-classes,Software Object Classes} |
Class @code{elf-x86}
]

@itemize
@item Class @refapiclass{elf-x86}
@item Methods
  @itemize
  @item @refapimethod{nop-p,nop-p}
  @item @refapimethod{pad-nops,pad-nops}
  @end itemize
@end itemize

@c defvar x86-nop

@c ----------------------------------------

@anchor{api-software-objects-elf-risc}
@subsubsection Class @code{elf-risc}

[
@ref{SEL API, API} |
@ref{api-software-objects, Software Objects} |
@ref{api-software-object-classes,Software Object Classes} |
Class @code{elf-risc}
]

@itemize
@item Class @refapiclass{elf-risc}

@item Subclass
  @itemize
  @item @ref{api-software-objects-elf-mips, @code{elf-mips}}
  @end itemize

@item Variable
  @itemize
  @item @refapivariable{elf-risc-max-displacement}
  @end itemize

@item Methods
  @itemize
  @item @refapimethod{apply-mutation,apply-mutation}
  @item @refapimethod{crossover,crossover}
  @item @refapimethod{elf,elf}
  @item @refapimethod{from-file,from-file}
  @item @refapimethod{lines,lines}
  @end itemize

@end itemize

@anchor{api-software-objects-elf-mips}
@subsubsection Class @code{elf-mips}

[
@ref{SEL API, API} |
@ref{api-software-objects, Software Objects} |
@ref{api-software-object-classes,Software Object Classes} |
Class @code{elf-mips}
]

@itemize
@c @item Class @refapiclass{elf-mips}
@end itemize

@c ----------------------------------------
@anchor{api-software-objects-forth}
@subsubsection Class @code{forth}

[
@ref{SEL API, API} |
@ref{api-software-objects, Software Objects} |
@ref{api-software-object-classes,Software Object Classes} |
Class @code{forth}
]

@itemize
@item Class @refapiclass{forth}
@item Methods
  @itemize
  @item @refapimethod{from-file,from-file}
  @item @refapimethod{genome-string,genome-string}
  @item @refapimethod{phenome,phenome}
  @end itemize
@end itemize


@c ----------------------------------------

@anchor{api-software-objects-light}
@subsubsection Class @code{light}

[
@ref{SEL API, API} |
@ref{api-software-objects, Software Objects} |
@ref{api-software-object-classes,Software Object Classes} |
Class @code{light}
]

@itemize
@item Class @refapiclass{light}
@item Methods
  @itemize
  @item @refapimethod{from-file,from-file}
  @item @refapimethod{lines,lines}
  @end itemize
@end itemize

@anchor{api-software-objects-lisp}
@subsubsection Class @code{lisp}

[
@ref{SEL API, API} |
@ref{api-software-objects, Software Objects} |
@ref{api-software-object-classes,Software Object Classes} |
Class @code{lisp}
]

@itemize
@item Class @refapiclass{lisp}

@item Subclasses
  @itemize
  @item @ref{api-software-objects-expression, @code{expression}}
    @itemize
    @item @ref{api-software-objects-clang-expression, @code{clang-expression}}
    @end itemize
  @end itemize


@anchor{api-lisp-mutations}
@item Mutations (subclasses of @refapiclass{mutation}
  @itemize
  @item @refapiclass{lisp-cut}
  @item @refapiclass{lisp-replace}
  @item @refapiclass{lisp-swap}
  @end itemize

@item Variable @refapivariable{*lisp-mutation-types*}

@item Methods
  @itemize
  @item @refapimethod{apply-mutation,apply-mutation} : multiple methods with the various @ref{api-lisp-mutations, mutations} from the list above.
  @item @refapimethod{crossover, crossover}
  @item @refapimethod{from-file, from_file}
  @item @refapimethod{genome-string,genome-string}
  @item @refapimethod{mutate,mutate}
  @item @refapimethod{pick-mutation-type,pick-mutation-type}
  @item @refapimethod{size,size}
  @item @refapimethod{to-file,to-file}
  @end itemize
@end itemize

@anchor{api-software-objects-expression}
@subsubsection Class @code{expression}

[
@ref{SEL API, API} |
@ref{api-software-objects, Software Objects} |
@ref{api-software-object-classes,Software Object Classes} |
Class @code{expression}
]

@itemize
@item Class @refapiclass{expression}

@item Subclass
  @itemize
  @item @ref{api-software-objects-clang-expression, @code{clang-expression}}
  @end itemize

@item Condition @refapicond{eval-error}

@anchor{api-expression-mutations}
@item Mutations (subclasses of @refapiclass{mutation})
  @itemize
  @item @refapiclass{add-subtract-scope}
  @item @refapiclass{add-subtract-tree}
  @item @refapiclass{add-subtract}
  @item @refapiclass{change-constant}
  @item @refapiclass{change-operator}
  @item @refapiclass{demote-binop-left}
  @item @refapiclass{demote-binop-right}
  @item @refapiclass{mult-divide}
  @item @refapiclass{random-subtree}
  @item @refapiclass{subtract-add-tree}
  @item @refapiclass{subtract-add}
  @end itemize

@item Methods
  @itemize
  @item @refapimethod{apply-mutation, apply-mutation} : multiple methods with the various @ref{api-expression-mutations,mutations} listed above.
  @item @refapimethod{pick-mutation-type, pick-mutation-type}
  @end itemize
@end itemize

@anchor{api-software-objects-clang-expression}
@subsubsection Class @code{clang-expression}

[
@ref{SEL API, API} |
@ref{api-software-objects, Software Objects} |
@ref{api-software-object-classes,Software Object Classes} |
Class @code{clang-expression}
]

@itemize
@item Class @refapiclass{clang-expression}
@item Functions
  @itemize
  @item @refapifunction{expression-intern}
  @item @refapifunction{expression-to-c}
  @end itemize
@item Methods
  @itemize
@c  @item @refapimethod{expression, expression ((obj clang) (ast clang-ast))}
  @end itemize
@end itemize
