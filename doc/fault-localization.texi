@heading Overview
Fault localization loosely covers activities related to trying to
pinpoint the cause of a fault or bug.  In this context, the the goal
of such activities is to narrow down the search space (or prioritize
it) when attempting to automatically repair programs using
search-based methods.  One state-of-the-art, spectrum-based technique
was introduced by Long and Rinard in @cite{Automatic Patch Generation
by Learning Correct Code} available at
@url{http://groups.csail.mit.edu/pac/patchgen/papers/prophet-popl16.pdf}.

Taken directly from section 3.7 the above paper: ``Prophet prioritizes
statements that 1) are executed with more negative test cases, 2) are
executed with fewer positive test cases, and 3) are executed later
during executions with negative test cases.''  They use this
comparison methodology to sort all statements executed during a given
test suite.

We have implemented this comparator in fault-loc.lisp as
``rinard-compare'', along with an overall trace processing function,
``rinard-incremental''.

@heading Usage
The two entry points mentioned above can be called in the following manner
(and in this order):

@itemize
@item @code{(rinard-incremental trace-stream stmt-counts is-good-trace cur_test)}
This processes a trace for a single test, adding to historic data.

@verbatim
TRACE-STREAM ------------ an open file representing the trace result,
                          generally with statments of the form
                          ((F . X) (C . Y)) where X is the file id and
                          Y is the statement id
STMT-COUNTS ------------- aggregated results, returned from this function
IS-GOOD-TRACE ----------- test outcome was positive/negative
CUR_TEST ---------------- unique test identifier
@end verbatim

@item @code{(rinard count obj stmt-counts)}
Once the traces are processed, this performs the prioritization.

@verbatim
COUNT ------------------- size of prioritized list to return
OBJ --------------------- software object under test
STMT-COUNTS ------------- aggregated trace results, collected from
                          rinard-incremental above
@end verbatim

@heading Caching

Fault localization can take a significant amount of time for large,
complex systems.  Thus, we've included the ability to write-out/read-in fault localization results to facilitate subsequent runs, if fault localization is unlikely to change.  The two associated functions are:

@item @code{(rinard-write-out path data)}

@verbatim
PATH -------------------- full system path to write to
DATA -------------------- fault loc data, as returned by @code{rinard}
@end verbatim

@item @code{(rinard-read-in path)}

@verbatim
PATH -------------------- full system path to read in from, previously
                          written out by @code{rinard-write-out}
@end verbatim
@end itemize
