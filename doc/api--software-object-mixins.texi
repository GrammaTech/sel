

@anchor{api-software-object-mixins}
@subsection Software Object ``Mixins''

[
@ref{SEL API,API} |
@ref{api-software-objects,Software Objects} |
Software Object ``Mixins''
]


@itemize
@item @ref{api-ancestry,Class @code{ancestral}}

@item @ref{api-software-objects-adaptive-mutation,Class @code{adaptive-mutation}}

@item @ref{api-software-objects-file, Class @code{file}}

@item @ref{api-software-objects-compilable, Class @code{compilable}}

@item @ref{api-style-features-class-styleable, Class @code{styleable}}
@item @ref{api-style-features-class-style-project, Class @code{style-project}}

@item @ref{api-software-objects-diff, Class @code{diff}}
@item @ref{api-software-objects-diff, Class @code{sw-range}}

@end itemize




@include api--ancestry.texi

@c ----------------------------------------

@anchor{api-software-objects-adaptive-mutation}
@subsubsection Class @code{adaptive-mutation}


[
@ref{SEL API,API} |
@ref{api-software-objects,Software Objects} |
@ref{api-software-object-mixins,Software Object ``Mixins''} |
Class @code{adaptive-mutation}
]


@itemize
@item Class @refapiclass{adaptive-mutation}
@item Functions
  @itemize
  @item @refapifunction{adaptive-analyze-mutation}
  @item @refapifunction{update-mutation-types}
  @end itemize
@item Variables
  @itemize
  @item @refapivariable{*bias-toward-dynamic-mutation*}
  @item @refapivariable{*better-bias*}
  @item @refapivariable{*same-bias*}
  @item @refapivariable{*worse-bias*}
  @item @refapivariable{*dead-bias*}
  @end itemize

@end itemize


@c define-constant +initial-mutation-results-queue+
@c defvar *mutation-results-queue*
@c defvar *mutation-results-queue-next*
@c defvar *mutation-results-queue-lock*
@c defun queue-mutation

@c ----------------------------------------

@anchor{api-software-objects-file}
@subsubsection Class @code{file}

[
@ref{SEL API,API} |
@ref{api-software-objects, Software Objects} |
@ref{api-software-object-mixins,Software Object Class ``Mixins''} |
Class @code{file}
]


@itemize
@item Class @refapiclass{file}
@item Methods
  @itemize
  @item @refapimethod{from-file,from-file before}
  @item @refapimethod{to-file,to-file after}
  @end itemize
@end itemize

@c ----------------------------------------

@anchor{api-software-objects-compilable}
@subsubsection Class @code{compilable}

[
@ref{SEL API,API} |
@ref{api-software-objects, Software Objects} |
@ref{api-software-object-mixins,Software Object Class ``Mixins''} |
Class @code{compilable}
]


@itemize
@item Class @refapiclass{compilable}
@item Methods
  @itemize
  @item @refapimethod{phenome,phenome}
  @end itemize
@end itemize

@c ----------------------------------------

@include api--styleable.texi

@c ----------------------------------------

@anchor{api-software-objects-diff}
@subsubsection Class @code{diff}

[
@ref{SEL API, API} |
@ref{api-software-objects, Software Objects} |
@ref{api-software-object-mixins,Software Object Class ``Mixins''} |
Class @code{diff}
]

@itemize
@item Class @refapiclass{diff}
@item Methods
  @itemize
  @item @refapimethod{copy,copy}
  @item @refapimethod{genome,genome}
  @item @refapimethod{reference,reference}
  @end itemize
@end itemize

@c defmethod original
@c defmethod (setf genome)


@c ----------------------------------------

@anchor{api-software-objects-sw-range}
@subsubsection Class @code{sw-range}

[
@ref{SEL API, API} |
@ref{api-software-objects, Software Objects} |
@ref{api-software-object-mixins,Software Object Class ``Mixins''} |
Class @code{sw-range}
]

@itemize
@item Class @refapiclass{sw-range}
@item Generic Functions
  @itemize
  @item @refapigeneric{reference}
  @item @refapigeneric{(setf reference)}
  @end itemize

@item Methods
  @itemize
  @item @refapimethod{apply-mutation,apply-mutation} : multiple methods with mutations @refapiclass{simple-cut}, @refapiclass{simple-insert}, @refapiclass{  simple-swap}
  @item @refapimethod{from-file,from-file}
  @item @refapimethod{lines,lines}
  @item @refapimethod{one-point-crossover,one-point-crossover}
  @item @refapimethod{reference,referencce}
  @item @refapimethod{reference,(setf reference)}
  @item @refapimethod{two-point-crossover,two-point-crossover}

  @end itemize
@end itemize

@c defun range-size
@c defmethod (setf lines)
@c defun range-nth
@c defun range-cut
@c defun range-insert
@c defun range-swap
@c defun range-subseq



