
@menu
* Use the compiler(s)::
* Formatting::
* Comments::
* Git Commits::
* Testing::
* Use existing utility functions::
* Packages::
* Portability::
* Documentation::
* Don't use superfluous @code{let} or @code{let*} bindings::
* Map instead of iterate::
* Judicious use of indentation macros::
@end menu

@node Use the compiler(s), Formatting, SEL Coding Standards, SEL Coding Standards
@appendixsec Use the compiler(s)


All code should compile without warning in both SBCL and CCL.  Files
may easily be compiled from within Emacs by running @code{M-x
slime-compile-file} (which is typically bound to @code{C-c M-k}).  These
warnings are often useful and catch type errors and outright mistakes
that can easily slip through testing.  This will also ensure
@ref{Portability,portability}.


@node Formatting, Comments, Use the compiler(s), SEL Coding Standards
@appendixsec Formatting

All code should conform to the following standards:
@itemize
@item no tabs
@item no closing parenthesis on lines by themselves
@item indent everything as would GNU Emacs
@item typically only include vertical whitespace between top-level
   forms, sections of large functions may be demarcated by vertical
   whitespace but it is better to use smaller functions
@item no trailing whitespace
@item no whitespace following an open-paren
@item lines should be limited to a maximum of 79 characters
@end itemize

Google's @url{http://google.github.io/styleguide/lispguide.xml,Common
Lisp guide} is generally applicable.  Specifically the sections on
@url{http://google.github.io/styleguide/lispguide.xml#Formatting,Formatting}
and
@url{http://google.github.io/styleguide/lispguide.xml#Comment_semicolons,Comment
semicolons}.

The
@url{https://github.com/eschulte/lisp-format/blob/master/lisp-format,lisp-format}
utility may be used to automatically check and fix code formatting.
See the comments at the top of the lisp-format script for more
information.  The git-lisp-format script (adopted from
@url{https://llvm.org/svn/llvm-project/cfe/trunk/tools/clang-format/git-clang-format,git-clang-format})
integrates lisp-format with git, enabling the easy application of
lisp-format to all lines that differ between the working directory and
a given commit, which defaults to HEAD.  To automatically run
``@code{git lisp-format}'' before every commit and abort the commit
when re-formatting is needed, save the following shell script to
@code{.git/hooks/pre-commit} in the base of this repository and mark
it as executable.

@verbatim
#!/bin/bash
OUTPUT=$(git lisp-format --diff)
if [ "${OUTPUT}" == "no modified files to format" ] ||
   [ "${OUTPUT}" == "lisp-format did not modify any files" ];then
    exit 0
else
    echo "Run git lisp-format, then commit."
    exit 1
fi
@end verbatim


@node Comments, Git Commits, Formatting, SEL Coding Standards
@appendixsec Comments (number of semicolons matters)

@itemize
@item All comments should be complete sentences with capitalization and a period.
@item 3 (or 4) semicolons at the beginning of a line for block comments outside of any top level form
@item 2 semicolons for comments that appear between lines of code
@item 1 semicolon for comments that appear after code at the end of a line
@item vertical align end-of-line comments when possible
@item always use a space after the last semicolon and before comment text
@item In Emacs @code{M-;} inserts a comment of the appropriate type.
@end itemize

@node Git Commits, Testing, Comments, SEL Coding Standards
@appendixsec Git Commits

Follow
@url{https://chris.beams.io/posts/git-commit/#seven-rules,the seven rules of git commit messages}.

@enumerate
@item Separate subject from body with a blank line.
@item Limit the subject line to 50 characters.
@item Capitalize the subject line.
@item Do not end the subject line with a period.
@item Use the imperative mood in the subject line.
@item Wrap the body at 72 characters.
@item Use the body to explain what and why vs. how.
@end enumerate


@node Testing, Use existing utility functions, Git Commits, SEL Coding Standards
@appendixsec Testing

Every merge request should first pass all tests which are defined in
the @code{SOFTWARE-EVOLUTION-LIBRARY/TEST} package using the
@url{https://common-lisp.net/project/stefil/index-old.shtml,Stefil}
testing framework.

Additional unit tests should be defined for any added functionality.
Unit tests should execute @i{quickly}, long running tests should not
be included in the default unit test suite.

@node Use existing utility functions, Packages, Testing, SEL Coding Standards
@appendixsec Use existing utility functions (don't write your own)

Look carefully for existing utility functions before
re-implementation.  Check the following places before implementation
of any utility:

@enumerate
@item
Run @code{(apropos "thing")} in the repl.

@item
Search the
@url{http://www.lispworks.com/documentation/HyperSpec/Front/,hyperspec}
(with Emacs slime properly configured you can tab-complete to plumb
the existing definitions in the hyperspec).  The hyperspec is a
reference, good for lookup and bad for browsing.

@item
Check the
@url{https://common-lisp.net/project/alexandria/draft/alexandria.html,Alexandria}
and
@url{https://github.com/ruricolist/serapeum/blob/master/REFERENCE.md,Serapeum}
packages for general utilities and the
@url{https://github.com/fare/asdf/tree/master/uiop,UIOP} package for
filesystem and OS utilities.

@item
Check the ``GT'' package (see @ref{Basic Utilities}).

@end enumerate


@node Packages, Portability, Use existing utility functions, SEL Coding Standards
@appendixsec Packages

Only use packages which are explicitly included in your current
package. E.g., calling @code{cl-ppcre:foo} just because
@code{cl-ppcre} happens to be loaded in the lisp image every time
you've run tests is @emph{not} acceptable. Instead the @code{:use}
option to @code{defpackage} should explicitly include the required
package and if necessary @code{:shadow} and
@code{:shadowing-import-from} should be used to limit the symbols
imported. Alternately, when using package-inferred systems, the
@code{:import-from} and @code{:local-nicknames} options to
@code{defpackage} may be used to make dependencies explicit without
using imports.


@node Portability, Documentation, Packages, SEL Coding Standards
@appendixsec Portability

All code should be portable across at least
@url{http://www.sbcl.org/,SBCL} and
@url{https://ccl.clozure.com/,CCL}.  Any code which is specific to a
particular implementation must be protected by @code{#+impl} guards.


@node Documentation, Don't use superfluous @code{let} or @code{let*} bindings, Portability, SEL Coding Standards
@appendixsec Documentation

@subsection For functions and methods

Write documentation strings for @emph{every} function @emph{always}.
Also, ensure every @code{defmethod} has a @code{defgeneric} which has
a documentation string.  The following formatting should be used for
docstrings.

@verbatim
Brief description (maximum 79 characters).

Longer description if necessary. This may span multiple lines, but
should adhere to the standard 79-character limit.

Paragraph breaks are also OK in the longer description.
* PARAM-A description of param
* PARAM-B description of param
@end verbatim

@subsection For files and modules

Large new functional modules (e.g., a new file of code) should be
documented in the manual.  The SEL manual is located in the @code{doc/}
subdirectory and is written in texinfo.  Follow the example set by
existing documentation to add new sections to this manual.



@node Don't use superfluous @code{let} or @code{let*} bindings, Map instead of iterate, Documentation, SEL Coding Standards
@appendixsec Don't use superfluous @code{let} or @code{let*} bindings


Any @code{let*} which can be changed to a @code{let} should be changed
to a @code{let}.

Typically, if a let-bound variable is only used once it should not be
bound but instead its definition should replace its sole use.  This
is suggested because each variable binding forces every subsequent
reader to perform a dereference.  For example, this

@lisp
(let* ((subject (quick brown fox))
       (object (lazy dog))
       (sentence (The subject jumps over the object.)))
  sentence)
@end lisp

is harder to read than this.

@lisp
(The quick brown fox jumps over the lazy dog)
@end lisp

There are some exceptions to this rule.

@itemize

@item
If the variable is often used in debugging (printf or debugger) and it
thus matters that it is bound at that point in the code then this may
be acceptable.

@item
If the let-bound value appears as, lets say, the third argument to
some function the in-lining of the long calculation may obscure the
flow of the function with it's other arguments.

@item
If use of the let avoids horrible indentation issues then it may be
acceptable.

@end itemize

@node Map instead of iterate, Judicious use of indentation macros, Don't use superfluous @code{let} or @code{let*} bindings, SEL Coding Standards
@appendixsec Map instead of iterate


Generally @code{mapc}, @code{mapcar}, @code{mappend}, and
@code{reduce} should be preferred to use of the @code{iterate} macro
(which should itself be preferred to @code{loop} which should never be
used).  In general @code{iterate} should be limited to cases where
non-trivial accumulation variables or incremental state are needed.
Potentially there are cases where a straightforward @code{iterate} has
better indentation behavior, in which case it might be acceptable (but
I can't think of one now).


@node Judicious use of indentation macros, ChangeLog, Map instead of iterate, SEL Coding Standards
@appendixsec Judicious use of Indentation macros

Keeping code to within 80 columns can be difficult when deeply nested
forms or chained function calls consume most of your column budget for
indentation.  The UIOP/UTILITY:NEST macro (see
@url{https://github.com/fare/asdf/blob/master/uiop/utility.lisp,
uiop/utility.lisp}) is an excellent flexible option to reduce nesting
(see @url{https://fare.livejournal.com/189741.html, A tale of many
nests}).

Use of @code{nest} should generally be preferred to ``arrow'' macros,
(see @url{https://github.com/hipeta/arrow-macros}).  The @code{nest}
macro is simpler and more generally useful than the arrow macros.
However, the arrow macros are an acceptable option which are already
used widely within SEL.
