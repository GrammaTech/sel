@c https://keepachangelog.com/en/0.3.0/
@c
@c Any change in the version number should merit an entry in this
@c changelog.  Especially minor version or greater or anything that
@c fixes a bug or a security issue.  Any breaking changes ABSOLUTELY
@c must be mentioned in this changelog.
@c
@c Format for each entry is as follows.
@c 
@c     @subsection YYYY-MM-DD v.X.X.X -- Textual Description
@c     @cindex changelog-YYYY-MM-DD
@c     @cindex v.X.X.X
@c
@c     List of breaking or important changes.  Every breaking change
@c     should be accompanied by an example of how to change existing
@c     code in response to the change.
@c
@c Changelog entries with multiple changes should grouped them by:
@c - Added
@c - Changed
@c - Deprecated
@c - Removed
@c - Fixed
@c - Security
@c

SEL will use @url{https://semver.org/,semantic versioning} to
determine increments to version numbers.  This ChangeLog will be
roughly organized as described at
@url{https://keepachangelog.com/en/0.3.0/,Keep a ChangeLog}.  Most
importantly every version will include at least one ChangeLog entry,
and the entries will be sorted in reverse chronological order with the
most recent at the top.  Every entry will be named and indexed by date
and version number.  Working notes may be accumulated in a special
``Unreleased'' section at the top of the ChangeLog.

@appendixsec 2018-11-06 v0.1.0 -- Use package-inferred-system
@cindex changelog-2018-10-17
@cindex v0.0.3

SEL now uses the package-inferred-system feature of ASDF (see
@url{https://common-lisp.net/project/asdf/asdf/The-package_002dinferred_002dsystem-extension.html#The-package_002dinferred_002dsystem-extension}).
This implicitly defines a system for every source file in the
repository.  We then explicitly define a package for every source file
at the top of the source file.  These packages explicitly list the
dependencies of the source file (with :use) and the symbols exported
by the source file (with :export).

The result is:

@itemize

@item
An explicit flow of dependencies within the SEL project as opposed to
a single giant namespace in/from which all symbols are created and
used.  This refactoring exposed some instances of circular
dependencies and cases where the intended symbols was actually not
being used.

@item
The ability to load specific subsets of SEL.  E.g., projects without
instrumentation/tracing no longer need to build/load trace-db,
projects without the rest api don't need to load a web-server,
projects without test-suite don't need to load run-program which can
cause problems on some lisps.

@item
Much faster load/compile times in many cases (due to better physical
design and finer granularity of dependencies).

@end itemize

Instead of simply using the SOFTWARE-EVOLUTION-LIBRARY package clients
should now use the specific packages they need.  Packages are divided
into ``@code{software}'' and ``@code{components}'' packages.  So,
e.g., a project using Clang software objects and using lexicase
selection would most likely use the following packages.

@lisp
(defpackage :example
  (:use :common-lisp
        :software-evolution-library
        :software-evolution-library/utility
        :software-evolution-library/software/ast
        :software-evolution-library/software/parseable
        :software-evolution-library/software/source
        :software-evolution-library/software/clang
        :software-evolution-library/components/lexicase))
@end lisp

Note that the above example uses
@code{sel/sw/@{ast,parseable,source@}} as well as @code{sel/sw/clang}.
The ast, parseable, and source software objects are all ancestors of
clang software objects so the related packages export symbols that are
likely useful for anyone using the clang software object.

@appendixsec 2018-10-17 v0.0.2 -- Unreleased
@cindex changelog-2018-10-17
@cindex v0.0.2

@itemize

@item Removed tool-specific code formatting methods from software objects

All calls to tool-specific formatting routines (e.g. @code{clang-tidy},
@code{clang-format}, etc.) should be replaced with the generic
@code{format-genome} method.

@end itemize

@appendixsec 2018-08-21 v0.0.1 -- Unreleased
@cindex changelog-2018-08-21
@cindex v0.0.1

@itemize

@item @b{Change @code{build-target} to @code{artifacts}}

Changed the software @code{project} class as well as
@code{clang-project} and @code{java-project} to replace the
@code{build-target} field with a @code{artifacts} field.  This changes
what was previously a single string to a list of strings so that
projects may now build multiple artifacts (e.g., an executable and
multiple libraries).  This also changes the use of the project
@code{build-command}.  Previously the @code{build-target} was appended
to the @code{build-command} as a target, now the @code{build-command}
should be self-contained and will be run as is.

@item @b{Remove @code{current-file} and @code{with-current-file}}

Changed the software @code{project} class to remove the
@code{current-file} behavior.  This removes some potentially confusing
behavior in which projects would override @code{no-applicable-method}
to dispatch to the current-file (if set).  This makes it hard to have
software objects inherit from both a project and from the type of that
project.

@end itemize

@appendixsec 2018-07-25 v0.0.0 -- Initial Release to Quicklisp
@cindex changelog-2018-07-25
@cindex v0.0.0

Initial changelog entry for version v.0.0.0 of the
SOFTWARE-EVOLUTION-LIBRARY (SEL) Package.  This is the version
initially appearing in the 2018-07 Quicklisp release.
