;;;; -*- emacs-lisp -*-
(mapc (lambda (dir) (add-to-list 'load-path dir))
      (directory-files (concat (getenv "QUICK_LISP")
                               "/dists/quicklisp/software/") t "slime-v*"))
(require 'slime)
(require 'paredit)

(set-default 'indent-tabs-mode nil)
(pushnew 'untabify *lisp-format-fixers*)

(defun fix-trailing-parens (start end &optional _arg)
  "Use `paredit-close-parenthesis' to fix trailing parens."
  (interactive (if current-prefix-arg
                   (list (point-min) (point-max) current-prefix-arg)
                 (list (region-beginning) (region-end) nil)))
  (let ((c (current-column)))
    (save-excursion
      (save-restriction
        (narrow-to-region (point-min) end)
        (goto-char start)
        (while (re-search-forward "^ *)" nil t)
        (forward-char -1)
        (paredit-close-parenthesis))))
  (move-to-column c)))
(pushnew 'fix-trailing-parens *lisp-format-fixers*)

;;; Syntax table extension for curry-compose-reader-macros
(modify-syntax-entry ?\[ "(]" lisp-mode-syntax-table)
(modify-syntax-entry ?\] ")[" lisp-mode-syntax-table)
(modify-syntax-entry ?\{ "(}" lisp-mode-syntax-table)
(modify-syntax-entry ?\} "){" lisp-mode-syntax-table)
(modify-syntax-entry ?\« "(»" lisp-mode-syntax-table)
(modify-syntax-entry ?\» ")«" lisp-mode-syntax-table)

;;; Specify indentation levels for specific functions.
(mapc (lambda (pair) (put (first pair) 'lisp-indent-function (second pair)))
      '((make-instance 1)
        (if-let 1)
        (if-let* 1)
        (when-let 1)
        (when-let* 1)
        (defixture 1)))
