variables:
  GIT_SUBMODULE_STRATEGY: recursive

default:
  image: $DOCKER_REGISTRY/$CI_PROJECT_PATH
  tags: ["kubernetes", "cluster"]
  before_script:
    - cp -r $(pwd)/ /root/quicklisp/local-projects/
    - cd /root/quicklisp/local-projects/$CI_PROJECT_NAME
    - GT=yes make dependencies libcxx-src

check-format:
  stage: .pre
  script:
    - git lisp-format
  except:
    - schedules

build-manual:
  stage: test
  script:
    - make doc
  except:
    - schedules

build-no-tree-sitter:
  stage: test
  script:
    - mv /usr/share/tree-sitter /usr/share/hidden-tree-sitter
    - sbcl --non-interactive --eval "(ql:quickload 'software-evolution-library/test)"
  except:
    - schedules

.test-template: &test
  stage: test
  script:
    - LISP=$LISP GT=yes make real-check
  except:
    - schedules

test-sbcl:
  variables:
    LISP: 'sbcl'
  <<: *test

test-ccl:
  variables:
    LISP: 'ccl'
  <<: *test

.test-python-template: &test-python
  stage: test
  except:
    - schedules
  script:
    - pip install -r python/requirements-dev.txt
    - pip install -r python/requirements.txt
    - pre-commit install
    - pre-commit run --all-files
    - LISP=$LISP GT=yes make python-check

test-python-sbcl:
  variables:
    LISP: 'sbcl'
  <<: *test-python

test-python-ccl:
  variables:
    LISP: 'ccl'
  <<: *test-python

deploy-python-package:
  stage: deploy
  image: $DOCKER_REGISTRY/$CI_PROJECT_PATH/python
  script:
    - sbcl --load "/root/quicklisp/setup.lisp"
           --eval '(ql:quickload :software-evolution-library/run-tree-sitter-py-generator)'
           --eval '(asdf:make :software-evolution-library/run-tree-sitter-py-generator)'
           --eval '(quit)'
    - sbcl --load "/root/quicklisp/setup.lisp"
           --eval '(ql:quickload :software-evolution-library/deploy-tree-sitter-interface)'
           --eval '(asdf:make :software-evolution-library/deploy-tree-sitter-interface)'
           --eval '(quit)'
    - cd python/
    - python3.8 -m pip install -r requirements-dev.txt
    - ../bin/tree-sitter-py-generator > asts/types.py
    - python3.8 setup.py bdist_wheel --dist-dir=$CI_PROJECT_DIR/python/dist --plat-name=manylinux1_x86_64
    - python3.8 -m twine upload --verbose $CI_PROJECT_DIR/python/dist/*.whl -u __token__ -p $PYPI_API_KEY
  rules:
    - if: '$CI_COMMIT_REF_NAME =~ /^r\d\d\d\d\.\d\d\.\d\d/'

dependent-genpatcher:
  stage: deploy
  only: [master]
  except: [schedules]
  trigger: synthesis/genpatcher

dependent-refactoring-mutations:
  stage: deploy
  only: [master]
  except: [schedules]
  trigger: synthesis/refactoring-mutations

dependent-resolve:
  stage: deploy
  only: [master]
  except: [schedules]
  trigger: synthesis/resolve

dependent-ssr:
  stage: deploy
  only: [master]
  except: [schedules]
  trigger: synthesis/ssr

dependent-trace-db:
  stage: deploy
  only: [master]
  except: [schedules]
  trigger: synthesis/trace-db

# Use kaniko to build docker image.
#  https://docs.gitlab.com/ee/ci/docker/using_kaniko.html
#  https://github.com/GoogleContainerTools/kaniko
.image-build: &image-build
  stage: build
  inherit:
    default: false
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  tags: ["kubernetes", "cluster"]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"$REGISTRY\":{\"username\":\"$USERNAME\",\"password\":\"$PASSWORD\"}}}" > /kaniko/.docker/config.json
    - >-
      /kaniko/executor
      --context=$CI_PROJECT_DIR/
      --dockerfile=$CI_PROJECT_DIR/Dockerfile
      --destination=$DESTINATION
  only:
    - schedules

scheduled-build-internal:
  variables:
    DESTINATION: $DOCKER_REGISTRY/$CI_PROJECT_PATH
    USERNAME: $CI_REGISTRY_USER
    PASSWORD: $CI_REGISTRY_PASSWORD
    REGISTRY: $CI_REGISTRY
  <<: *image-build

scheduled-build-public:
  variables:
    DESTINATION: grammatech/sel
    USERNAME: $DOCKERHUB_USERNAME
    PASSWORD: $DOCKERHUB_PASSWORD
    REGISTRY: https://index.docker.io/v1/
  <<: *image-build
